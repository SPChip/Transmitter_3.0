
Transmitter_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f64  08005f64  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08005f64  08005f64  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f64  08005f64  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000064  08005fd0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08005fd0  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a1f  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024cb  00000000  00000000  00030aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00032fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d23  00000000  00000000  00034050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018117  00000000  00000000  00034d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014190  00000000  00000000  0004ce8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000902e7  00000000  00000000  0006101a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ba4  00000000  00000000  000f1304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f5ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e98 	.word	0x08005e98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08005e98 	.word	0x08005e98

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	b0bd      	sub	sp, #244	; 0xf4
 8000150:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ff4b 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fa63 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fc6f 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 fc4f 	bl	8000a00 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000162:	f000 fc23 	bl	80009ac <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000166:	f000 fb79 	bl	800085c <MX_TIM3_Init>
  MX_ADC1_Init();
 800016a:	f000 fab5 	bl	80006d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800016e:	f000 fb47 	bl	8000800 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000172:	f000 fbc7 	bl	8000904 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_SET_COUNTER(&htim3, encoders_start_counter);
 8000176:	4b95      	ldr	r3, [pc, #596]	; (80003cc <main+0x280>)
 8000178:	881a      	ldrh	r2, [r3, #0]
 800017a:	4b95      	ldr	r3, [pc, #596]	; (80003d0 <main+0x284>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000180:	213c      	movs	r1, #60	; 0x3c
 8000182:	4893      	ldr	r0, [pc, #588]	; (80003d0 <main+0x284>)
 8000184:	f004 fe94 	bl	8004eb0 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim4, encoders_start_counter);
 8000188:	4b90      	ldr	r3, [pc, #576]	; (80003cc <main+0x280>)
 800018a:	881a      	ldrh	r2, [r3, #0]
 800018c:	4b91      	ldr	r3, [pc, #580]	; (80003d4 <main+0x288>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000192:	213c      	movs	r1, #60	; 0x3c
 8000194:	488f      	ldr	r0, [pc, #572]	; (80003d4 <main+0x288>)
 8000196:	f004 fe8b 	bl	8004eb0 <HAL_TIM_Encoder_Start>

	HAL_ADCEx_Calibration_Start(&hadc1);//калибровка ADC
 800019a:	488f      	ldr	r0, [pc, #572]	; (80003d8 <main+0x28c>)
 800019c:	f001 fb54 	bl	8001848 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 7);
 80001a0:	2207      	movs	r2, #7
 80001a2:	498e      	ldr	r1, [pc, #568]	; (80003dc <main+0x290>)
 80001a4:	488c      	ldr	r0, [pc, #560]	; (80003d8 <main+0x28c>)
 80001a6:	f001 f85b 	bl	8001260 <HAL_ADC_Start_DMA>


	uint8_t message[100] = { '\0' };
 80001aa:	2300      	movs	r3, #0
 80001ac:	637b      	str	r3, [r7, #52]	; 0x34
 80001ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001b2:	2260      	movs	r2, #96	; 0x60
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f005 f9dc 	bl	8005574 <memset>
	transmit_data[4] = 127;
 80001bc:	4b88      	ldr	r3, [pc, #544]	; (80003e0 <main+0x294>)
 80001be:	227f      	movs	r2, #127	; 0x7f
 80001c0:	711a      	strb	r2, [r3, #4]
	transmit_data[5] = 127;
 80001c2:	4b87      	ldr	r3, [pc, #540]	; (80003e0 <main+0x294>)
 80001c4:	227f      	movs	r2, #127	; 0x7f
 80001c6:	715a      	strb	r2, [r3, #5]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//обработка энкодера 1
		encoder_1_cur_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80001c8:	4b81      	ldr	r3, [pc, #516]	; (80003d0 <main+0x284>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	4b84      	ldr	r3, [pc, #528]	; (80003e4 <main+0x298>)
 80001d2:	801a      	strh	r2, [r3, #0]
		if (encoder_1_cur_counter != encoder_1_prev_counter) {
 80001d4:	4b83      	ldr	r3, [pc, #524]	; (80003e4 <main+0x298>)
 80001d6:	881a      	ldrh	r2, [r3, #0]
 80001d8:	4b83      	ldr	r3, [pc, #524]	; (80003e8 <main+0x29c>)
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d026      	beq.n	800022e <main+0xe2>
			if (encoder_1_cur_counter > encoder_1_prev_counter) {
 80001e0:	4b80      	ldr	r3, [pc, #512]	; (80003e4 <main+0x298>)
 80001e2:	881a      	ldrh	r2, [r3, #0]
 80001e4:	4b80      	ldr	r3, [pc, #512]	; (80003e8 <main+0x29c>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d90e      	bls.n	800020a <main+0xbe>
				if (transmit_data[4] > 251) {
 80001ec:	4b7c      	ldr	r3, [pc, #496]	; (80003e0 <main+0x294>)
 80001ee:	791b      	ldrb	r3, [r3, #4]
 80001f0:	2bfb      	cmp	r3, #251	; 0xfb
 80001f2:	d903      	bls.n	80001fc <main+0xb0>
					transmit_data[4] = 255;
 80001f4:	4b7a      	ldr	r3, [pc, #488]	; (80003e0 <main+0x294>)
 80001f6:	22ff      	movs	r2, #255	; 0xff
 80001f8:	711a      	strb	r2, [r3, #4]
 80001fa:	e014      	b.n	8000226 <main+0xda>
				} else {
					transmit_data[4] += 2;
 80001fc:	4b78      	ldr	r3, [pc, #480]	; (80003e0 <main+0x294>)
 80001fe:	791b      	ldrb	r3, [r3, #4]
 8000200:	3302      	adds	r3, #2
 8000202:	b2da      	uxtb	r2, r3
 8000204:	4b76      	ldr	r3, [pc, #472]	; (80003e0 <main+0x294>)
 8000206:	711a      	strb	r2, [r3, #4]
 8000208:	e00d      	b.n	8000226 <main+0xda>
				}
			} else {
				if (transmit_data[4] < 4) {
 800020a:	4b75      	ldr	r3, [pc, #468]	; (80003e0 <main+0x294>)
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	2b03      	cmp	r3, #3
 8000210:	d803      	bhi.n	800021a <main+0xce>
					transmit_data[4] = 0;
 8000212:	4b73      	ldr	r3, [pc, #460]	; (80003e0 <main+0x294>)
 8000214:	2200      	movs	r2, #0
 8000216:	711a      	strb	r2, [r3, #4]
 8000218:	e005      	b.n	8000226 <main+0xda>
				} else {
					transmit_data[4] -= 2;
 800021a:	4b71      	ldr	r3, [pc, #452]	; (80003e0 <main+0x294>)
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	3b02      	subs	r3, #2
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b6f      	ldr	r3, [pc, #444]	; (80003e0 <main+0x294>)
 8000224:	711a      	strb	r2, [r3, #4]
				}
			}
			encoder_1_prev_counter = encoder_1_cur_counter;
 8000226:	4b6f      	ldr	r3, [pc, #444]	; (80003e4 <main+0x298>)
 8000228:	881a      	ldrh	r2, [r3, #0]
 800022a:	4b6f      	ldr	r3, [pc, #444]	; (80003e8 <main+0x29c>)
 800022c:	801a      	strh	r2, [r3, #0]
		}

		//обработка энкодера 2
		encoder_2_encoder_1_cur_counter = __HAL_TIM_GET_COUNTER(&htim4);
 800022e:	4b69      	ldr	r3, [pc, #420]	; (80003d4 <main+0x288>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000234:	b29a      	uxth	r2, r3
 8000236:	4b6d      	ldr	r3, [pc, #436]	; (80003ec <main+0x2a0>)
 8000238:	801a      	strh	r2, [r3, #0]
		if (encoder_2_encoder_1_cur_counter != encoder_2_encoder_1_prev_counter) {
 800023a:	4b6c      	ldr	r3, [pc, #432]	; (80003ec <main+0x2a0>)
 800023c:	881a      	ldrh	r2, [r3, #0]
 800023e:	4b6c      	ldr	r3, [pc, #432]	; (80003f0 <main+0x2a4>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	429a      	cmp	r2, r3
 8000244:	d026      	beq.n	8000294 <main+0x148>
			if (encoder_2_encoder_1_cur_counter > encoder_2_encoder_1_prev_counter) {
 8000246:	4b69      	ldr	r3, [pc, #420]	; (80003ec <main+0x2a0>)
 8000248:	881a      	ldrh	r2, [r3, #0]
 800024a:	4b69      	ldr	r3, [pc, #420]	; (80003f0 <main+0x2a4>)
 800024c:	881b      	ldrh	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d90e      	bls.n	8000270 <main+0x124>
				if (transmit_data[5] > 251) {
 8000252:	4b63      	ldr	r3, [pc, #396]	; (80003e0 <main+0x294>)
 8000254:	795b      	ldrb	r3, [r3, #5]
 8000256:	2bfb      	cmp	r3, #251	; 0xfb
 8000258:	d903      	bls.n	8000262 <main+0x116>
					transmit_data[5] = 255;
 800025a:	4b61      	ldr	r3, [pc, #388]	; (80003e0 <main+0x294>)
 800025c:	22ff      	movs	r2, #255	; 0xff
 800025e:	715a      	strb	r2, [r3, #5]
 8000260:	e014      	b.n	800028c <main+0x140>
				} else {
					transmit_data[5] += 2;
 8000262:	4b5f      	ldr	r3, [pc, #380]	; (80003e0 <main+0x294>)
 8000264:	795b      	ldrb	r3, [r3, #5]
 8000266:	3302      	adds	r3, #2
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b5d      	ldr	r3, [pc, #372]	; (80003e0 <main+0x294>)
 800026c:	715a      	strb	r2, [r3, #5]
 800026e:	e00d      	b.n	800028c <main+0x140>
				}
			} else {
				if (transmit_data[5] < 4) {
 8000270:	4b5b      	ldr	r3, [pc, #364]	; (80003e0 <main+0x294>)
 8000272:	795b      	ldrb	r3, [r3, #5]
 8000274:	2b03      	cmp	r3, #3
 8000276:	d803      	bhi.n	8000280 <main+0x134>
					transmit_data[5] = 0;
 8000278:	4b59      	ldr	r3, [pc, #356]	; (80003e0 <main+0x294>)
 800027a:	2200      	movs	r2, #0
 800027c:	715a      	strb	r2, [r3, #5]
 800027e:	e005      	b.n	800028c <main+0x140>
				} else {
					transmit_data[5] -= 2;
 8000280:	4b57      	ldr	r3, [pc, #348]	; (80003e0 <main+0x294>)
 8000282:	795b      	ldrb	r3, [r3, #5]
 8000284:	3b02      	subs	r3, #2
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4b55      	ldr	r3, [pc, #340]	; (80003e0 <main+0x294>)
 800028a:	715a      	strb	r2, [r3, #5]
				}
			}
			encoder_2_encoder_1_prev_counter = encoder_2_encoder_1_cur_counter;
 800028c:	4b57      	ldr	r3, [pc, #348]	; (80003ec <main+0x2a0>)
 800028e:	881a      	ldrh	r2, [r3, #0]
 8000290:	4b57      	ldr	r3, [pc, #348]	; (80003f0 <main+0x2a4>)
 8000292:	801a      	strh	r2, [r3, #0]
		}

		//обработка кнопки энкодера 1
		if (HAL_GPIO_ReadPin(ENCODER_1_KEY_GPIO_Port, ENCODER_1_KEY_Pin)) {
 8000294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000298:	4856      	ldr	r0, [pc, #344]	; (80003f4 <main+0x2a8>)
 800029a:	f002 f887 	bl	80023ac <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <main+0x15e>
			encoder_1_key_flag = 1;
 80002a4:	4b54      	ldr	r3, [pc, #336]	; (80003f8 <main+0x2ac>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	701a      	strb	r2, [r3, #0]
		}
		if (encoder_1_key_flag) {
 80002aa:	4b53      	ldr	r3, [pc, #332]	; (80003f8 <main+0x2ac>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d056      	beq.n	8000360 <main+0x214>
			uint32_t ms = HAL_GetTick();
 80002b2:	f000 fef3 	bl	800109c <HAL_GetTick>
 80002b6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			uint8_t key1_state = HAL_GPIO_ReadPin(ENCODER_1_KEY_GPIO_Port, ENCODER_1_KEY_Pin);
 80002ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002be:	484d      	ldr	r0, [pc, #308]	; (80003f4 <main+0x2a8>)
 80002c0:	f002 f874 	bl	80023ac <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			if (key1_state == 0 && !encoder_1_key_short_state && (ms - encoder_1_key_time) > 50) {
 80002ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d115      	bne.n	80002fe <main+0x1b2>
 80002d2:	4b4a      	ldr	r3, [pc, #296]	; (80003fc <main+0x2b0>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d111      	bne.n	80002fe <main+0x1b2>
 80002da:	4b49      	ldr	r3, [pc, #292]	; (8000400 <main+0x2b4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	2b32      	cmp	r3, #50	; 0x32
 80002e6:	d90a      	bls.n	80002fe <main+0x1b2>
				encoder_1_key_short_state = 1;
 80002e8:	4b44      	ldr	r3, [pc, #272]	; (80003fc <main+0x2b0>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]
				encoder_1_key_long_state = 0;
 80002ee:	4b45      	ldr	r3, [pc, #276]	; (8000404 <main+0x2b8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
				encoder_1_key_time = ms;
 80002f4:	4a42      	ldr	r2, [pc, #264]	; (8000400 <main+0x2b4>)
 80002f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	e030      	b.n	8000360 <main+0x214>
			} else if (key1_state == 0 && !encoder_1_key_long_state
 80002fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000302:	2b00      	cmp	r3, #0
 8000304:	d10f      	bne.n	8000326 <main+0x1da>
 8000306:	4b3f      	ldr	r3, [pc, #252]	; (8000404 <main+0x2b8>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d10b      	bne.n	8000326 <main+0x1da>
					&& (ms - encoder_1_key_time) > 2000) {
 800030e:	4b3c      	ldr	r3, [pc, #240]	; (8000400 <main+0x2b4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000316:	1ad3      	subs	r3, r2, r3
 8000318:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800031c:	d903      	bls.n	8000326 <main+0x1da>
				encoder_1_key_long_state = 1;
 800031e:	4b39      	ldr	r3, [pc, #228]	; (8000404 <main+0x2b8>)
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
 8000324:	e01c      	b.n	8000360 <main+0x214>

			} else if (key1_state == 1 && encoder_1_key_short_state
 8000326:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800032a:	2b01      	cmp	r3, #1
 800032c:	d118      	bne.n	8000360 <main+0x214>
 800032e:	4b33      	ldr	r3, [pc, #204]	; (80003fc <main+0x2b0>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d014      	beq.n	8000360 <main+0x214>
					&& (ms - encoder_1_key_time) > 50) {
 8000336:	4b32      	ldr	r3, [pc, #200]	; (8000400 <main+0x2b4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	2b32      	cmp	r3, #50	; 0x32
 8000342:	d90d      	bls.n	8000360 <main+0x214>
				encoder_1_key_short_state = 0;
 8000344:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <main+0x2b0>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
				encoder_1_key_time = ms;
 800034a:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <main+0x2b4>)
 800034c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000350:	6013      	str	r3, [r2, #0]
				if (!encoder_1_key_long_state) {
 8000352:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <main+0x2b8>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d102      	bne.n	8000360 <main+0x214>

					transmit_data[4] = 127;
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <main+0x294>)
 800035c:	227f      	movs	r2, #127	; 0x7f
 800035e:	711a      	strb	r2, [r3, #4]
				}
			}
		}

		//обработка кнопки энкодера 2
		if (HAL_GPIO_ReadPin(ENCODER_2_KEY_GPIO_Port, ENCODER_2_KEY_Pin)) {
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	4823      	ldr	r0, [pc, #140]	; (80003f4 <main+0x2a8>)
 8000366:	f002 f821 	bl	80023ac <HAL_GPIO_ReadPin>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <main+0x22a>
			encoder_2_key_flag = 1;
 8000370:	4b25      	ldr	r3, [pc, #148]	; (8000408 <main+0x2bc>)
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
		}
		if (encoder_2_key_flag) {
 8000376:	4b24      	ldr	r3, [pc, #144]	; (8000408 <main+0x2bc>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d07d      	beq.n	800047a <main+0x32e>
			uint32_t ms_2 = HAL_GetTick();
 800037e:	f000 fe8d 	bl	800109c <HAL_GetTick>
 8000382:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			uint8_t key2_state = HAL_GPIO_ReadPin(ENCODER_2_KEY_GPIO_Port, ENCODER_2_KEY_Pin);
 8000386:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038a:	481a      	ldr	r0, [pc, #104]	; (80003f4 <main+0x2a8>)
 800038c:	f002 f80e 	bl	80023ac <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			if (key2_state == 0 && !encoder_2_key_encoder_1_key_short_state && (ms_2 - encoder_2_key_time) > 50) {
 8000396:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800039a:	2b00      	cmp	r3, #0
 800039c:	d13c      	bne.n	8000418 <main+0x2cc>
 800039e:	4b1b      	ldr	r3, [pc, #108]	; (800040c <main+0x2c0>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d138      	bne.n	8000418 <main+0x2cc>
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <main+0x2c4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80003ae:	1ad3      	subs	r3, r2, r3
 80003b0:	2b32      	cmp	r3, #50	; 0x32
 80003b2:	d931      	bls.n	8000418 <main+0x2cc>
				encoder_2_key_encoder_1_key_short_state = 1;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <main+0x2c0>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	701a      	strb	r2, [r3, #0]
				encoder_2_key_encoder_1_key_long_state = 0;
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <main+0x2c8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
				encoder_2_key_time = ms_2;
 80003c0:	4a13      	ldr	r2, [pc, #76]	; (8000410 <main+0x2c4>)
 80003c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80003c6:	6013      	str	r3, [r2, #0]
 80003c8:	e057      	b.n	800047a <main+0x32e>
 80003ca:	bf00      	nop
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000148 	.word	0x20000148
 80003d4:	20000190 	.word	0x20000190
 80003d8:	20000080 	.word	0x20000080
 80003dc:	20000238 	.word	0x20000238
 80003e0:	20000248 	.word	0x20000248
 80003e4:	20000232 	.word	0x20000232
 80003e8:	20000002 	.word	0x20000002
 80003ec:	20000234 	.word	0x20000234
 80003f0:	20000004 	.word	0x20000004
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000220 	.word	0x20000220
 80003fc:	20000228 	.word	0x20000228
 8000400:	20000224 	.word	0x20000224
 8000404:	20000229 	.word	0x20000229
 8000408:	2000022a 	.word	0x2000022a
 800040c:	20000230 	.word	0x20000230
 8000410:	2000022c 	.word	0x2000022c
 8000414:	20000231 	.word	0x20000231
			} else if (key2_state == 0 && !encoder_2_key_encoder_1_key_long_state
 8000418:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800041c:	2b00      	cmp	r3, #0
 800041e:	d10f      	bne.n	8000440 <main+0x2f4>
 8000420:	4b74      	ldr	r3, [pc, #464]	; (80005f4 <main+0x4a8>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d10b      	bne.n	8000440 <main+0x2f4>
					&& (ms_2 - encoder_2_key_time) > 2000) {
 8000428:	4b73      	ldr	r3, [pc, #460]	; (80005f8 <main+0x4ac>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000436:	d903      	bls.n	8000440 <main+0x2f4>
				encoder_2_key_encoder_1_key_long_state = 1;
 8000438:	4b6e      	ldr	r3, [pc, #440]	; (80005f4 <main+0x4a8>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
 800043e:	e01c      	b.n	800047a <main+0x32e>

			} else if (key2_state == 1 && encoder_2_key_encoder_1_key_short_state
 8000440:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000444:	2b01      	cmp	r3, #1
 8000446:	d118      	bne.n	800047a <main+0x32e>
 8000448:	4b6c      	ldr	r3, [pc, #432]	; (80005fc <main+0x4b0>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d014      	beq.n	800047a <main+0x32e>
					&& (ms_2 - encoder_2_key_time) > 50) {
 8000450:	4b69      	ldr	r3, [pc, #420]	; (80005f8 <main+0x4ac>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	2b32      	cmp	r3, #50	; 0x32
 800045c:	d90d      	bls.n	800047a <main+0x32e>
				encoder_2_key_encoder_1_key_short_state = 0;
 800045e:	4b67      	ldr	r3, [pc, #412]	; (80005fc <main+0x4b0>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
				encoder_2_key_time = ms_2;
 8000464:	4a64      	ldr	r2, [pc, #400]	; (80005f8 <main+0x4ac>)
 8000466:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800046a:	6013      	str	r3, [r2, #0]
				if (!encoder_2_key_encoder_1_key_long_state) {
 800046c:	4b61      	ldr	r3, [pc, #388]	; (80005f4 <main+0x4a8>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <main+0x32e>

					transmit_data[5] = 127;
 8000474:	4b62      	ldr	r3, [pc, #392]	; (8000600 <main+0x4b4>)
 8000476:	227f      	movs	r2, #127	; 0x7f
 8000478:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		//обработка потенциометров
		transmit_data[0]=adcData[2]*255/4095;
 800047a:	4b62      	ldr	r3, [pc, #392]	; (8000604 <main+0x4b8>)
 800047c:	889b      	ldrh	r3, [r3, #4]
 800047e:	461a      	mov	r2, r3
 8000480:	4613      	mov	r3, r2
 8000482:	021b      	lsls	r3, r3, #8
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	4a60      	ldr	r2, [pc, #384]	; (8000608 <main+0x4bc>)
 8000488:	fb82 1203 	smull	r1, r2, r2, r3
 800048c:	441a      	add	r2, r3
 800048e:	12d2      	asrs	r2, r2, #11
 8000490:	17db      	asrs	r3, r3, #31
 8000492:	1ad3      	subs	r3, r2, r3
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b5a      	ldr	r3, [pc, #360]	; (8000600 <main+0x4b4>)
 8000498:	701a      	strb	r2, [r3, #0]
		transmit_data[1]=adcData[3]*255/4095;
 800049a:	4b5a      	ldr	r3, [pc, #360]	; (8000604 <main+0x4b8>)
 800049c:	88db      	ldrh	r3, [r3, #6]
 800049e:	461a      	mov	r2, r3
 80004a0:	4613      	mov	r3, r2
 80004a2:	021b      	lsls	r3, r3, #8
 80004a4:	1a9b      	subs	r3, r3, r2
 80004a6:	4a58      	ldr	r2, [pc, #352]	; (8000608 <main+0x4bc>)
 80004a8:	fb82 1203 	smull	r1, r2, r2, r3
 80004ac:	441a      	add	r2, r3
 80004ae:	12d2      	asrs	r2, r2, #11
 80004b0:	17db      	asrs	r3, r3, #31
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b52      	ldr	r3, [pc, #328]	; (8000600 <main+0x4b4>)
 80004b8:	705a      	strb	r2, [r3, #1]
		transmit_data[2]=adcData[4]*255/4095;
 80004ba:	4b52      	ldr	r3, [pc, #328]	; (8000604 <main+0x4b8>)
 80004bc:	891b      	ldrh	r3, [r3, #8]
 80004be:	461a      	mov	r2, r3
 80004c0:	4613      	mov	r3, r2
 80004c2:	021b      	lsls	r3, r3, #8
 80004c4:	1a9b      	subs	r3, r3, r2
 80004c6:	4a50      	ldr	r2, [pc, #320]	; (8000608 <main+0x4bc>)
 80004c8:	fb82 1203 	smull	r1, r2, r2, r3
 80004cc:	441a      	add	r2, r3
 80004ce:	12d2      	asrs	r2, r2, #11
 80004d0:	17db      	asrs	r3, r3, #31
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b4a      	ldr	r3, [pc, #296]	; (8000600 <main+0x4b4>)
 80004d8:	709a      	strb	r2, [r3, #2]
		transmit_data[3]=adcData[5]*255/4095;
 80004da:	4b4a      	ldr	r3, [pc, #296]	; (8000604 <main+0x4b8>)
 80004dc:	895b      	ldrh	r3, [r3, #10]
 80004de:	461a      	mov	r2, r3
 80004e0:	4613      	mov	r3, r2
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4a48      	ldr	r2, [pc, #288]	; (8000608 <main+0x4bc>)
 80004e8:	fb82 1203 	smull	r1, r2, r2, r3
 80004ec:	441a      	add	r2, r3
 80004ee:	12d2      	asrs	r2, r2, #11
 80004f0:	17db      	asrs	r3, r3, #31
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b42      	ldr	r3, [pc, #264]	; (8000600 <main+0x4b4>)
 80004f8:	70da      	strb	r2, [r3, #3]
		//(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

		//запрос в расширитель портов pcf8575


		HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_ADDRESS << 1), &regAddress, 1);
 80004fa:	2301      	movs	r3, #1
 80004fc:	4a43      	ldr	r2, [pc, #268]	; (800060c <main+0x4c0>)
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	4843      	ldr	r0, [pc, #268]	; (8000610 <main+0x4c4>)
 8000502:	f002 f8c3 	bl	800268c <HAL_I2C_Master_Transmit_IT>




		//отправка данных в uart
		if (HAL_GetTick() - tx_time > 100) { //каждые 100 мс
 8000506:	f000 fdc9 	bl	800109c <HAL_GetTick>
 800050a:	4602      	mov	r2, r0
 800050c:	4b41      	ldr	r3, [pc, #260]	; (8000614 <main+0x4c8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	2b64      	cmp	r3, #100	; 0x64
 8000514:	f67f ae58 	bls.w	80001c8 <main+0x7c>
			sprintf(message,
					"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n\r",
					transmit_data[0], transmit_data[1], transmit_data[2],
 8000518:	4b39      	ldr	r3, [pc, #228]	; (8000600 <main+0x4b4>)
 800051a:	781b      	ldrb	r3, [r3, #0]
			sprintf(message,
 800051c:	469c      	mov	ip, r3
					transmit_data[0], transmit_data[1], transmit_data[2],
 800051e:	4b38      	ldr	r3, [pc, #224]	; (8000600 <main+0x4b4>)
 8000520:	785b      	ldrb	r3, [r3, #1]
			sprintf(message,
 8000522:	469e      	mov	lr, r3
					transmit_data[0], transmit_data[1], transmit_data[2],
 8000524:	4b36      	ldr	r3, [pc, #216]	; (8000600 <main+0x4b4>)
 8000526:	789b      	ldrb	r3, [r3, #2]
			sprintf(message,
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c
					transmit_data[3], transmit_data[4], transmit_data[5],
 800052a:	4b35      	ldr	r3, [pc, #212]	; (8000600 <main+0x4b4>)
 800052c:	78db      	ldrb	r3, [r3, #3]
			sprintf(message,
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
					transmit_data[3], transmit_data[4], transmit_data[5],
 8000530:	4b33      	ldr	r3, [pc, #204]	; (8000600 <main+0x4b4>)
 8000532:	791b      	ldrb	r3, [r3, #4]
			sprintf(message,
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
					transmit_data[3], transmit_data[4], transmit_data[5],
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <main+0x4b4>)
 8000538:	795b      	ldrb	r3, [r3, #5]
			sprintf(message,
 800053a:	623b      	str	r3, [r7, #32]
					transmit_data[6], transmit_data[7], transmit_data[8],
 800053c:	4b30      	ldr	r3, [pc, #192]	; (8000600 <main+0x4b4>)
 800053e:	799b      	ldrb	r3, [r3, #6]
			sprintf(message,
 8000540:	61fb      	str	r3, [r7, #28]
					transmit_data[6], transmit_data[7], transmit_data[8],
 8000542:	4b2f      	ldr	r3, [pc, #188]	; (8000600 <main+0x4b4>)
 8000544:	79db      	ldrb	r3, [r3, #7]
			sprintf(message,
 8000546:	61bb      	str	r3, [r7, #24]
					transmit_data[6], transmit_data[7], transmit_data[8],
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <main+0x4b4>)
 800054a:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(message,
 800054c:	617b      	str	r3, [r7, #20]
					transmit_data[9], transmit_data[10], transmit_data[11],
 800054e:	4b2c      	ldr	r3, [pc, #176]	; (8000600 <main+0x4b4>)
 8000550:	7a5b      	ldrb	r3, [r3, #9]
			sprintf(message,
 8000552:	613b      	str	r3, [r7, #16]
					transmit_data[9], transmit_data[10], transmit_data[11],
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <main+0x4b4>)
 8000556:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(message,
 8000558:	60fb      	str	r3, [r7, #12]
					transmit_data[9], transmit_data[10], transmit_data[11],
 800055a:	4b29      	ldr	r3, [pc, #164]	; (8000600 <main+0x4b4>)
 800055c:	7adb      	ldrb	r3, [r3, #11]
			sprintf(message,
 800055e:	60bb      	str	r3, [r7, #8]
					transmit_data[12], transmit_data[13], transmit_data[14],
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <main+0x4b4>)
 8000562:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(message,
 8000564:	607b      	str	r3, [r7, #4]
					transmit_data[12], transmit_data[13], transmit_data[14],
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <main+0x4b4>)
 8000568:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(message,
 800056a:	603b      	str	r3, [r7, #0]
					transmit_data[12], transmit_data[13], transmit_data[14],
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <main+0x4b4>)
 800056e:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(message,
 8000570:	461e      	mov	r6, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <main+0x4b4>)
 8000574:	7bdb      	ldrb	r3, [r3, #15]
			sprintf(message,
 8000576:	461d      	mov	r5, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <main+0x4b4>)
 800057a:	7c1b      	ldrb	r3, [r3, #16]
			sprintf(message,
 800057c:	461c      	mov	r4, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0x4b4>)
 8000580:	7c5b      	ldrb	r3, [r3, #17]
			sprintf(message,
 8000582:	4619      	mov	r1, r3
					transmit_data[18], transmit_data[19]);
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <main+0x4b4>)
 8000586:	7c9b      	ldrb	r3, [r3, #18]
			sprintf(message,
 8000588:	461a      	mov	r2, r3
					transmit_data[18], transmit_data[19]);
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0x4b4>)
 800058c:	7cdb      	ldrb	r3, [r3, #19]
			sprintf(message,
 800058e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000592:	9311      	str	r3, [sp, #68]	; 0x44
 8000594:	9210      	str	r2, [sp, #64]	; 0x40
 8000596:	910f      	str	r1, [sp, #60]	; 0x3c
 8000598:	940e      	str	r4, [sp, #56]	; 0x38
 800059a:	950d      	str	r5, [sp, #52]	; 0x34
 800059c:	960c      	str	r6, [sp, #48]	; 0x30
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	920a      	str	r2, [sp, #40]	; 0x28
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	9209      	str	r2, [sp, #36]	; 0x24
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	9208      	str	r2, [sp, #32]
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	9207      	str	r2, [sp, #28]
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	9206      	str	r2, [sp, #24]
 80005b6:	69ba      	ldr	r2, [r7, #24]
 80005b8:	9205      	str	r2, [sp, #20]
 80005ba:	69fa      	ldr	r2, [r7, #28]
 80005bc:	9204      	str	r2, [sp, #16]
 80005be:	6a3a      	ldr	r2, [r7, #32]
 80005c0:	9203      	str	r2, [sp, #12]
 80005c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c4:	9202      	str	r2, [sp, #8]
 80005c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005c8:	9201      	str	r2, [sp, #4]
 80005ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4673      	mov	r3, lr
 80005d0:	4662      	mov	r2, ip
 80005d2:	4911      	ldr	r1, [pc, #68]	; (8000618 <main+0x4cc>)
 80005d4:	f004 ffae 	bl	8005534 <siprintf>
			HAL_UART_Transmit(&huart1, message, sizeof(message), 200);
 80005d8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80005dc:	23c8      	movs	r3, #200	; 0xc8
 80005de:	2264      	movs	r2, #100	; 0x64
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <main+0x4d0>)
 80005e2:	f004 fe27 	bl	8005234 <HAL_UART_Transmit>
			tx_time = HAL_GetTick();
 80005e6:	f000 fd59 	bl	800109c <HAL_GetTick>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <main+0x4c8>)
 80005ee:	6013      	str	r3, [r2, #0]
		encoder_1_cur_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80005f0:	e5ea      	b.n	80001c8 <main+0x7c>
 80005f2:	bf00      	nop
 80005f4:	20000231 	.word	0x20000231
 80005f8:	2000022c 	.word	0x2000022c
 80005fc:	20000230 	.word	0x20000230
 8000600:	20000248 	.word	0x20000248
 8000604:	20000238 	.word	0x20000238
 8000608:	80080081 	.word	0x80080081
 800060c:	20000006 	.word	0x20000006
 8000610:	200000f4 	.word	0x200000f4
 8000614:	2000025c 	.word	0x2000025c
 8000618:	08005eb0 	.word	0x08005eb0
 800061c:	200001d8 	.word	0x200001d8

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062a:	2228      	movs	r2, #40	; 0x28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 ffa0 	bl	8005574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800066c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fdfc 	bl	8004274 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000682:	f000 fa53 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000696:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 f868 	bl	8004778 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ae:	f000 fa3d 	bl	8000b2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006b2:	2302      	movs	r3, #2
 80006b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80006b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 f9e8 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ca:	f000 fa2f 	bl	8000b2c <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e8:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <MX_ADC1_Init+0x120>)
 80006ea:	4a44      	ldr	r2, [pc, #272]	; (80007fc <MX_ADC1_Init+0x124>)
 80006ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <MX_ADC1_Init+0x120>)
 80006f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <MX_ADC1_Init+0x120>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <MX_ADC1_Init+0x120>)
 80006fe:	2200      	movs	r2, #0
 8000700:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <MX_ADC1_Init+0x120>)
 8000704:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000708:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <MX_ADC1_Init+0x120>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8000710:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <MX_ADC1_Init+0x120>)
 8000712:	2207      	movs	r2, #7
 8000714:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	4838      	ldr	r0, [pc, #224]	; (80007f8 <MX_ADC1_Init+0x120>)
 8000718:	f000 fcca 	bl	80010b0 <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000722:	f000 fa03 	bl	8000b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000726:	2311      	movs	r3, #17
 8000728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072a:	2301      	movs	r3, #1
 800072c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800072e:	2307      	movs	r3, #7
 8000730:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4830      	ldr	r0, [pc, #192]	; (80007f8 <MX_ADC1_Init+0x120>)
 8000738:	f000 fe8c 	bl	8001454 <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 f9f3 	bl	8000b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800074a:	2302      	movs	r3, #2
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4829      	ldr	r0, [pc, #164]	; (80007f8 <MX_ADC1_Init+0x120>)
 8000754:	f000 fe7e 	bl	8001454 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800075e:	f000 f9e5 	bl	8000b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000766:	2303      	movs	r3, #3
 8000768:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4822      	ldr	r0, [pc, #136]	; (80007f8 <MX_ADC1_Init+0x120>)
 8000770:	f000 fe70 	bl	8001454 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800077a:	f000 f9d7 	bl	8000b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800077e:	2302      	movs	r3, #2
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000782:	2304      	movs	r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	481b      	ldr	r0, [pc, #108]	; (80007f8 <MX_ADC1_Init+0x120>)
 800078c:	f000 fe62 	bl	8001454 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000796:	f000 f9c9 	bl	8000b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800079a:	2303      	movs	r3, #3
 800079c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800079e:	2305      	movs	r3, #5
 80007a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4814      	ldr	r0, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x120>)
 80007a8:	f000 fe54 	bl	8001454 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007b2:	f000 f9bb 	bl	8000b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007ba:	2306      	movs	r3, #6
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_ADC1_Init+0x120>)
 80007c4:	f000 fe46 	bl	8001454 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80007ce:	f000 f9ad 	bl	8000b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007d2:	2305      	movs	r3, #5
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007d6:	2307      	movs	r3, #7
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_ADC1_Init+0x120>)
 80007e0:	f000 fe38 	bl	8001454 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80007ea:	f000 f99f 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000080 	.word	0x20000080
 80007fc:	40012400 	.word	0x40012400

08000800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_I2C1_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2C1_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_I2C1_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_I2C1_Init+0x50>)
 800083e:	f001 fdcd 	bl	80023dc <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 f970 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000f4 	.word	0x200000f4
 8000854:	40005400 	.word	0x40005400
 8000858:	000186a0 	.word	0x000186a0

0800085c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2224      	movs	r2, #36	; 0x24
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f004 fe82 	bl	8005574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_TIM3_Init+0xa0>)
 800087a:	4a21      	ldr	r2, [pc, #132]	; (8000900 <MX_TIM3_Init+0xa4>)
 800087c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_TIM3_Init+0xa0>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_TIM3_Init+0xa0>)
 8000886:	2220      	movs	r2, #32
 8000888:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM3_Init+0xa0>)
 800088c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000890:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_TIM3_Init+0xa0>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_TIM3_Init+0xa0>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800089e:	2303      	movs	r3, #3
 80008a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008a6:	2301      	movs	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80008ae:	230a      	movs	r3, #10
 80008b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b6:	2301      	movs	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80008be:	230a      	movs	r3, #10
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_TIM3_Init+0xa0>)
 80008ca:	f004 fa4f 	bl	8004d6c <HAL_TIM_Encoder_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f92a 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_TIM3_Init+0xa0>)
 80008e6:	f004 fbf7 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008f0:	f000 f91c 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3730      	adds	r7, #48	; 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000148 	.word	0x20000148
 8000900:	40000400 	.word	0x40000400

08000904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2224      	movs	r2, #36	; 0x24
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fe2e 	bl	8005574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <MX_TIM4_Init+0xa4>)
 8000924:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_TIM4_Init+0xa0>)
 800092e:	2220      	movs	r2, #32
 8000930:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000938:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_TIM4_Init+0xa0>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000946:	2303      	movs	r3, #3
 8000948:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000956:	230a      	movs	r3, #10
 8000958:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800095e:	2301      	movs	r3, #1
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000966:	230a      	movs	r3, #10
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000972:	f004 f9fb 	bl	8004d6c <HAL_TIM_Encoder_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f8d6 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_TIM4_Init+0xa0>)
 800098e:	f004 fba3 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000998:	f000 f8c8 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	; 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000190 	.word	0x20000190
 80009a8:	40000800 	.word	0x40000800

080009ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART1_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009e4:	f004 fbd6 	bl	8005194 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f000 f89d 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001d8 	.word	0x200001d8
 80009fc:	40013800 	.word	0x40013800

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	200b      	movs	r0, #11
 8000a24:	f001 f895 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a28:	200b      	movs	r0, #11
 8000a2a:	f001 f8ae 	bl	8001b8a <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a6e:	f043 0320 	orr.w	r3, r3, #32
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0320 	and.w	r3, r3, #32
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_GPIO_Init+0x98>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : ENCODER_1_KEY_Pin ENCODER_2_KEY_Pin */
  GPIO_InitStruct.Pin = ENCODER_1_KEY_Pin|ENCODER_2_KEY_Pin;
 8000ab0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_GPIO_Init+0x9c>)
 8000ac6:	f001 faed 	bl	80020a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

	HAL_I2C_Master_Receive_IT(&hi2c1, (I2C_ADDRESS << 1), regData, 2);
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <HAL_I2C_MasterTxCpltCallback+0x20>)
 8000aec:	f001 fe6e 	bl	80027cc <HAL_I2C_Master_Receive_IT>

}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000260 	.word	0x20000260
 8000afc:	200000f4 	.word	0x200000f4

08000b00 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  // I2C data ready!

	transmit_data[18]= regData[0];
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000b0e:	749a      	strb	r2, [r3, #18]
	transmit_data[19]= regData[1];
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000b12:	785a      	ldrb	r2, [r3, #1]
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000b16:	74da      	strb	r2, [r3, #19]

}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000260 	.word	0x20000260
 8000b28:	20000248 	.word	0x20000248

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6193      	str	r3, [r2, #24]
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	61d3      	str	r3, [r2, #28]
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_MspInit+0x60>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_MspInit+0x60>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010000 	.word	0x40010000

08000b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <HAL_ADC_MspInit+0xbc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d149      	bne.n	8000c50 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <HAL_ADC_MspInit+0xc0>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <HAL_ADC_MspInit+0xc0>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <HAL_ADC_MspInit+0xc0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_ADC_MspInit+0xc0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <HAL_ADC_MspInit+0xc0>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_ADC_MspInit+0xc0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bec:	233f      	movs	r3, #63	; 0x3f
 8000bee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <HAL_ADC_MspInit+0xc4>)
 8000bfc:	f001 fa52 	bl	80020a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_ADC_MspInit+0xcc>)
 8000c04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c36:	f000 ffc3 	bl	8001bc0 <HAL_DMA_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000c40:	f7ff ff74 	bl	8000b2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c48:	621a      	str	r2, [r3, #32]
 8000c4a:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_ADC_MspInit+0xc8>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40012400 	.word	0x40012400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010800 	.word	0x40010800
 8000c64:	200000b0 	.word	0x200000b0
 8000c68:	40020008 	.word	0x40020008

08000c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <HAL_I2C_MspInit+0xb0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d142      	bne.n	8000d12 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_I2C_MspInit+0xb4>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <HAL_I2C_MspInit+0xb4>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <HAL_I2C_MspInit+0xb4>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000caa:	2312      	movs	r3, #18
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481a      	ldr	r0, [pc, #104]	; (8000d24 <HAL_I2C_MspInit+0xb8>)
 8000cba:	f001 f9f3 	bl	80020a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_I2C_MspInit+0xbc>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <HAL_I2C_MspInit+0xbc>)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_I2C_MspInit+0xb4>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_I2C_MspInit+0xb4>)
 8000ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce4:	61d3      	str	r3, [r2, #28]
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_I2C_MspInit+0xb4>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201f      	movs	r0, #31
 8000cf8:	f000 ff2b 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cfc:	201f      	movs	r0, #31
 8000cfe:	f000 ff44 	bl	8001b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2020      	movs	r0, #32
 8000d08:	f000 ff23 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d0c:	2020      	movs	r0, #32
 8000d0e:	f000 ff3c 	bl	8001b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010c00 	.word	0x40010c00
 8000d28:	40010000 	.word	0x40010000

08000d2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a2a      	ldr	r2, [pc, #168]	; (8000df0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d124      	bne.n	8000d96 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4a28      	ldr	r2, [pc, #160]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	61d3      	str	r3, [r2, #28]
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7c:	23c0      	movs	r3, #192	; 0xc0
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481a      	ldr	r0, [pc, #104]	; (8000df8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000d90:	f001 f988 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d94:	e028      	b.n	8000de8 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xd0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d123      	bne.n	8000de8 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	61d3      	str	r3, [r2, #28]
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd0:	23c0      	movs	r3, #192	; 0xc0
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000de4:	f001 f95e 	bl	80020a4 <HAL_GPIO_Init>
}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40000400 	.word	0x40000400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40000800 	.word	0x40000800
 8000e00:	40010c00 	.word	0x40010c00

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_UART_MspInit+0x8c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d131      	bne.n	8000e88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4619      	mov	r1, r3
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <HAL_UART_MspInit+0x94>)
 8000e6a:	f001 f91b 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_UART_MspInit+0x94>)
 8000e84:	f001 f90e 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010800 	.word	0x40010800

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f000 f8c9 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA1_Channel1_IRQHandler+0x10>)
 8000ef2:	f000 ff97 	bl	8001e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000b0 	.word	0x200000b0

08000f00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <I2C1_EV_IRQHandler+0x10>)
 8000f06:	f001 fd09 	bl	800291c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000f4 	.word	0x200000f4

08000f14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <I2C1_ER_IRQHandler+0x10>)
 8000f1a:	f001 fe52 	bl	8002bc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000f4 	.word	0x200000f4

08000f28 <_sbrk>:
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
 8000f58:	f004 fb14 	bl	8005584 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20005000 	.word	0x20005000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000264 	.word	0x20000264
 8000f90:	200003b8 	.word	0x200003b8

08000f94 <SystemInit>:
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <Reset_Handler>:
 8000fa0:	f7ff fff8 	bl	8000f94 <SystemInit>
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <LoopFillZerobss+0xe>)
 8000fa6:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x12>)
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <LoopFillZerobss+0x16>)
 8000faa:	2300      	movs	r3, #0
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:
 8000fae:	58d4      	ldr	r4, [r2, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:
 8000fb4:	18c4      	adds	r4, r0, r3
 8000fb6:	428c      	cmp	r4, r1
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <LoopFillZerobss+0x1a>)
 8000fbc:	4c09      	ldr	r4, [pc, #36]	; (8000fe4 <LoopFillZerobss+0x1e>)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:
 8000fc6:	42a2      	cmp	r2, r4
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>
 8000fca:	f004 fae1 	bl	8005590 <__libc_init_array>
 8000fce:	f7ff f8bd 	bl	800014c <main>
 8000fd2:	4770      	bx	lr
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000064 	.word	0x20000064
 8000fdc:	08005f6c 	.word	0x08005f6c
 8000fe0:	20000064 	.word	0x20000064
 8000fe4:	200003b4 	.word	0x200003b4

08000fe8 <ADC1_2_IRQHandler>:
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_Init+0x28>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_Init+0x28>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 fd9d 	bl	8001b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	200f      	movs	r0, #15
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fd96 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40022000 	.word	0x40022000

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fdb5 	bl	8001ba6 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 fd7d 	bl	8001b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000008 	.word	0x20000008
 8001070:	20000010 	.word	0x20000010
 8001074:	2000000c 	.word	0x2000000c

08001078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x1c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x20>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_IncTick+0x20>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	20000010 	.word	0x20000010
 8001098:	20000268 	.word	0x20000268

0800109c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <HAL_GetTick+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	20000268 	.word	0x20000268

080010b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0be      	b.n	8001250 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d109      	bne.n	80010f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fd54 	bl	8000b9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 faff 	bl	80016f8 <ADC_ConversionStop_Disable>
 80010fa:	4603      	mov	r3, r0
 80010fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 8099 	bne.w	800123e <HAL_ADC_Init+0x18e>
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 8095 	bne.w	800123e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800111c:	f023 0302 	bic.w	r3, r3, #2
 8001120:	f043 0202 	orr.w	r2, r3, #2
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001130:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7b1b      	ldrb	r3, [r3, #12]
 8001136:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001138:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	4313      	orrs	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001148:	d003      	beq.n	8001152 <HAL_ADC_Init+0xa2>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d102      	bne.n	8001158 <HAL_ADC_Init+0xa8>
 8001152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001156:	e000      	b.n	800115a <HAL_ADC_Init+0xaa>
 8001158:	2300      	movs	r3, #0
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7d1b      	ldrb	r3, [r3, #20]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d119      	bne.n	800119c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7b1b      	ldrb	r3, [r3, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d109      	bne.n	8001184 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	3b01      	subs	r3, #1
 8001176:	035a      	lsls	r2, r3, #13
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	e00b      	b.n	800119c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	f043 0220 	orr.w	r2, r3, #32
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_ADC_Init+0x1a8>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011cc:	d003      	beq.n	80011d6 <HAL_ADC_Init+0x126>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d104      	bne.n	80011e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	3b01      	subs	r3, #1
 80011dc:	051b      	lsls	r3, r3, #20
 80011de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_ADC_Init+0x1ac>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	429a      	cmp	r2, r3
 8001202:	d10b      	bne.n	800121c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	f023 0303 	bic.w	r3, r3, #3
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800121a:	e018      	b.n	800124e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f023 0312 	bic.w	r3, r3, #18
 8001224:	f043 0210 	orr.w	r2, r3, #16
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	f043 0201 	orr.w	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800123c:	e007      	b.n	800124e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	f043 0210 	orr.w	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800124e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	ffe1f7fd 	.word	0xffe1f7fd
 800125c:	ff1f0efe 	.word	0xff1f0efe

08001260 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a64      	ldr	r2, [pc, #400]	; (8001408 <HAL_ADC_Start_DMA+0x1a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d004      	beq.n	8001284 <HAL_ADC_Start_DMA+0x24>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a63      	ldr	r2, [pc, #396]	; (800140c <HAL_ADC_Start_DMA+0x1ac>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d106      	bne.n	8001292 <HAL_ADC_Start_DMA+0x32>
 8001284:	4b60      	ldr	r3, [pc, #384]	; (8001408 <HAL_ADC_Start_DMA+0x1a8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f040 80b3 	bne.w	80013f8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_ADC_Start_DMA+0x40>
 800129c:	2302      	movs	r3, #2
 800129e:	e0ae      	b.n	80013fe <HAL_ADC_Start_DMA+0x19e>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f9cb 	bl	8001644 <ADC_Enable>
 80012ae:	4603      	mov	r3, r0
 80012b0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f040 809a 	bne.w	80013ee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_ADC_Start_DMA+0x1ac>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d105      	bne.n	80012e4 <HAL_ADC_Start_DMA+0x84>
 80012d8:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <HAL_ADC_Start_DMA+0x1a8>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d115      	bne.n	8001310 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d026      	beq.n	800134c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001306:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800130e:	e01d      	b.n	800134c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a39      	ldr	r2, [pc, #228]	; (8001408 <HAL_ADC_Start_DMA+0x1a8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d004      	beq.n	8001330 <HAL_ADC_Start_DMA+0xd0>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a38      	ldr	r2, [pc, #224]	; (800140c <HAL_ADC_Start_DMA+0x1ac>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10d      	bne.n	800134c <HAL_ADC_Start_DMA+0xec>
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_ADC_Start_DMA+0x1a8>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	2b00      	cmp	r3, #0
 800133a:	d007      	beq.n	800134c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001344:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f023 0206 	bic.w	r2, r3, #6
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
 8001364:	e002      	b.n	800136c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <HAL_ADC_Start_DMA+0x1b0>)
 800137a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4a24      	ldr	r2, [pc, #144]	; (8001414 <HAL_ADC_Start_DMA+0x1b4>)
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a23      	ldr	r2, [pc, #140]	; (8001418 <HAL_ADC_Start_DMA+0x1b8>)
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f06f 0202 	mvn.w	r2, #2
 8001394:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013a4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a18      	ldr	r0, [r3, #32]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	334c      	adds	r3, #76	; 0x4c
 80013b0:	4619      	mov	r1, r3
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f000 fc5d 	bl	8001c74 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013c8:	d108      	bne.n	80013dc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013d8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013da:	e00f      	b.n	80013fc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013ea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013ec:	e006      	b.n	80013fc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80013f6:	e001      	b.n	80013fc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40012400 	.word	0x40012400
 800140c:	40012800 	.word	0x40012800
 8001410:	0800177b 	.word	0x0800177b
 8001414:	080017f7 	.word	0x080017f7
 8001418:	08001813 	.word	0x08001813

0800141c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
	...

08001454 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x20>
 8001470:	2302      	movs	r3, #2
 8001472:	e0dc      	b.n	800162e <HAL_ADC_ConfigChannel+0x1da>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d81c      	bhi.n	80014be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b05      	subs	r3, #5
 8001496:	221f      	movs	r2, #31
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	4019      	ands	r1, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	3b05      	subs	r3, #5
 80014b0:	fa00 f203 	lsl.w	r2, r0, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34
 80014bc:	e03c      	b.n	8001538 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d81c      	bhi.n	8001500 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b23      	subs	r3, #35	; 0x23
 80014d8:	221f      	movs	r2, #31
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	4019      	ands	r1, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b23      	subs	r3, #35	; 0x23
 80014f2:	fa00 f203 	lsl.w	r2, r0, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
 80014fe:	e01b      	b.n	8001538 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b41      	subs	r3, #65	; 0x41
 8001512:	221f      	movs	r2, #31
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	4019      	ands	r1, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b41      	subs	r3, #65	; 0x41
 800152c:	fa00 f203 	lsl.w	r2, r0, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d91c      	bls.n	800157a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68d9      	ldr	r1, [r3, #12]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	3b1e      	subs	r3, #30
 8001552:	2207      	movs	r2, #7
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	4019      	ands	r1, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	3b1e      	subs	r3, #30
 800156c:	fa00 f203 	lsl.w	r2, r0, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	e019      	b.n	80015ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6919      	ldr	r1, [r3, #16]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	2207      	movs	r2, #7
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	4019      	ands	r1, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6898      	ldr	r0, [r3, #8]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	fa00 f203 	lsl.w	r2, r0, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b10      	cmp	r3, #16
 80015b4:	d003      	beq.n	80015be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ba:	2b11      	cmp	r3, #17
 80015bc:	d132      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <HAL_ADC_ConfigChannel+0x1e4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d125      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d126      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d11a      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_ADC_ConfigChannel+0x1e8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <HAL_ADC_ConfigChannel+0x1ec>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0c9a      	lsrs	r2, r3, #18
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001604:	e002      	b.n	800160c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3b01      	subs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x1b2>
 8001612:	e007      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f043 0220 	orr.w	r2, r3, #32
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40012400 	.word	0x40012400
 800163c:	20000008 	.word	0x20000008
 8001640:	431bde83 	.word	0x431bde83

08001644 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b01      	cmp	r3, #1
 8001660:	d040      	beq.n	80016e4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <ADC_Enable+0xac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <ADC_Enable+0xb0>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001680:	e002      	b.n	8001688 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3b01      	subs	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800168e:	f7ff fd05 	bl	800109c <HAL_GetTick>
 8001692:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001694:	e01f      	b.n	80016d6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001696:	f7ff fd01 	bl	800109c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d918      	bls.n	80016d6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d011      	beq.n	80016d6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	f043 0210 	orr.w	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e007      	b.n	80016e6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d1d8      	bne.n	8001696 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	431bde83 	.word	0x431bde83

080016f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d12e      	bne.n	8001770 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0201 	bic.w	r2, r2, #1
 8001720:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001722:	f7ff fcbb 	bl	800109c <HAL_GetTick>
 8001726:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001728:	e01b      	b.n	8001762 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800172a:	f7ff fcb7 	bl	800109c <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d914      	bls.n	8001762 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10d      	bne.n	8001762 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	f043 0210 	orr.w	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f043 0201 	orr.w	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e007      	b.n	8001772 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d0dc      	beq.n	800172a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001790:	2b00      	cmp	r3, #0
 8001792:	d127      	bne.n	80017e4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017ae:	d115      	bne.n	80017dc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d111      	bne.n	80017dc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fe1d 	bl	800141c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017e2:	e004      	b.n	80017ee <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff fe12 	bl	800142e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	f043 0204 	orr.w	r2, r3, #4
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff fe01 	bl	8001440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_ADCEx_Calibration_Start+0x1e>
 8001862:	2302      	movs	r3, #2
 8001864:	e097      	b.n	8001996 <HAL_ADCEx_Calibration_Start+0x14e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff42 	bl	80016f8 <ADC_ConversionStop_Disable>
 8001874:	4603      	mov	r3, r0
 8001876:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fee3 	bl	8001644 <ADC_Enable>
 800187e:	4603      	mov	r3, r0
 8001880:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 8081 	bne.w	800198c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001892:	f023 0302 	bic.w	r3, r3, #2
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800189e:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <HAL_ADCEx_Calibration_Start+0x158>)
 80018a0:	681c      	ldr	r4, [r3, #0]
 80018a2:	2002      	movs	r0, #2
 80018a4:	f003 f9ac 	bl	8004c00 <HAL_RCCEx_GetPeriphCLKFreq>
 80018a8:	4603      	mov	r3, r0
 80018aa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80018ae:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80018b0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80018b2:	e002      	b.n	80018ba <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f9      	bne.n	80018b4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0208 	orr.w	r2, r2, #8
 80018ce:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80018d0:	f7ff fbe4 	bl	800109c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80018d6:	e01b      	b.n	8001910 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018d8:	f7ff fbe0 	bl	800109c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b0a      	cmp	r3, #10
 80018e4:	d914      	bls.n	8001910 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00d      	beq.n	8001910 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f023 0312 	bic.w	r3, r3, #18
 80018fc:	f043 0210 	orr.w	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e042      	b.n	8001996 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1dc      	bne.n	80018d8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0204 	orr.w	r2, r2, #4
 800192c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800192e:	f7ff fbb5 	bl	800109c <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001934:	e01b      	b.n	800196e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001936:	f7ff fbb1 	bl	800109c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b0a      	cmp	r3, #10
 8001942:	d914      	bls.n	800196e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00d      	beq.n	800196e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	f023 0312 	bic.w	r3, r3, #18
 800195a:	f043 0210 	orr.w	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e013      	b.n	8001996 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1dc      	bne.n	8001936 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f023 0303 	bic.w	r3, r3, #3
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001994:	7dfb      	ldrb	r3, [r7, #23]
}
 8001996:	4618      	mov	r0, r3
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4906      	ldr	r1, [pc, #24]	; (8001a3c <__NVIC_EnableIRQ+0x34>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	; (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b08:	d301      	bcc.n	8001b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00f      	b.n	8001b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <SysTick_Config+0x40>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b16:	210f      	movs	r1, #15
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f7ff ff90 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <SysTick_Config+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <SysTick_Config+0x40>)
 8001b28:	2207      	movs	r2, #7
 8001b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010

08001b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff2d 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b64:	f7ff ff42 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ff90 	bl	8001a94 <NVIC_EncodePriority>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff5f 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff35 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffa2 	bl	8001af8 <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e043      	b.n	8001c5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_DMA_Init+0xa8>)
 8001bde:	4413      	add	r3, r2
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_DMA_Init+0xac>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	009a      	lsls	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_DMA_Init+0xb0>)
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	bffdfff8 	.word	0xbffdfff8
 8001c6c:	cccccccd 	.word	0xcccccccd
 8001c70:	40020000 	.word	0x40020000

08001c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_DMA_Start_IT+0x20>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e04b      	b.n	8001d2c <HAL_DMA_Start_IT+0xb8>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d13a      	bne.n	8001d1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f9bc 	bl	800204a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 020e 	orr.w	r2, r2, #14
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e00f      	b.n	8001d0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0204 	bic.w	r2, r2, #4
 8001cfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 020a 	orr.w	r2, r2, #10
 8001d0a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e005      	b.n	8001d2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
 8001d28:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d005      	beq.n	8001d58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e051      	b.n	8001dfc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 020e 	bic.w	r2, r2, #14
 8001d66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_DMA_Abort_IT+0xd4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d029      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0xa2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_DMA_Abort_IT+0xd8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d022      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x9e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_DMA_Abort_IT+0xdc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01a      	beq.n	8001dcc <HAL_DMA_Abort_IT+0x98>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <HAL_DMA_Abort_IT+0xe0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d012      	beq.n	8001dc6 <HAL_DMA_Abort_IT+0x92>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_DMA_Abort_IT+0xe4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00a      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x8c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_DMA_Abort_IT+0xe8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d102      	bne.n	8001dba <HAL_DMA_Abort_IT+0x86>
 8001db4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001db8:	e00e      	b.n	8001dd8 <HAL_DMA_Abort_IT+0xa4>
 8001dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dbe:	e00b      	b.n	8001dd8 <HAL_DMA_Abort_IT+0xa4>
 8001dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc4:	e008      	b.n	8001dd8 <HAL_DMA_Abort_IT+0xa4>
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	e005      	b.n	8001dd8 <HAL_DMA_Abort_IT+0xa4>
 8001dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd0:	e002      	b.n	8001dd8 <HAL_DMA_Abort_IT+0xa4>
 8001dd2:	2310      	movs	r3, #16
 8001dd4:	e000      	b.n	8001dd8 <HAL_DMA_Abort_IT+0xa4>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_DMA_Abort_IT+0xec>)
 8001dda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
    } 
  }
  return status;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40020008 	.word	0x40020008
 8001e0c:	4002001c 	.word	0x4002001c
 8001e10:	40020030 	.word	0x40020030
 8001e14:	40020044 	.word	0x40020044
 8001e18:	40020058 	.word	0x40020058
 8001e1c:	4002006c 	.word	0x4002006c
 8001e20:	40020000 	.word	0x40020000

08001e24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2204      	movs	r2, #4
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d04f      	beq.n	8001eec <HAL_DMA_IRQHandler+0xc8>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04a      	beq.n	8001eec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0204 	bic.w	r2, r2, #4
 8001e72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a66      	ldr	r2, [pc, #408]	; (8002014 <HAL_DMA_IRQHandler+0x1f0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d029      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0xae>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_DMA_IRQHandler+0x1f4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d022      	beq.n	8001ece <HAL_DMA_IRQHandler+0xaa>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a63      	ldr	r2, [pc, #396]	; (800201c <HAL_DMA_IRQHandler+0x1f8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01a      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xa4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a62      	ldr	r2, [pc, #392]	; (8002020 <HAL_DMA_IRQHandler+0x1fc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d012      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x9e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a60      	ldr	r2, [pc, #384]	; (8002024 <HAL_DMA_IRQHandler+0x200>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x98>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <HAL_DMA_IRQHandler+0x204>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d102      	bne.n	8001eb6 <HAL_DMA_IRQHandler+0x92>
 8001eb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eb4:	e00e      	b.n	8001ed4 <HAL_DMA_IRQHandler+0xb0>
 8001eb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001eba:	e00b      	b.n	8001ed4 <HAL_DMA_IRQHandler+0xb0>
 8001ebc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ec0:	e008      	b.n	8001ed4 <HAL_DMA_IRQHandler+0xb0>
 8001ec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ec6:	e005      	b.n	8001ed4 <HAL_DMA_IRQHandler+0xb0>
 8001ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ecc:	e002      	b.n	8001ed4 <HAL_DMA_IRQHandler+0xb0>
 8001ece:	2340      	movs	r3, #64	; 0x40
 8001ed0:	e000      	b.n	8001ed4 <HAL_DMA_IRQHandler+0xb0>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <HAL_DMA_IRQHandler+0x208>)
 8001ed6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8094 	beq.w	800200a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001eea:	e08e      	b.n	800200a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d056      	beq.n	8001faa <HAL_DMA_IRQHandler+0x186>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d051      	beq.n	8001faa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 020a 	bic.w	r2, r2, #10
 8001f22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a38      	ldr	r2, [pc, #224]	; (8002014 <HAL_DMA_IRQHandler+0x1f0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d029      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x166>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a37      	ldr	r2, [pc, #220]	; (8002018 <HAL_DMA_IRQHandler+0x1f4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d022      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x162>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a35      	ldr	r2, [pc, #212]	; (800201c <HAL_DMA_IRQHandler+0x1f8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01a      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x15c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a34      	ldr	r2, [pc, #208]	; (8002020 <HAL_DMA_IRQHandler+0x1fc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x156>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a32      	ldr	r2, [pc, #200]	; (8002024 <HAL_DMA_IRQHandler+0x200>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00a      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x150>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a31      	ldr	r2, [pc, #196]	; (8002028 <HAL_DMA_IRQHandler+0x204>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d102      	bne.n	8001f6e <HAL_DMA_IRQHandler+0x14a>
 8001f68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f6c:	e00e      	b.n	8001f8c <HAL_DMA_IRQHandler+0x168>
 8001f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f72:	e00b      	b.n	8001f8c <HAL_DMA_IRQHandler+0x168>
 8001f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f78:	e008      	b.n	8001f8c <HAL_DMA_IRQHandler+0x168>
 8001f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f7e:	e005      	b.n	8001f8c <HAL_DMA_IRQHandler+0x168>
 8001f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f84:	e002      	b.n	8001f8c <HAL_DMA_IRQHandler+0x168>
 8001f86:	2320      	movs	r3, #32
 8001f88:	e000      	b.n	8001f8c <HAL_DMA_IRQHandler+0x168>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <HAL_DMA_IRQHandler+0x208>)
 8001f8e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d034      	beq.n	800200a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001fa8:	e02f      	b.n	800200a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2208      	movs	r2, #8
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d028      	beq.n	800200c <HAL_DMA_IRQHandler+0x1e8>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d023      	beq.n	800200c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 020e 	bic.w	r2, r2, #14
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d004      	beq.n	800200c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
    }
  }
  return;
 800200a:	bf00      	nop
 800200c:	bf00      	nop
}
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40020008 	.word	0x40020008
 8002018:	4002001c 	.word	0x4002001c
 800201c:	40020030 	.word	0x40020030
 8002020:	40020044 	.word	0x40020044
 8002024:	40020058 	.word	0x40020058
 8002028:	4002006c 	.word	0x4002006c
 800202c:	40020000 	.word	0x40020000

08002030 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800203e:	b2db      	uxtb	r3, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b10      	cmp	r3, #16
 8002076:	d108      	bne.n	800208a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002088:	e007      	b.n	800209a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	60da      	str	r2, [r3, #12]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	e169      	b.n	800238c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b8:	2201      	movs	r2, #1
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 8158 	bne.w	8002386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a9a      	ldr	r2, [pc, #616]	; (8002344 <HAL_GPIO_Init+0x2a0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05e      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020e0:	4a98      	ldr	r2, [pc, #608]	; (8002344 <HAL_GPIO_Init+0x2a0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d875      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020e6:	4a98      	ldr	r2, [pc, #608]	; (8002348 <HAL_GPIO_Init+0x2a4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d058      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020ec:	4a96      	ldr	r2, [pc, #600]	; (8002348 <HAL_GPIO_Init+0x2a4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d86f      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020f2:	4a96      	ldr	r2, [pc, #600]	; (800234c <HAL_GPIO_Init+0x2a8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d052      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020f8:	4a94      	ldr	r2, [pc, #592]	; (800234c <HAL_GPIO_Init+0x2a8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d869      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020fe:	4a94      	ldr	r2, [pc, #592]	; (8002350 <HAL_GPIO_Init+0x2ac>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d04c      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 8002104:	4a92      	ldr	r2, [pc, #584]	; (8002350 <HAL_GPIO_Init+0x2ac>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d863      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 800210a:	4a92      	ldr	r2, [pc, #584]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d046      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 8002110:	4a90      	ldr	r2, [pc, #576]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d85d      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 8002116:	2b12      	cmp	r3, #18
 8002118:	d82a      	bhi.n	8002170 <HAL_GPIO_Init+0xcc>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d859      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <HAL_GPIO_Init+0x80>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	0800219f 	.word	0x0800219f
 8002128:	08002179 	.word	0x08002179
 800212c:	0800218b 	.word	0x0800218b
 8002130:	080021cd 	.word	0x080021cd
 8002134:	080021d3 	.word	0x080021d3
 8002138:	080021d3 	.word	0x080021d3
 800213c:	080021d3 	.word	0x080021d3
 8002140:	080021d3 	.word	0x080021d3
 8002144:	080021d3 	.word	0x080021d3
 8002148:	080021d3 	.word	0x080021d3
 800214c:	080021d3 	.word	0x080021d3
 8002150:	080021d3 	.word	0x080021d3
 8002154:	080021d3 	.word	0x080021d3
 8002158:	080021d3 	.word	0x080021d3
 800215c:	080021d3 	.word	0x080021d3
 8002160:	080021d3 	.word	0x080021d3
 8002164:	080021d3 	.word	0x080021d3
 8002168:	08002181 	.word	0x08002181
 800216c:	08002195 	.word	0x08002195
 8002170:	4a79      	ldr	r2, [pc, #484]	; (8002358 <HAL_GPIO_Init+0x2b4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002176:	e02c      	b.n	80021d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e029      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	3304      	adds	r3, #4
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e024      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	3308      	adds	r3, #8
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e01f      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	330c      	adds	r3, #12
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e01a      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021a6:	2304      	movs	r3, #4
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e013      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b4:	2308      	movs	r3, #8
 80021b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	611a      	str	r2, [r3, #16]
          break;
 80021be:	e009      	b.n	80021d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c0:	2308      	movs	r3, #8
 80021c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	615a      	str	r2, [r3, #20]
          break;
 80021ca:	e003      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          break;
 80021d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2bff      	cmp	r3, #255	; 0xff
 80021d8:	d801      	bhi.n	80021de <HAL_GPIO_Init+0x13a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_Init+0x13e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2bff      	cmp	r3, #255	; 0xff
 80021e8:	d802      	bhi.n	80021f0 <HAL_GPIO_Init+0x14c>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x152>
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	3b08      	subs	r3, #8
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	210f      	movs	r1, #15
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	431a      	orrs	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80b1 	beq.w	8002386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002224:	4b4d      	ldr	r3, [pc, #308]	; (800235c <HAL_GPIO_Init+0x2b8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x2b8>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_GPIO_Init+0x2b8>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800223c:	4a48      	ldr	r2, [pc, #288]	; (8002360 <HAL_GPIO_Init+0x2bc>)
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a40      	ldr	r2, [pc, #256]	; (8002364 <HAL_GPIO_Init+0x2c0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_GPIO_Init+0x1ec>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3f      	ldr	r2, [pc, #252]	; (8002368 <HAL_GPIO_Init+0x2c4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00d      	beq.n	800228c <HAL_GPIO_Init+0x1e8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3e      	ldr	r2, [pc, #248]	; (800236c <HAL_GPIO_Init+0x2c8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x1e4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3d      	ldr	r2, [pc, #244]	; (8002370 <HAL_GPIO_Init+0x2cc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_GPIO_Init+0x1e0>
 8002280:	2303      	movs	r3, #3
 8002282:	e006      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002284:	2304      	movs	r3, #4
 8002286:	e004      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002288:	2302      	movs	r3, #2
 800228a:	e002      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002290:	2300      	movs	r3, #0
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	4093      	lsls	r3, r2
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a2:	492f      	ldr	r1, [pc, #188]	; (8002360 <HAL_GPIO_Init+0x2bc>)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	492c      	ldr	r1, [pc, #176]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4928      	ldr	r1, [pc, #160]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4922      	ldr	r1, [pc, #136]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	491e      	ldr	r1, [pc, #120]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4918      	ldr	r1, [pc, #96]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	4914      	ldr	r1, [pc, #80]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 8002324:	4013      	ands	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d021      	beq.n	8002378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	490e      	ldr	r1, [pc, #56]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e021      	b.n	8002386 <HAL_GPIO_Init+0x2e2>
 8002342:	bf00      	nop
 8002344:	10320000 	.word	0x10320000
 8002348:	10310000 	.word	0x10310000
 800234c:	10220000 	.word	0x10220000
 8002350:	10210000 	.word	0x10210000
 8002354:	10120000 	.word	0x10120000
 8002358:	10110000 	.word	0x10110000
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	40010800 	.word	0x40010800
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40011000 	.word	0x40011000
 8002370:	40011400 	.word	0x40011400
 8002374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_GPIO_Init+0x304>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	43db      	mvns	r3, r3
 8002380:	4909      	ldr	r1, [pc, #36]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002382:	4013      	ands	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	3301      	adds	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	f47f ae8e 	bne.w	80020b8 <HAL_GPIO_Init+0x14>
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	372c      	adds	r7, #44	; 0x2c
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e12b      	b.n	8002646 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fc32 	bl	8000c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800242e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800243e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002440:	f002 fae2 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 8002444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4a81      	ldr	r2, [pc, #516]	; (8002650 <HAL_I2C_Init+0x274>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d807      	bhi.n	8002460 <HAL_I2C_Init+0x84>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a80      	ldr	r2, [pc, #512]	; (8002654 <HAL_I2C_Init+0x278>)
 8002454:	4293      	cmp	r3, r2
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e006      	b.n	800246e <HAL_I2C_Init+0x92>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a7d      	ldr	r2, [pc, #500]	; (8002658 <HAL_I2C_Init+0x27c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	bf94      	ite	ls
 8002468:	2301      	movls	r3, #1
 800246a:	2300      	movhi	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0e7      	b.n	8002646 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a78      	ldr	r2, [pc, #480]	; (800265c <HAL_I2C_Init+0x280>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0c9b      	lsrs	r3, r3, #18
 8002480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a6a      	ldr	r2, [pc, #424]	; (8002650 <HAL_I2C_Init+0x274>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d802      	bhi.n	80024b0 <HAL_I2C_Init+0xd4>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3301      	adds	r3, #1
 80024ae:	e009      	b.n	80024c4 <HAL_I2C_Init+0xe8>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	4a69      	ldr	r2, [pc, #420]	; (8002660 <HAL_I2C_Init+0x284>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	3301      	adds	r3, #1
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	495c      	ldr	r1, [pc, #368]	; (8002650 <HAL_I2C_Init+0x274>)
 80024e0:	428b      	cmp	r3, r1
 80024e2:	d819      	bhi.n	8002518 <HAL_I2C_Init+0x13c>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e59      	subs	r1, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f2:	1c59      	adds	r1, r3, #1
 80024f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024f8:	400b      	ands	r3, r1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_I2C_Init+0x138>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1e59      	subs	r1, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fbb1 f3f3 	udiv	r3, r1, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	e051      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002514:	2304      	movs	r3, #4
 8002516:	e04f      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d111      	bne.n	8002544 <HAL_I2C_Init+0x168>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1e58      	subs	r0, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	440b      	add	r3, r1
 800252e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e012      	b.n	800256a <HAL_I2C_Init+0x18e>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	0099      	lsls	r1, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Init+0x196>
 800256e:	2301      	movs	r3, #1
 8002570:	e022      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10e      	bne.n	8002598 <HAL_I2C_Init+0x1bc>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e58      	subs	r0, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	440b      	add	r3, r1
 8002588:	fbb0 f3f3 	udiv	r3, r0, r3
 800258c:	3301      	adds	r3, #1
 800258e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002596:	e00f      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	6809      	ldr	r1, [r1, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6911      	ldr	r1, [r2, #16]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68d2      	ldr	r2, [r2, #12]
 80025f2:	4311      	orrs	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	000186a0 	.word	0x000186a0
 8002654:	001e847f 	.word	0x001e847f
 8002658:	003d08ff 	.word	0x003d08ff
 800265c:	431bde83 	.word	0x431bde83
 8002660:	10624dd3 	.word	0x10624dd3

08002664 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d103      	bne.n	8002682 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	461a      	mov	r2, r3
 8002698:	460b      	mov	r3, r1
 800269a:	817b      	strh	r3, [r7, #10]
 800269c:	4613      	mov	r3, r2
 800269e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	f040 8081 	bne.w	80027b4 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_I2C_Master_Transmit_IT+0x134>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_I2C_Master_Transmit_IT+0x138>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a1a      	lsrs	r2, r3, #8
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	009a      	lsls	r2, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d112      	bne.n	80026fe <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	e05b      	b.n	80027b6 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d0df      	beq.n	80026cc <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_I2C_Master_Transmit_IT+0x8e>
 8002716:	2302      	movs	r3, #2
 8002718:	e04d      	b.n	80027b6 <HAL_I2C_Master_Transmit_IT+0x12a>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d007      	beq.n	8002740 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800274e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2221      	movs	r2, #33	; 0x21
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2210      	movs	r2, #16
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	893a      	ldrh	r2, [r7, #8]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002782:	897a      	ldrh	r2, [r7, #10]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800279e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	20000008 	.word	0x20000008
 80027c4:	14f8b589 	.word	0x14f8b589
 80027c8:	ffff0000 	.word	0xffff0000

080027cc <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	460b      	mov	r3, r1
 80027da:	817b      	strh	r3, [r7, #10]
 80027dc:	4613      	mov	r3, r2
 80027de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 8089 	bne.w	8002904 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_I2C_Master_Receive_IT+0x144>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	4a46      	ldr	r2, [pc, #280]	; (8002914 <HAL_I2C_Master_Receive_IT+0x148>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0a1a      	lsrs	r2, r3, #8
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3b01      	subs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d112      	bne.n	800283e <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e063      	b.n	8002906 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b02      	cmp	r3, #2
 800284a:	d0df      	beq.n	800280c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_I2C_Master_Receive_IT+0x8e>
 8002856:	2302      	movs	r3, #2
 8002858:	e055      	b.n	8002906 <HAL_I2C_Master_Receive_IT+0x13a>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d007      	beq.n	8002880 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2222      	movs	r2, #34	; 0x22
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2210      	movs	r2, #16
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	893a      	ldrh	r2, [r7, #8]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_I2C_Master_Receive_IT+0x14c>)
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80028c2:	897a      	ldrh	r2, [r7, #10]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80028de:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028ee:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	e000      	b.n	8002906 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000008 	.word	0x20000008
 8002914:	14f8b589 	.word	0x14f8b589
 8002918:	ffff0000 	.word	0xffff0000

0800291c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800293c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b10      	cmp	r3, #16
 800294a:	d003      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0x38>
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	f040 80b1 	bne.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <HAL_I2C_EV_IRQHandler+0x6e>
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002974:	d003      	beq.n	800297e <HAL_I2C_EV_IRQHandler+0x62>
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800297c:	d101      	bne.n	8002982 <HAL_I2C_EV_IRQHandler+0x66>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_I2C_EV_IRQHandler+0x68>
 8002982:	2300      	movs	r3, #0
 8002984:	2b01      	cmp	r3, #1
 8002986:	f000 8114 	beq.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x90>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 fc4e 	bl	8004240 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fd4e 	bl	8003446 <I2C_Master_SB>
 80029aa:	e083      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_I2C_EV_IRQHandler+0xac>
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fdc5 	bl	8003550 <I2C_Master_ADD10>
 80029c6:	e075      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0xc8>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fde0 	bl	80035a2 <I2C_Master_ADDR>
 80029e2:	e067      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d036      	beq.n	8002a5c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029fc:	f000 80db 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <HAL_I2C_EV_IRQHandler+0x10a>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_I2C_EV_IRQHandler+0x10a>
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f9c2 	bl	8002da8 <I2C_MasterTransmit_TXE>
 8002a24:	e046      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80c2 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80bc 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a3e:	7bbb      	ldrb	r3, [r7, #14]
 8002a40:	2b21      	cmp	r3, #33	; 0x21
 8002a42:	d103      	bne.n	8002a4c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fa4b 	bl	8002ee0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4a:	e0b4      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	f040 80b1 	bne.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fab9 	bl	8002fcc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a5a:	e0ac      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a6a:	f000 80a4 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <HAL_I2C_EV_IRQHandler+0x178>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_I2C_EV_IRQHandler+0x178>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fb35 	bl	80030fc <I2C_MasterReceive_RXNE>
 8002a92:	e00f      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 808b 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8085 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fbe0 	bl	8003272 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab2:	e080      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002ab4:	e07f      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e007      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d011      	beq.n	8002b06 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 ffa6 	bl	8003a50 <I2C_Slave_ADDR>
 8002b04:	e05a      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x206>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 ffe0 	bl	8003ae0 <I2C_Slave_STOPF>
 8002b20:	e04c      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b22:	7bbb      	ldrb	r3, [r7, #14]
 8002b24:	2b21      	cmp	r3, #33	; 0x21
 8002b26:	d002      	beq.n	8002b2e <HAL_I2C_EV_IRQHandler+0x212>
 8002b28:	7bbb      	ldrb	r3, [r7, #14]
 8002b2a:	2b29      	cmp	r3, #41	; 0x29
 8002b2c:	d120      	bne.n	8002b70 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x238>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x238>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fec3 	bl	80038d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b52:	e032      	b.n	8002bba <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02d      	beq.n	8002bba <HAL_I2C_EV_IRQHandler+0x29e>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d028      	beq.n	8002bba <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fef2 	bl	8003952 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b6e:	e024      	b.n	8002bba <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <HAL_I2C_EV_IRQHandler+0x27a>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_I2C_EV_IRQHandler+0x27a>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 feff 	bl	8003992 <I2C_SlaveReceive_RXNE>
 8002b94:	e012      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 ff2f 	bl	8003a0e <I2C_SlaveReceive_BTF>
 8002bb0:	e004      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08a      	sub	sp, #40	; 0x28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002be4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_I2C_ER_IRQHandler+0x5a>
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c0a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <HAL_I2C_ER_IRQHandler+0x80>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	f043 0302 	orr.w	r3, r3, #2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002c40:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d03e      	beq.n	8002cca <HAL_I2C_ER_IRQHandler+0x108>
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d039      	beq.n	8002cca <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002c56:	7efb      	ldrb	r3, [r7, #27]
 8002c58:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c70:	7ebb      	ldrb	r3, [r7, #26]
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d112      	bne.n	8002c9c <HAL_I2C_ER_IRQHandler+0xda>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10f      	bne.n	8002c9c <HAL_I2C_ER_IRQHandler+0xda>
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b21      	cmp	r3, #33	; 0x21
 8002c80:	d008      	beq.n	8002c94 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	2b29      	cmp	r3, #41	; 0x29
 8002c86:	d005      	beq.n	8002c94 <HAL_I2C_ER_IRQHandler+0xd2>
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	2b28      	cmp	r3, #40	; 0x28
 8002c8c:	d106      	bne.n	8002c9c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b21      	cmp	r3, #33	; 0x21
 8002c92:	d103      	bne.n	8002c9c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f001 f853 	bl	8003d40 <I2C_Slave_AF>
 8002c9a:	e016      	b.n	8002cca <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ca4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cae:	7efb      	ldrb	r3, [r7, #27]
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d002      	beq.n	8002cba <HAL_I2C_ER_IRQHandler+0xf8>
 8002cb4:	7efb      	ldrb	r3, [r7, #27]
 8002cb6:	2b40      	cmp	r3, #64	; 0x40
 8002cb8:	d107      	bne.n	8002cca <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002cee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f001 f890 	bl	8003e28 <I2C_ITError>
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
 8002d40:	4613      	mov	r3, r2
 8002d42:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d150      	bne.n	8002e70 <I2C_MasterTransmit_TXE+0xc8>
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	2b21      	cmp	r3, #33	; 0x21
 8002dd2:	d14d      	bne.n	8002e70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d01d      	beq.n	8002e16 <I2C_MasterTransmit_TXE+0x6e>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d01a      	beq.n	8002e16 <I2C_MasterTransmit_TXE+0x6e>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002de6:	d016      	beq.n	8002e16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002df6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2211      	movs	r2, #17
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fe64 	bl	8000adc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e14:	e060      	b.n	8002ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d107      	bne.n	8002e60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff81 	bl	8002d60 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e5e:	e03b      	b.n	8002ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fe37 	bl	8000adc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e6e:	e033      	b.n	8002ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b21      	cmp	r3, #33	; 0x21
 8002e74:	d005      	beq.n	8002e82 <I2C_MasterTransmit_TXE+0xda>
 8002e76:	7bbb      	ldrb	r3, [r7, #14]
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d12d      	bne.n	8002ed8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b22      	cmp	r3, #34	; 0x22
 8002e80:	d12a      	bne.n	8002ed8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d108      	bne.n	8002e9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e9c:	e01c      	b.n	8002ed8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d103      	bne.n	8002eb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f88e 	bl	8002fcc <I2C_MemoryTransmit_TXE_BTF>
}
 8002eb0:	e012      	b.n	8002ed8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ed6:	e7ff      	b.n	8002ed8 <I2C_MasterTransmit_TXE+0x130>
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b21      	cmp	r3, #33	; 0x21
 8002ef8:	d164      	bne.n	8002fc4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d012      	beq.n	8002f2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f28:	e04c      	b.n	8002fc4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d01d      	beq.n	8002f6c <I2C_MasterTransmit_BTF+0x8c>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d01a      	beq.n	8002f6c <I2C_MasterTransmit_BTF+0x8c>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f3c:	d016      	beq.n	8002f6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2211      	movs	r2, #17
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fd fdb9 	bl	8000adc <HAL_I2C_MasterTxCpltCallback>
}
 8002f6a:	e02b      	b.n	8002fc4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d107      	bne.n	8002fb6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff fed6 	bl	8002d60 <HAL_I2C_MemTxCpltCallback>
}
 8002fb4:	e006      	b.n	8002fc4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fd8c 	bl	8000adc <HAL_I2C_MasterTxCpltCallback>
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11d      	bne.n	8003020 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d10b      	bne.n	8003004 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffc:	1c9a      	adds	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003002:	e077      	b.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003008:	b29b      	uxth	r3, r3
 800300a:	121b      	asrs	r3, r3, #8
 800300c:	b2da      	uxtb	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800301e:	e069      	b.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10b      	bne.n	8003040 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	b2da      	uxtb	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800303e:	e059      	b.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	2b02      	cmp	r3, #2
 8003046:	d152      	bne.n	80030ee <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b22      	cmp	r3, #34	; 0x22
 800304c:	d10d      	bne.n	800306a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003068:	e044      	b.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d015      	beq.n	80030a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b21      	cmp	r3, #33	; 0x21
 8003078:	d112      	bne.n	80030a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800309e:	e029      	b.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d124      	bne.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2b21      	cmp	r3, #33	; 0x21
 80030ae:	d121      	bne.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030be:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fe3a 	bl	8002d60 <HAL_I2C_MemTxCpltCallback>
}
 80030ec:	e002      	b.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fab8 	bl	8002664 <I2C_Flush_DR>
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b22      	cmp	r3, #34	; 0x22
 800310e:	f040 80ac 	bne.w	800326a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d921      	bls.n	8003164 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b03      	cmp	r3, #3
 800314e:	f040 808c 	bne.w	800326a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003160:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003162:	e082      	b.n	800326a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	2b02      	cmp	r3, #2
 800316a:	d075      	beq.n	8003258 <I2C_MasterReceive_RXNE+0x15c>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d002      	beq.n	8003178 <I2C_MasterReceive_RXNE+0x7c>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d16f      	bne.n	8003258 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f001 f82f 	bl	80041dc <I2C_WaitOnSTOPRequestThroughIT>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d142      	bne.n	800320a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003192:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d10a      	bne.n	80031f4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fdc0 	bl	8002d72 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031f2:	e03a      	b.n	800326a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2212      	movs	r2, #18
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fc7c 	bl	8000b00 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003208:	e02f      	b.n	800326a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003218:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff fd97 	bl	8002d84 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003256:	e008      	b.n	800326a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003266:	605a      	str	r2, [r3, #4]
}
 8003268:	e7ff      	b.n	800326a <I2C_MasterReceive_RXNE+0x16e>
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b04      	cmp	r3, #4
 8003288:	d11b      	bne.n	80032c2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003298:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032c0:	e0bd      	b.n	800343e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d129      	bne.n	8003320 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032da:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d00a      	beq.n	80032f8 <I2C_MasterReceive_BTF+0x86>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d007      	beq.n	80032f8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800331e:	e08e      	b.n	800343e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d176      	bne.n	8003418 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d002      	beq.n	8003336 <I2C_MasterReceive_BTF+0xc4>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d108      	bne.n	8003348 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e019      	b.n	800337c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b04      	cmp	r3, #4
 800334c:	d002      	beq.n	8003354 <I2C_MasterReceive_BTF+0xe2>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d108      	bne.n	8003366 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e00a      	b.n	800337c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b10      	cmp	r3, #16
 800336a:	d007      	beq.n	800337c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d10a      	bne.n	8003402 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff fcb9 	bl	8002d72 <HAL_I2C_MemRxCpltCallback>
}
 8003400:	e01d      	b.n	800343e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2212      	movs	r2, #18
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd fb75 	bl	8000b00 <HAL_I2C_MasterRxCpltCallback>
}
 8003416:	e012      	b.n	800343e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d117      	bne.n	800348a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003472:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003474:	e067      	b.n	8003546 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]
}
 8003488:	e05d      	b.n	8003546 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003492:	d133      	bne.n	80034fc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b21      	cmp	r3, #33	; 0x21
 800349e:	d109      	bne.n	80034b4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b0:	611a      	str	r2, [r3, #16]
 80034b2:	e008      	b.n	80034c6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <I2C_Master_SB+0x92>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d032      	beq.n	8003546 <I2C_Master_SB+0x100>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d02d      	beq.n	8003546 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f8:	605a      	str	r2, [r3, #4]
}
 80034fa:	e024      	b.n	8003546 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10e      	bne.n	8003522 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	b29b      	uxth	r3, r3
 800350a:	11db      	asrs	r3, r3, #7
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0306 	and.w	r3, r3, #6
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f063 030f 	orn	r3, r3, #15
 8003518:	b2da      	uxtb	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]
}
 8003520:	e011      	b.n	8003546 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10d      	bne.n	8003546 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	b29b      	uxth	r3, r3
 8003530:	11db      	asrs	r3, r3, #7
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0306 	and.w	r3, r3, #6
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f063 030e 	orn	r3, r3, #14
 800353e:	b2da      	uxtb	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	611a      	str	r2, [r3, #16]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	b2da      	uxtb	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	2b00      	cmp	r3, #0
 800356a:	d004      	beq.n	8003576 <I2C_Master_ADD10+0x26>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <I2C_Master_ADD10+0x48>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003596:	605a      	str	r2, [r3, #4]
  }
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b091      	sub	sp, #68	; 0x44
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b22      	cmp	r3, #34	; 0x22
 80035ca:	f040 8174 	bne.w	80038b6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <I2C_Master_ADDR+0x54>
 80035d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d10b      	bne.n	80035f6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	e16b      	b.n	80038ce <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11d      	bne.n	800363a <I2C_Master_ADDR+0x98>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003606:	d118      	bne.n	800363a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003608:	2300      	movs	r3, #0
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	651a      	str	r2, [r3, #80]	; 0x50
 8003638:	e149      	b.n	80038ce <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d113      	bne.n	800366c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003644:	2300      	movs	r3, #0
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e120      	b.n	80038ae <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	f040 808a 	bne.w	800378c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800367e:	d137      	bne.n	80036f0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369e:	d113      	bne.n	80036c8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b0:	2300      	movs	r3, #0
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	e0f2      	b.n	80038ae <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e0de      	b.n	80038ae <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d02e      	beq.n	8003754 <I2C_Master_ADDR+0x1b2>
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d02b      	beq.n	8003754 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80036fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fe:	2b12      	cmp	r3, #18
 8003700:	d102      	bne.n	8003708 <I2C_Master_ADDR+0x166>
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b01      	cmp	r3, #1
 8003706:	d125      	bne.n	8003754 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b04      	cmp	r3, #4
 800370c:	d00e      	beq.n	800372c <I2C_Master_ADDR+0x18a>
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	2b02      	cmp	r3, #2
 8003712:	d00b      	beq.n	800372c <I2C_Master_ADDR+0x18a>
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	2b10      	cmp	r3, #16
 8003718:	d008      	beq.n	800372c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e007      	b.n	800373c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800373a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	e0ac      	b.n	80038ae <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e090      	b.n	80038ae <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d158      	bne.n	8003848 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	2b04      	cmp	r3, #4
 800379a:	d021      	beq.n	80037e0 <I2C_Master_ADDR+0x23e>
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d01e      	beq.n	80037e0 <I2C_Master_ADDR+0x23e>
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d01b      	beq.n	80037e0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e012      	b.n	8003806 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003814:	d14b      	bne.n	80038ae <I2C_Master_ADDR+0x30c>
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800381c:	d00b      	beq.n	8003836 <I2C_Master_ADDR+0x294>
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	2b01      	cmp	r3, #1
 8003822:	d008      	beq.n	8003836 <I2C_Master_ADDR+0x294>
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	2b08      	cmp	r3, #8
 8003828:	d005      	beq.n	8003836 <I2C_Master_ADDR+0x294>
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	2b10      	cmp	r3, #16
 800382e:	d002      	beq.n	8003836 <I2C_Master_ADDR+0x294>
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	2b20      	cmp	r3, #32
 8003834:	d13b      	bne.n	80038ae <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	e032      	b.n	80038ae <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003866:	d117      	bne.n	8003898 <I2C_Master_ADDR+0x2f6>
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386e:	d00b      	beq.n	8003888 <I2C_Master_ADDR+0x2e6>
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	2b01      	cmp	r3, #1
 8003874:	d008      	beq.n	8003888 <I2C_Master_ADDR+0x2e6>
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	2b08      	cmp	r3, #8
 800387a:	d005      	beq.n	8003888 <I2C_Master_ADDR+0x2e6>
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	2b10      	cmp	r3, #16
 8003880:	d002      	beq.n	8003888 <I2C_Master_ADDR+0x2e6>
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	2b20      	cmp	r3, #32
 8003886:	d107      	bne.n	8003898 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003896:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038b4:	e00b      	b.n	80038ce <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
}
 80038cc:	e7ff      	b.n	80038ce <I2C_Master_ADDR+0x32c>
 80038ce:	bf00      	nop
 80038d0:	3744      	adds	r7, #68	; 0x44
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d02b      	beq.n	800394a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d114      	bne.n	800394a <I2C_SlaveTransmit_TXE+0x72>
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b29      	cmp	r3, #41	; 0x29
 8003924:	d111      	bne.n	800394a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2221      	movs	r2, #33	; 0x21
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2228      	movs	r2, #40	; 0x28
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff f9e3 	bl	8002d10 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d011      	beq.n	8003988 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d02c      	beq.n	8003a06 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d114      	bne.n	8003a06 <I2C_SlaveReceive_RXNE+0x74>
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d111      	bne.n	8003a06 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2222      	movs	r2, #34	; 0x22
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2228      	movs	r2, #40	; 0x28
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff f98e 	bl	8002d22 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a6a:	2b28      	cmp	r3, #40	; 0x28
 8003a6c:	d125      	bne.n	8003aba <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	81bb      	strh	r3, [r7, #12]
 8003a9c:	e002      	b.n	8003aa4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003aac:	89ba      	ldrh	r2, [r7, #12]
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff f93e 	bl	8002d34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ab8:	e00e      	b.n	8003ad8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003afe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3c:	d172      	bne.n	8003c24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b22      	cmp	r3, #34	; 0x22
 8003b42:	d002      	beq.n	8003b4a <I2C_Slave_STOPF+0x6a>
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b2a      	cmp	r3, #42	; 0x2a
 8003b48:	d135      	bne.n	8003bb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0204 	orr.w	r2, r3, #4
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fa54 	bl	8002030 <HAL_DMA_GetState>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d049      	beq.n	8003c22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	4a69      	ldr	r2, [pc, #420]	; (8003d38 <I2C_Slave_STOPF+0x258>)
 8003b94:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe f8ca 	bl	8001d34 <HAL_DMA_Abort_IT>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d03d      	beq.n	8003c22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bb4:	e035      	b.n	8003c22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f043 0204 	orr.w	r2, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fa1e 	bl	8002030 <HAL_DMA_GetState>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d014      	beq.n	8003c24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	4a4e      	ldr	r2, [pc, #312]	; (8003d38 <I2C_Slave_STOPF+0x258>)
 8003c00:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe f894 	bl	8001d34 <HAL_DMA_Abort_IT>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4798      	blx	r3
 8003c20:	e000      	b.n	8003c24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d03e      	beq.n	8003cac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d112      	bne.n	8003c62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d112      	bne.n	8003c96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8b7 	bl	8003e28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cba:	e039      	b.n	8003d30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc0:	d109      	bne.n	8003cd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2228      	movs	r2, #40	; 0x28
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff f826 	bl	8002d22 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b28      	cmp	r3, #40	; 0x28
 8003ce0:	d111      	bne.n	8003d06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <I2C_Slave_STOPF+0x25c>)
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff f825 	bl	8002d4e <HAL_I2C_ListenCpltCallback>
}
 8003d04:	e014      	b.n	8003d30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	2b22      	cmp	r3, #34	; 0x22
 8003d0c:	d002      	beq.n	8003d14 <I2C_Slave_STOPF+0x234>
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	2b22      	cmp	r3, #34	; 0x22
 8003d12:	d10d      	bne.n	8003d30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe fff9 	bl	8002d22 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	0800408d 	.word	0x0800408d
 8003d3c:	ffff0000 	.word	0xffff0000

08003d40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d002      	beq.n	8003d62 <I2C_Slave_AF+0x22>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d129      	bne.n	8003db6 <I2C_Slave_AF+0x76>
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b28      	cmp	r3, #40	; 0x28
 8003d66:	d126      	bne.n	8003db6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2e      	ldr	r2, [pc, #184]	; (8003e24 <I2C_Slave_AF+0xe4>)
 8003d6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe ffcd 	bl	8002d4e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003db4:	e031      	b.n	8003e1a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b21      	cmp	r3, #33	; 0x21
 8003dba:	d129      	bne.n	8003e10 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <I2C_Slave_AF+0xe4>)
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2221      	movs	r2, #33	; 0x21
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003de6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e00:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe fc2e 	bl	8002664 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fe ff81 	bl	8002d10 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e0e:	e004      	b.n	8003e1a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e18:	615a      	str	r2, [r3, #20]
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	ffff0000 	.word	0xffff0000

08003e28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e40:	7bbb      	ldrb	r3, [r7, #14]
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d002      	beq.n	8003e4c <I2C_ITError+0x24>
 8003e46:	7bbb      	ldrb	r3, [r7, #14]
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d10a      	bne.n	8003e62 <I2C_ITError+0x3a>
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b22      	cmp	r3, #34	; 0x22
 8003e50:	d107      	bne.n	8003e62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e68:	2b28      	cmp	r3, #40	; 0x28
 8003e6a:	d107      	bne.n	8003e7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2228      	movs	r2, #40	; 0x28
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e7a:	e015      	b.n	8003ea8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8a:	d00a      	beq.n	8003ea2 <I2C_ITError+0x7a>
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b60      	cmp	r3, #96	; 0x60
 8003e90:	d007      	beq.n	8003ea2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb6:	d162      	bne.n	8003f7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d020      	beq.n	8003f18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	4a6a      	ldr	r2, [pc, #424]	; (8004084 <I2C_ITError+0x25c>)
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd ff26 	bl	8001d34 <HAL_DMA_Abort_IT>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8089 	beq.w	8004002 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f12:	4610      	mov	r0, r2
 8003f14:	4798      	blx	r3
 8003f16:	e074      	b.n	8004002 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	4a59      	ldr	r2, [pc, #356]	; (8004084 <I2C_ITError+0x25c>)
 8003f1e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd ff05 	bl	8001d34 <HAL_DMA_Abort_IT>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d068      	beq.n	8004002 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d10b      	bne.n	8003f56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4798      	blx	r3
 8003f7c:	e041      	b.n	8004002 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b60      	cmp	r3, #96	; 0x60
 8003f88:	d125      	bne.n	8003fd6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d10b      	bne.n	8003fbe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fe fee1 	bl	8002d96 <HAL_I2C_AbortCpltCallback>
 8003fd4:	e015      	b.n	8004002 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d10b      	bne.n	8003ffc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fe fec1 	bl	8002d84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800403e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b04      	cmp	r3, #4
 8004052:	d113      	bne.n	800407c <I2C_ITError+0x254>
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b28      	cmp	r3, #40	; 0x28
 8004058:	d110      	bne.n	800407c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <I2C_ITError+0x260>)
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fe fe69 	bl	8002d4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	0800408d 	.word	0x0800408d
 8004088:	ffff0000 	.word	0xffff0000

0800408c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040a6:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <I2C_DMAAbort+0x148>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	08db      	lsrs	r3, r3, #3
 80040ac:	4a4a      	ldr	r2, [pc, #296]	; (80041d8 <I2C_DMAAbort+0x14c>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0a1a      	lsrs	r2, r3, #8
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	00da      	lsls	r2, r3, #3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80040d2:	e00a      	b.n	80040ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e8:	d0ea      	beq.n	80040c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	2200      	movs	r2, #0
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	2200      	movs	r2, #0
 8004108:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	2200      	movs	r2, #0
 800412e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	2200      	movs	r2, #0
 800413e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b60      	cmp	r3, #96	; 0x60
 800415a:	d10e      	bne.n	800417a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7fe fe0f 	bl	8002d96 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004178:	e027      	b.n	80041ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004180:	2b28      	cmp	r3, #40	; 0x28
 8004182:	d117      	bne.n	80041b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2228      	movs	r2, #40	; 0x28
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041b2:	e007      	b.n	80041c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80041c4:	6978      	ldr	r0, [r7, #20]
 80041c6:	f7fe fddd 	bl	8002d84 <HAL_I2C_ErrorCallback>
}
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000008 	.word	0x20000008
 80041d8:	14f8b589 	.word	0x14f8b589

080041dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	08db      	lsrs	r3, r3, #3
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	0a1a      	lsrs	r2, r3, #8
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b01      	subs	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d107      	bne.n	800421a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e008      	b.n	800422c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004228:	d0e9      	beq.n	80041fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000008 	.word	0x20000008
 800423c:	14f8b589 	.word	0x14f8b589

08004240 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004250:	d103      	bne.n	800425a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004258:	e007      	b.n	800426a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004262:	d102      	bne.n	800426a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2208      	movs	r2, #8
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e272      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8087 	beq.w	80043a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004294:	4b92      	ldr	r3, [pc, #584]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b04      	cmp	r3, #4
 800429e:	d00c      	beq.n	80042ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042a0:	4b8f      	ldr	r3, [pc, #572]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d112      	bne.n	80042d2 <HAL_RCC_OscConfig+0x5e>
 80042ac:	4b8c      	ldr	r3, [pc, #560]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b8:	d10b      	bne.n	80042d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ba:	4b89      	ldr	r3, [pc, #548]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d06c      	beq.n	80043a0 <HAL_RCC_OscConfig+0x12c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d168      	bne.n	80043a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e24c      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042da:	d106      	bne.n	80042ea <HAL_RCC_OscConfig+0x76>
 80042dc:	4b80      	ldr	r3, [pc, #512]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a7f      	ldr	r2, [pc, #508]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	e02e      	b.n	8004348 <HAL_RCC_OscConfig+0xd4>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x98>
 80042f2:	4b7b      	ldr	r3, [pc, #492]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a7a      	ldr	r2, [pc, #488]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b78      	ldr	r3, [pc, #480]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a77      	ldr	r2, [pc, #476]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e01d      	b.n	8004348 <HAL_RCC_OscConfig+0xd4>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0xbc>
 8004316:	4b72      	ldr	r3, [pc, #456]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a71      	ldr	r2, [pc, #452]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b6f      	ldr	r3, [pc, #444]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6e      	ldr	r2, [pc, #440]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e00b      	b.n	8004348 <HAL_RCC_OscConfig+0xd4>
 8004330:	4b6b      	ldr	r3, [pc, #428]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6a      	ldr	r2, [pc, #424]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a67      	ldr	r2, [pc, #412]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fc fea4 	bl	800109c <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fc fea0 	bl	800109c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e200      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b5d      	ldr	r3, [pc, #372]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0xe4>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fc fe90 	bl	800109c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004380:	f7fc fe8c 	bl	800109c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1ec      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x10c>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d063      	beq.n	8004476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ae:	4b4c      	ldr	r3, [pc, #304]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ba:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d11c      	bne.n	8004400 <HAL_RCC_OscConfig+0x18c>
 80043c6:	4b46      	ldr	r3, [pc, #280]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d116      	bne.n	8004400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d2:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_RCC_OscConfig+0x176>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d001      	beq.n	80043ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e1c0      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4939      	ldr	r1, [pc, #228]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	e03a      	b.n	8004476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004408:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fc fe45 	bl	800109c <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004416:	f7fc fe41 	bl	800109c <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e1a1      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004428:	4b2d      	ldr	r3, [pc, #180]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4927      	ldr	r1, [pc, #156]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
 8004448:	e015      	b.n	8004476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444a:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fc fe24 	bl	800109c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004458:	f7fc fe20 	bl	800109c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e180      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d03a      	beq.n	80044f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d019      	beq.n	80044be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448a:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <HAL_RCC_OscConfig+0x274>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004490:	f7fc fe04 	bl	800109c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004498:	f7fc fe00 	bl	800109c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e160      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044b6:	2001      	movs	r0, #1
 80044b8:	f000 face 	bl	8004a58 <RCC_Delay>
 80044bc:	e01c      	b.n	80044f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_RCC_OscConfig+0x274>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c4:	f7fc fdea 	bl	800109c <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ca:	e00f      	b.n	80044ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fc fde6 	bl	800109c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d908      	bls.n	80044ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e146      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	42420000 	.word	0x42420000
 80044e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	4b92      	ldr	r3, [pc, #584]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e9      	bne.n	80044cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80a6 	beq.w	8004652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450a:	4b8b      	ldr	r3, [pc, #556]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10d      	bne.n	8004532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004516:	4b88      	ldr	r3, [pc, #544]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4a87      	ldr	r2, [pc, #540]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004520:	61d3      	str	r3, [r2, #28]
 8004522:	4b85      	ldr	r3, [pc, #532]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004532:	4b82      	ldr	r3, [pc, #520]	; (800473c <HAL_RCC_OscConfig+0x4c8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d118      	bne.n	8004570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453e:	4b7f      	ldr	r3, [pc, #508]	; (800473c <HAL_RCC_OscConfig+0x4c8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a7e      	ldr	r2, [pc, #504]	; (800473c <HAL_RCC_OscConfig+0x4c8>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454a:	f7fc fda7 	bl	800109c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004552:	f7fc fda3 	bl	800109c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	; 0x64
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e103      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004564:	4b75      	ldr	r3, [pc, #468]	; (800473c <HAL_RCC_OscConfig+0x4c8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x312>
 8004578:	4b6f      	ldr	r3, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4a6e      	ldr	r2, [pc, #440]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6213      	str	r3, [r2, #32]
 8004584:	e02d      	b.n	80045e2 <HAL_RCC_OscConfig+0x36e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x334>
 800458e:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a69      	ldr	r2, [pc, #420]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	6213      	str	r3, [r2, #32]
 800459a:	4b67      	ldr	r3, [pc, #412]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	4a66      	ldr	r2, [pc, #408]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	f023 0304 	bic.w	r3, r3, #4
 80045a4:	6213      	str	r3, [r2, #32]
 80045a6:	e01c      	b.n	80045e2 <HAL_RCC_OscConfig+0x36e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d10c      	bne.n	80045ca <HAL_RCC_OscConfig+0x356>
 80045b0:	4b61      	ldr	r3, [pc, #388]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4a60      	ldr	r2, [pc, #384]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	6213      	str	r3, [r2, #32]
 80045bc:	4b5e      	ldr	r3, [pc, #376]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4a5d      	ldr	r2, [pc, #372]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6213      	str	r3, [r2, #32]
 80045c8:	e00b      	b.n	80045e2 <HAL_RCC_OscConfig+0x36e>
 80045ca:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a5a      	ldr	r2, [pc, #360]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	6213      	str	r3, [r2, #32]
 80045d6:	4b58      	ldr	r3, [pc, #352]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4a57      	ldr	r2, [pc, #348]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	f023 0304 	bic.w	r3, r3, #4
 80045e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d015      	beq.n	8004616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ea:	f7fc fd57 	bl	800109c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f0:	e00a      	b.n	8004608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f7fc fd53 	bl	800109c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004600:	4293      	cmp	r3, r2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e0b1      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0ee      	beq.n	80045f2 <HAL_RCC_OscConfig+0x37e>
 8004614:	e014      	b.n	8004640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7fc fd41 	bl	800109c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fc fd3d 	bl	800109c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	; 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e09b      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004634:	4b40      	ldr	r3, [pc, #256]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ee      	bne.n	800461e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d105      	bne.n	8004652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004646:	4b3c      	ldr	r3, [pc, #240]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	4a3b      	ldr	r2, [pc, #236]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8087 	beq.w	800476a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 030c 	and.w	r3, r3, #12
 8004664:	2b08      	cmp	r3, #8
 8004666:	d061      	beq.n	800472c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d146      	bne.n	80046fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004670:	4b33      	ldr	r3, [pc, #204]	; (8004740 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fc fd11 	bl	800109c <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fc fd0d 	bl	800109c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e06d      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004690:	4b29      	ldr	r3, [pc, #164]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a4:	d108      	bne.n	80046b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4921      	ldr	r1, [pc, #132]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b8:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a19      	ldr	r1, [r3, #32]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	430b      	orrs	r3, r1
 80046ca:	491b      	ldr	r1, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_RCC_OscConfig+0x4cc>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d6:	f7fc fce1 	bl	800109c <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046de:	f7fc fcdd 	bl	800109c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e03d      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x46a>
 80046fc:	e035      	b.n	800476a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <HAL_RCC_OscConfig+0x4cc>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fc fcca 	bl	800109c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7fc fcc6 	bl	800109c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e026      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x498>
 800472a:	e01e      	b.n	800476a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d107      	bne.n	8004744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e019      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
 8004740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_OscConfig+0x500>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	429a      	cmp	r2, r3
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d001      	beq.n	800476a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000

08004778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0d0      	b.n	800492e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d910      	bls.n	80047bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b67      	ldr	r3, [pc, #412]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 0207 	bic.w	r2, r3, #7
 80047a2:	4965      	ldr	r1, [pc, #404]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b63      	ldr	r3, [pc, #396]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0b8      	b.n	800492e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d4:	4b59      	ldr	r3, [pc, #356]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4a58      	ldr	r2, [pc, #352]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ec:	4b53      	ldr	r3, [pc, #332]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4a52      	ldr	r2, [pc, #328]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f8:	4b50      	ldr	r3, [pc, #320]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	494d      	ldr	r1, [pc, #308]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d040      	beq.n	8004898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	4b47      	ldr	r3, [pc, #284]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d115      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e07f      	b.n	800492e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004836:	4b41      	ldr	r3, [pc, #260]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e073      	b.n	800492e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e06b      	b.n	800492e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004856:	4b39      	ldr	r3, [pc, #228]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f023 0203 	bic.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4936      	ldr	r1, [pc, #216]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	4313      	orrs	r3, r2
 8004866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004868:	f7fc fc18 	bl	800109c <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	e00a      	b.n	8004886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004870:	f7fc fc14 	bl	800109c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e053      	b.n	800492e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 020c 	and.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	429a      	cmp	r2, r3
 8004896:	d1eb      	bne.n	8004870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004898:	4b27      	ldr	r3, [pc, #156]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d210      	bcs.n	80048c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b24      	ldr	r3, [pc, #144]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 0207 	bic.w	r2, r3, #7
 80048ae:	4922      	ldr	r1, [pc, #136]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e032      	b.n	800492e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4916      	ldr	r1, [pc, #88]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048f2:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	490e      	ldr	r1, [pc, #56]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004906:	f000 f821 	bl	800494c <HAL_RCC_GetSysClockFreq>
 800490a:	4602      	mov	r2, r0
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	490a      	ldr	r1, [pc, #40]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	5ccb      	ldrb	r3, [r1, r3]
 800491a:	fa22 f303 	lsr.w	r3, r2, r3
 800491e:	4a09      	ldr	r2, [pc, #36]	; (8004944 <HAL_RCC_ClockConfig+0x1cc>)
 8004920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_RCC_ClockConfig+0x1d0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fc fb76 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40022000 	.word	0x40022000
 800493c:	40021000 	.word	0x40021000
 8004940:	08005ef0 	.word	0x08005ef0
 8004944:	20000008 	.word	0x20000008
 8004948:	2000000c 	.word	0x2000000c

0800494c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	2300      	movs	r3, #0
 8004960:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004966:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b04      	cmp	r3, #4
 8004974:	d002      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x30>
 8004976:	2b08      	cmp	r3, #8
 8004978:	d003      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x36>
 800497a:	e027      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800497c:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800497e:	613b      	str	r3, [r7, #16]
      break;
 8004980:	e027      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	0c9b      	lsrs	r3, r3, #18
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800499a:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	0c5b      	lsrs	r3, r3, #17
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	4a11      	ldr	r2, [pc, #68]	; (80049ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80049a6:	5cd3      	ldrb	r3, [r2, r3]
 80049a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ae:	fb03 f202 	mul.w	r2, r3, r2
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e004      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	613b      	str	r3, [r7, #16]
      break;
 80049ca:	e002      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ce:	613b      	str	r3, [r7, #16]
      break;
 80049d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d2:	693b      	ldr	r3, [r7, #16]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	007a1200 	.word	0x007a1200
 80049e8:	08005f08 	.word	0x08005f08
 80049ec:	08005f18 	.word	0x08005f18
 80049f0:	003d0900 	.word	0x003d0900

080049f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f8:	4b02      	ldr	r3, [pc, #8]	; (8004a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr
 8004a04:	20000008 	.word	0x20000008

08004a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a0c:	f7ff fff2 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	08005f00 	.word	0x08005f00

08004a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a34:	f7ff ffde 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	0adb      	lsrs	r3, r3, #11
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	08005f00 	.word	0x08005f00

08004a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <RCC_Delay+0x34>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <RCC_Delay+0x38>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	0a5b      	lsrs	r3, r3, #9
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a74:	bf00      	nop
  }
  while (Delay --);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1e5a      	subs	r2, r3, #1
 8004a7a:	60fa      	str	r2, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f9      	bne.n	8004a74 <RCC_Delay+0x1c>
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	20000008 	.word	0x20000008
 8004a90:	10624dd3 	.word	0x10624dd3

08004a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d07d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab4:	4b4f      	ldr	r3, [pc, #316]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10d      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac0:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	4a4b      	ldr	r2, [pc, #300]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aca:	61d3      	str	r3, [r2, #28]
 8004acc:	4b49      	ldr	r3, [pc, #292]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004adc:	4b46      	ldr	r3, [pc, #280]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d118      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae8:	4b43      	ldr	r3, [pc, #268]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a42      	ldr	r2, [pc, #264]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af4:	f7fc fad2 	bl	800109c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afa:	e008      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afc:	f7fc face 	bl	800109c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	; 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e06d      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0e:	4b3a      	ldr	r3, [pc, #232]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b1a:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02e      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d027      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b38:	4b2e      	ldr	r3, [pc, #184]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b42:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b48:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b4e:	4a29      	ldr	r2, [pc, #164]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fc fa9d 	bl	800109c <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fc fa99 	bl	800109c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e036      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ee      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b88:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4917      	ldr	r1, [pc, #92]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004baa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	490b      	ldr	r1, [pc, #44]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40007000 	.word	0x40007000
 8004bfc:	42420440 	.word	0x42420440

08004c00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	f200 808a 	bhi.w	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d045      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d075      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004c36:	e082      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004c38:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004c3e:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d07b      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	0c9b      	lsrs	r3, r3, #18
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	4a41      	ldr	r2, [pc, #260]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004c54:	5cd3      	ldrb	r3, [r2, r3]
 8004c56:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d015      	beq.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c62:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	0c5b      	lsrs	r3, r3, #17
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	4a3b      	ldr	r2, [pc, #236]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004c6e:	5cd3      	ldrb	r3, [r2, r3]
 8004c70:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004c7c:	4a38      	ldr	r2, [pc, #224]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e004      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004c98:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca4:	d102      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	61bb      	str	r3, [r7, #24]
      break;
 8004caa:	e04a      	b.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	61bb      	str	r3, [r7, #24]
      break;
 8004cba:	e042      	b.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ccc:	d108      	bne.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e01f      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cea:	d109      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004cec:	4b19      	ldr	r3, [pc, #100]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004cf8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e00f      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0a:	d11c      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d016      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004d18:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004d1c:	61bb      	str	r3, [r7, #24]
      break;
 8004d1e:	e012      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004d20:	e011      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004d22:	f7ff fe85 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8004d26:	4602      	mov	r2, r0
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	0b9b      	lsrs	r3, r3, #14
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	3301      	adds	r3, #1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	61bb      	str	r3, [r7, #24]
      break;
 8004d3c:	e004      	b.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004d46:	bf00      	nop
    }
  }
  return (frequency);
 8004d48:	69bb      	ldr	r3, [r7, #24]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40021000 	.word	0x40021000
 8004d58:	08005f1c 	.word	0x08005f1c
 8004d5c:	08005f2c 	.word	0x08005f2c
 8004d60:	007a1200 	.word	0x007a1200
 8004d64:	003d0900 	.word	0x003d0900
 8004d68:	aaaaaaab 	.word	0xaaaaaaab

08004d6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e093      	b.n	8004ea8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fb ffc9 	bl	8000d2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db0:	f023 0307 	bic.w	r3, r3, #7
 8004db4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f000 f903 	bl	8004fcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e0c:	f023 030c 	bic.w	r3, r3, #12
 8004e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	011a      	lsls	r2, r3, #4
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	031b      	lsls	r3, r3, #12
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	4313      	orrs	r3, r2
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ec8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ed0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ed8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d110      	bne.n	8004f02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d102      	bne.n	8004eec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ee6:	7b7b      	ldrb	r3, [r7, #13]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d001      	beq.n	8004ef0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e069      	b.n	8004fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f00:	e031      	b.n	8004f66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d110      	bne.n	8004f2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f08:	7bbb      	ldrb	r3, [r7, #14]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d102      	bne.n	8004f14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f0e:	7b3b      	ldrb	r3, [r7, #12]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d001      	beq.n	8004f18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e055      	b.n	8004fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f28:	e01d      	b.n	8004f66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d108      	bne.n	8004f42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d105      	bne.n	8004f42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f36:	7b7b      	ldrb	r3, [r7, #13]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d102      	bne.n	8004f42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f3c:	7b3b      	ldrb	r3, [r7, #12]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e03e      	b.n	8004fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_TIM_Encoder_Start+0xc4>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d008      	beq.n	8004f84 <HAL_TIM_Encoder_Start+0xd4>
 8004f72:	e00f      	b.n	8004f94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f887 	bl	8005090 <TIM_CCxChannelCmd>
      break;
 8004f82:	e016      	b.n	8004fb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f87f 	bl	8005090 <TIM_CCxChannelCmd>
      break;
 8004f92:	e00e      	b.n	8004fb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 f877 	bl	8005090 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	2104      	movs	r1, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f870 	bl	8005090 <TIM_CCxChannelCmd>
      break;
 8004fb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a29      	ldr	r2, [pc, #164]	; (8005084 <TIM_Base_SetConfig+0xb8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0x30>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0x30>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a26      	ldr	r2, [pc, #152]	; (8005088 <TIM_Base_SetConfig+0xbc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x30>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a25      	ldr	r2, [pc, #148]	; (800508c <TIM_Base_SetConfig+0xc0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1c      	ldr	r2, [pc, #112]	; (8005084 <TIM_Base_SetConfig+0xb8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_Base_SetConfig+0x62>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d007      	beq.n	800502e <TIM_Base_SetConfig+0x62>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <TIM_Base_SetConfig+0xbc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_Base_SetConfig+0x62>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <TIM_Base_SetConfig+0xc0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <TIM_Base_SetConfig+0xb8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d103      	bne.n	8005074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	615a      	str	r2, [r3, #20]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800

08005090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2201      	movs	r2, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	431a      	orrs	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e046      	b.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a16      	ldr	r2, [pc, #88]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513c:	d009      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a10      	ldr	r2, [pc, #64]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10c      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	4313      	orrs	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800

08005194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e042      	b.n	800522c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fb fe22 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f91d 	bl	8005418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800520c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08a      	sub	sp, #40	; 0x28
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b20      	cmp	r3, #32
 8005252:	d16d      	bne.n	8005330 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Transmit+0x2c>
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e066      	b.n	8005332 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2221      	movs	r2, #33	; 0x21
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005272:	f7fb ff13 	bl	800109c <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d108      	bne.n	80052a0 <HAL_UART_Transmit+0x6c>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e003      	b.n	80052a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a8:	e02a      	b.n	8005300 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2200      	movs	r2, #0
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f840 	bl	800533a <UART_WaitOnFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e036      	b.n	8005332 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10b      	bne.n	80052e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	3302      	adds	r3, #2
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	e007      	b.n	80052f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	781a      	ldrb	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1cf      	bne.n	80052aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2200      	movs	r2, #0
 8005312:	2140      	movs	r1, #64	; 0x40
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f810 	bl	800533a <UART_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e006      	b.n	8005332 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e000      	b.n	8005332 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b090      	sub	sp, #64	; 0x40
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534a:	e050      	b.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d04c      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0x30>
 800535a:	f7fb fe9f 	bl	800109c <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005366:	429a      	cmp	r2, r3
 8005368:	d241      	bcs.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	330c      	adds	r3, #12
 8005388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800538a:	637a      	str	r2, [r7, #52]	; 0x34
 800538c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e5      	bne.n	800536a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3314      	adds	r3, #20
 80053a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	613b      	str	r3, [r7, #16]
   return(result);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3314      	adds	r3, #20
 80053bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053be:	623a      	str	r2, [r7, #32]
 80053c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	69f9      	ldr	r1, [r7, #28]
 80053c4:	6a3a      	ldr	r2, [r7, #32]
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e5      	bne.n	800539e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e00f      	b.n	800540e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	429a      	cmp	r2, r3
 800540a:	d09f      	beq.n	800534c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3740      	adds	r7, #64	; 0x40
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005452:	f023 030c 	bic.w	r3, r3, #12
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	430b      	orrs	r3, r1
 800545e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2c      	ldr	r2, [pc, #176]	; (800552c <UART_SetConfig+0x114>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d103      	bne.n	8005488 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005480:	f7ff fad6 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	e002      	b.n	800548e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005488:	f7ff fabe 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 800548c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009a      	lsls	r2, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	4a22      	ldr	r2, [pc, #136]	; (8005530 <UART_SetConfig+0x118>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	0119      	lsls	r1, r3, #4
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009a      	lsls	r2, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <UART_SetConfig+0x118>)
 80054c6:	fba3 0302 	umull	r0, r3, r3, r2
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	2064      	movs	r0, #100	; 0x64
 80054ce:	fb00 f303 	mul.w	r3, r0, r3
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	3332      	adds	r3, #50	; 0x32
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <UART_SetConfig+0x118>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054e4:	4419      	add	r1, r3
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009a      	lsls	r2, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <UART_SetConfig+0x118>)
 80054fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	2064      	movs	r0, #100	; 0x64
 8005506:	fb00 f303 	mul.w	r3, r0, r3
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	3332      	adds	r3, #50	; 0x32
 8005510:	4a07      	ldr	r2, [pc, #28]	; (8005530 <UART_SetConfig+0x118>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	f003 020f 	and.w	r2, r3, #15
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	440a      	add	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40013800 	.word	0x40013800
 8005530:	51eb851f 	.word	0x51eb851f

08005534 <siprintf>:
 8005534:	b40e      	push	{r1, r2, r3}
 8005536:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800553a:	b500      	push	{lr}
 800553c:	b09c      	sub	sp, #112	; 0x70
 800553e:	ab1d      	add	r3, sp, #116	; 0x74
 8005540:	9002      	str	r0, [sp, #8]
 8005542:	9006      	str	r0, [sp, #24]
 8005544:	9107      	str	r1, [sp, #28]
 8005546:	9104      	str	r1, [sp, #16]
 8005548:	4808      	ldr	r0, [pc, #32]	; (800556c <siprintf+0x38>)
 800554a:	4909      	ldr	r1, [pc, #36]	; (8005570 <siprintf+0x3c>)
 800554c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005550:	9105      	str	r1, [sp, #20]
 8005552:	6800      	ldr	r0, [r0, #0]
 8005554:	a902      	add	r1, sp, #8
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	f000 f98e 	bl	8005878 <_svfiprintf_r>
 800555c:	2200      	movs	r2, #0
 800555e:	9b02      	ldr	r3, [sp, #8]
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	b01c      	add	sp, #112	; 0x70
 8005564:	f85d eb04 	ldr.w	lr, [sp], #4
 8005568:	b003      	add	sp, #12
 800556a:	4770      	bx	lr
 800556c:	20000060 	.word	0x20000060
 8005570:	ffff0208 	.word	0xffff0208

08005574 <memset>:
 8005574:	4603      	mov	r3, r0
 8005576:	4402      	add	r2, r0
 8005578:	4293      	cmp	r3, r2
 800557a:	d100      	bne.n	800557e <memset+0xa>
 800557c:	4770      	bx	lr
 800557e:	f803 1b01 	strb.w	r1, [r3], #1
 8005582:	e7f9      	b.n	8005578 <memset+0x4>

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000060 	.word	0x20000060

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	2600      	movs	r6, #0
 8005594:	4d0c      	ldr	r5, [pc, #48]	; (80055c8 <__libc_init_array+0x38>)
 8005596:	4c0d      	ldr	r4, [pc, #52]	; (80055cc <__libc_init_array+0x3c>)
 8005598:	1b64      	subs	r4, r4, r5
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	42a6      	cmp	r6, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	f000 fc7a 	bl	8005e98 <_init>
 80055a4:	2600      	movs	r6, #0
 80055a6:	4d0a      	ldr	r5, [pc, #40]	; (80055d0 <__libc_init_array+0x40>)
 80055a8:	4c0a      	ldr	r4, [pc, #40]	; (80055d4 <__libc_init_array+0x44>)
 80055aa:	1b64      	subs	r4, r4, r5
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	42a6      	cmp	r6, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b8:	4798      	blx	r3
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c2:	4798      	blx	r3
 80055c4:	3601      	adds	r6, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	08005f64 	.word	0x08005f64
 80055cc:	08005f64 	.word	0x08005f64
 80055d0:	08005f64 	.word	0x08005f64
 80055d4:	08005f68 	.word	0x08005f68

080055d8 <__retarget_lock_acquire_recursive>:
 80055d8:	4770      	bx	lr

080055da <__retarget_lock_release_recursive>:
 80055da:	4770      	bx	lr

080055dc <_free_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4605      	mov	r5, r0
 80055e0:	2900      	cmp	r1, #0
 80055e2:	d040      	beq.n	8005666 <_free_r+0x8a>
 80055e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e8:	1f0c      	subs	r4, r1, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bfb8      	it	lt
 80055ee:	18e4      	addlt	r4, r4, r3
 80055f0:	f000 f8dc 	bl	80057ac <__malloc_lock>
 80055f4:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <_free_r+0x8c>)
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	b933      	cbnz	r3, 8005608 <_free_r+0x2c>
 80055fa:	6063      	str	r3, [r4, #4]
 80055fc:	6014      	str	r4, [r2, #0]
 80055fe:	4628      	mov	r0, r5
 8005600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005604:	f000 b8d8 	b.w	80057b8 <__malloc_unlock>
 8005608:	42a3      	cmp	r3, r4
 800560a:	d908      	bls.n	800561e <_free_r+0x42>
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	1821      	adds	r1, r4, r0
 8005610:	428b      	cmp	r3, r1
 8005612:	bf01      	itttt	eq
 8005614:	6819      	ldreq	r1, [r3, #0]
 8005616:	685b      	ldreq	r3, [r3, #4]
 8005618:	1809      	addeq	r1, r1, r0
 800561a:	6021      	streq	r1, [r4, #0]
 800561c:	e7ed      	b.n	80055fa <_free_r+0x1e>
 800561e:	461a      	mov	r2, r3
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	b10b      	cbz	r3, 8005628 <_free_r+0x4c>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d9fa      	bls.n	800561e <_free_r+0x42>
 8005628:	6811      	ldr	r1, [r2, #0]
 800562a:	1850      	adds	r0, r2, r1
 800562c:	42a0      	cmp	r0, r4
 800562e:	d10b      	bne.n	8005648 <_free_r+0x6c>
 8005630:	6820      	ldr	r0, [r4, #0]
 8005632:	4401      	add	r1, r0
 8005634:	1850      	adds	r0, r2, r1
 8005636:	4283      	cmp	r3, r0
 8005638:	6011      	str	r1, [r2, #0]
 800563a:	d1e0      	bne.n	80055fe <_free_r+0x22>
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4408      	add	r0, r1
 8005642:	6010      	str	r0, [r2, #0]
 8005644:	6053      	str	r3, [r2, #4]
 8005646:	e7da      	b.n	80055fe <_free_r+0x22>
 8005648:	d902      	bls.n	8005650 <_free_r+0x74>
 800564a:	230c      	movs	r3, #12
 800564c:	602b      	str	r3, [r5, #0]
 800564e:	e7d6      	b.n	80055fe <_free_r+0x22>
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	1821      	adds	r1, r4, r0
 8005654:	428b      	cmp	r3, r1
 8005656:	bf01      	itttt	eq
 8005658:	6819      	ldreq	r1, [r3, #0]
 800565a:	685b      	ldreq	r3, [r3, #4]
 800565c:	1809      	addeq	r1, r1, r0
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	6063      	str	r3, [r4, #4]
 8005662:	6054      	str	r4, [r2, #4]
 8005664:	e7cb      	b.n	80055fe <_free_r+0x22>
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	200003ac 	.word	0x200003ac

0800566c <sbrk_aligned>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4e0e      	ldr	r6, [pc, #56]	; (80056a8 <sbrk_aligned+0x3c>)
 8005670:	460c      	mov	r4, r1
 8005672:	6831      	ldr	r1, [r6, #0]
 8005674:	4605      	mov	r5, r0
 8005676:	b911      	cbnz	r1, 800567e <sbrk_aligned+0x12>
 8005678:	f000 fbaa 	bl	8005dd0 <_sbrk_r>
 800567c:	6030      	str	r0, [r6, #0]
 800567e:	4621      	mov	r1, r4
 8005680:	4628      	mov	r0, r5
 8005682:	f000 fba5 	bl	8005dd0 <_sbrk_r>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d00a      	beq.n	80056a0 <sbrk_aligned+0x34>
 800568a:	1cc4      	adds	r4, r0, #3
 800568c:	f024 0403 	bic.w	r4, r4, #3
 8005690:	42a0      	cmp	r0, r4
 8005692:	d007      	beq.n	80056a4 <sbrk_aligned+0x38>
 8005694:	1a21      	subs	r1, r4, r0
 8005696:	4628      	mov	r0, r5
 8005698:	f000 fb9a 	bl	8005dd0 <_sbrk_r>
 800569c:	3001      	adds	r0, #1
 800569e:	d101      	bne.n	80056a4 <sbrk_aligned+0x38>
 80056a0:	f04f 34ff 	mov.w	r4, #4294967295
 80056a4:	4620      	mov	r0, r4
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	200003b0 	.word	0x200003b0

080056ac <_malloc_r>:
 80056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b0:	1ccd      	adds	r5, r1, #3
 80056b2:	f025 0503 	bic.w	r5, r5, #3
 80056b6:	3508      	adds	r5, #8
 80056b8:	2d0c      	cmp	r5, #12
 80056ba:	bf38      	it	cc
 80056bc:	250c      	movcc	r5, #12
 80056be:	2d00      	cmp	r5, #0
 80056c0:	4607      	mov	r7, r0
 80056c2:	db01      	blt.n	80056c8 <_malloc_r+0x1c>
 80056c4:	42a9      	cmp	r1, r5
 80056c6:	d905      	bls.n	80056d4 <_malloc_r+0x28>
 80056c8:	230c      	movs	r3, #12
 80056ca:	2600      	movs	r6, #0
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	4630      	mov	r0, r6
 80056d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057a8 <_malloc_r+0xfc>
 80056d8:	f000 f868 	bl	80057ac <__malloc_lock>
 80056dc:	f8d8 3000 	ldr.w	r3, [r8]
 80056e0:	461c      	mov	r4, r3
 80056e2:	bb5c      	cbnz	r4, 800573c <_malloc_r+0x90>
 80056e4:	4629      	mov	r1, r5
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7ff ffc0 	bl	800566c <sbrk_aligned>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	4604      	mov	r4, r0
 80056f0:	d155      	bne.n	800579e <_malloc_r+0xf2>
 80056f2:	f8d8 4000 	ldr.w	r4, [r8]
 80056f6:	4626      	mov	r6, r4
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	d145      	bne.n	8005788 <_malloc_r+0xdc>
 80056fc:	2c00      	cmp	r4, #0
 80056fe:	d048      	beq.n	8005792 <_malloc_r+0xe6>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	4631      	mov	r1, r6
 8005704:	4638      	mov	r0, r7
 8005706:	eb04 0903 	add.w	r9, r4, r3
 800570a:	f000 fb61 	bl	8005dd0 <_sbrk_r>
 800570e:	4581      	cmp	r9, r0
 8005710:	d13f      	bne.n	8005792 <_malloc_r+0xe6>
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	4638      	mov	r0, r7
 8005716:	1a6d      	subs	r5, r5, r1
 8005718:	4629      	mov	r1, r5
 800571a:	f7ff ffa7 	bl	800566c <sbrk_aligned>
 800571e:	3001      	adds	r0, #1
 8005720:	d037      	beq.n	8005792 <_malloc_r+0xe6>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	442b      	add	r3, r5
 8005726:	6023      	str	r3, [r4, #0]
 8005728:	f8d8 3000 	ldr.w	r3, [r8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d038      	beq.n	80057a2 <_malloc_r+0xf6>
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	42a2      	cmp	r2, r4
 8005734:	d12b      	bne.n	800578e <_malloc_r+0xe2>
 8005736:	2200      	movs	r2, #0
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	e00f      	b.n	800575c <_malloc_r+0xb0>
 800573c:	6822      	ldr	r2, [r4, #0]
 800573e:	1b52      	subs	r2, r2, r5
 8005740:	d41f      	bmi.n	8005782 <_malloc_r+0xd6>
 8005742:	2a0b      	cmp	r2, #11
 8005744:	d917      	bls.n	8005776 <_malloc_r+0xca>
 8005746:	1961      	adds	r1, r4, r5
 8005748:	42a3      	cmp	r3, r4
 800574a:	6025      	str	r5, [r4, #0]
 800574c:	bf18      	it	ne
 800574e:	6059      	strne	r1, [r3, #4]
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	bf08      	it	eq
 8005754:	f8c8 1000 	streq.w	r1, [r8]
 8005758:	5162      	str	r2, [r4, r5]
 800575a:	604b      	str	r3, [r1, #4]
 800575c:	4638      	mov	r0, r7
 800575e:	f104 060b 	add.w	r6, r4, #11
 8005762:	f000 f829 	bl	80057b8 <__malloc_unlock>
 8005766:	f026 0607 	bic.w	r6, r6, #7
 800576a:	1d23      	adds	r3, r4, #4
 800576c:	1af2      	subs	r2, r6, r3
 800576e:	d0ae      	beq.n	80056ce <_malloc_r+0x22>
 8005770:	1b9b      	subs	r3, r3, r6
 8005772:	50a3      	str	r3, [r4, r2]
 8005774:	e7ab      	b.n	80056ce <_malloc_r+0x22>
 8005776:	42a3      	cmp	r3, r4
 8005778:	6862      	ldr	r2, [r4, #4]
 800577a:	d1dd      	bne.n	8005738 <_malloc_r+0x8c>
 800577c:	f8c8 2000 	str.w	r2, [r8]
 8005780:	e7ec      	b.n	800575c <_malloc_r+0xb0>
 8005782:	4623      	mov	r3, r4
 8005784:	6864      	ldr	r4, [r4, #4]
 8005786:	e7ac      	b.n	80056e2 <_malloc_r+0x36>
 8005788:	4634      	mov	r4, r6
 800578a:	6876      	ldr	r6, [r6, #4]
 800578c:	e7b4      	b.n	80056f8 <_malloc_r+0x4c>
 800578e:	4613      	mov	r3, r2
 8005790:	e7cc      	b.n	800572c <_malloc_r+0x80>
 8005792:	230c      	movs	r3, #12
 8005794:	4638      	mov	r0, r7
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	f000 f80e 	bl	80057b8 <__malloc_unlock>
 800579c:	e797      	b.n	80056ce <_malloc_r+0x22>
 800579e:	6025      	str	r5, [r4, #0]
 80057a0:	e7dc      	b.n	800575c <_malloc_r+0xb0>
 80057a2:	605b      	str	r3, [r3, #4]
 80057a4:	deff      	udf	#255	; 0xff
 80057a6:	bf00      	nop
 80057a8:	200003ac 	.word	0x200003ac

080057ac <__malloc_lock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_lock+0x8>)
 80057ae:	f7ff bf13 	b.w	80055d8 <__retarget_lock_acquire_recursive>
 80057b2:	bf00      	nop
 80057b4:	200003a8 	.word	0x200003a8

080057b8 <__malloc_unlock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_unlock+0x8>)
 80057ba:	f7ff bf0e 	b.w	80055da <__retarget_lock_release_recursive>
 80057be:	bf00      	nop
 80057c0:	200003a8 	.word	0x200003a8

080057c4 <__ssputs_r>:
 80057c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	461f      	mov	r7, r3
 80057ca:	688e      	ldr	r6, [r1, #8]
 80057cc:	4682      	mov	sl, r0
 80057ce:	42be      	cmp	r6, r7
 80057d0:	460c      	mov	r4, r1
 80057d2:	4690      	mov	r8, r2
 80057d4:	680b      	ldr	r3, [r1, #0]
 80057d6:	d82c      	bhi.n	8005832 <__ssputs_r+0x6e>
 80057d8:	898a      	ldrh	r2, [r1, #12]
 80057da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057de:	d026      	beq.n	800582e <__ssputs_r+0x6a>
 80057e0:	6965      	ldr	r5, [r4, #20]
 80057e2:	6909      	ldr	r1, [r1, #16]
 80057e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057e8:	eba3 0901 	sub.w	r9, r3, r1
 80057ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057f0:	1c7b      	adds	r3, r7, #1
 80057f2:	444b      	add	r3, r9
 80057f4:	106d      	asrs	r5, r5, #1
 80057f6:	429d      	cmp	r5, r3
 80057f8:	bf38      	it	cc
 80057fa:	461d      	movcc	r5, r3
 80057fc:	0553      	lsls	r3, r2, #21
 80057fe:	d527      	bpl.n	8005850 <__ssputs_r+0x8c>
 8005800:	4629      	mov	r1, r5
 8005802:	f7ff ff53 	bl	80056ac <_malloc_r>
 8005806:	4606      	mov	r6, r0
 8005808:	b360      	cbz	r0, 8005864 <__ssputs_r+0xa0>
 800580a:	464a      	mov	r2, r9
 800580c:	6921      	ldr	r1, [r4, #16]
 800580e:	f000 fafd 	bl	8005e0c <memcpy>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	6126      	str	r6, [r4, #16]
 8005820:	444e      	add	r6, r9
 8005822:	6026      	str	r6, [r4, #0]
 8005824:	463e      	mov	r6, r7
 8005826:	6165      	str	r5, [r4, #20]
 8005828:	eba5 0509 	sub.w	r5, r5, r9
 800582c:	60a5      	str	r5, [r4, #8]
 800582e:	42be      	cmp	r6, r7
 8005830:	d900      	bls.n	8005834 <__ssputs_r+0x70>
 8005832:	463e      	mov	r6, r7
 8005834:	4632      	mov	r2, r6
 8005836:	4641      	mov	r1, r8
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	f000 faaf 	bl	8005d9c <memmove>
 800583e:	2000      	movs	r0, #0
 8005840:	68a3      	ldr	r3, [r4, #8]
 8005842:	1b9b      	subs	r3, r3, r6
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	4433      	add	r3, r6
 800584a:	6023      	str	r3, [r4, #0]
 800584c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005850:	462a      	mov	r2, r5
 8005852:	f000 fae9 	bl	8005e28 <_realloc_r>
 8005856:	4606      	mov	r6, r0
 8005858:	2800      	cmp	r0, #0
 800585a:	d1e0      	bne.n	800581e <__ssputs_r+0x5a>
 800585c:	4650      	mov	r0, sl
 800585e:	6921      	ldr	r1, [r4, #16]
 8005860:	f7ff febc 	bl	80055dc <_free_r>
 8005864:	230c      	movs	r3, #12
 8005866:	f8ca 3000 	str.w	r3, [sl]
 800586a:	89a3      	ldrh	r3, [r4, #12]
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	e7e9      	b.n	800584c <__ssputs_r+0x88>

08005878 <_svfiprintf_r>:
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	4698      	mov	r8, r3
 800587e:	898b      	ldrh	r3, [r1, #12]
 8005880:	4607      	mov	r7, r0
 8005882:	061b      	lsls	r3, r3, #24
 8005884:	460d      	mov	r5, r1
 8005886:	4614      	mov	r4, r2
 8005888:	b09d      	sub	sp, #116	; 0x74
 800588a:	d50e      	bpl.n	80058aa <_svfiprintf_r+0x32>
 800588c:	690b      	ldr	r3, [r1, #16]
 800588e:	b963      	cbnz	r3, 80058aa <_svfiprintf_r+0x32>
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	f7ff ff0b 	bl	80056ac <_malloc_r>
 8005896:	6028      	str	r0, [r5, #0]
 8005898:	6128      	str	r0, [r5, #16]
 800589a:	b920      	cbnz	r0, 80058a6 <_svfiprintf_r+0x2e>
 800589c:	230c      	movs	r3, #12
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	e0d0      	b.n	8005a48 <_svfiprintf_r+0x1d0>
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	616b      	str	r3, [r5, #20]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9309      	str	r3, [sp, #36]	; 0x24
 80058ae:	2320      	movs	r3, #32
 80058b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058b4:	2330      	movs	r3, #48	; 0x30
 80058b6:	f04f 0901 	mov.w	r9, #1
 80058ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80058be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005a60 <_svfiprintf_r+0x1e8>
 80058c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058c6:	4623      	mov	r3, r4
 80058c8:	469a      	mov	sl, r3
 80058ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ce:	b10a      	cbz	r2, 80058d4 <_svfiprintf_r+0x5c>
 80058d0:	2a25      	cmp	r2, #37	; 0x25
 80058d2:	d1f9      	bne.n	80058c8 <_svfiprintf_r+0x50>
 80058d4:	ebba 0b04 	subs.w	fp, sl, r4
 80058d8:	d00b      	beq.n	80058f2 <_svfiprintf_r+0x7a>
 80058da:	465b      	mov	r3, fp
 80058dc:	4622      	mov	r2, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ff6f 	bl	80057c4 <__ssputs_r>
 80058e6:	3001      	adds	r0, #1
 80058e8:	f000 80a9 	beq.w	8005a3e <_svfiprintf_r+0x1c6>
 80058ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ee:	445a      	add	r2, fp
 80058f0:	9209      	str	r2, [sp, #36]	; 0x24
 80058f2:	f89a 3000 	ldrb.w	r3, [sl]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80a1 	beq.w	8005a3e <_svfiprintf_r+0x1c6>
 80058fc:	2300      	movs	r3, #0
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005906:	f10a 0a01 	add.w	sl, sl, #1
 800590a:	9304      	str	r3, [sp, #16]
 800590c:	9307      	str	r3, [sp, #28]
 800590e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005912:	931a      	str	r3, [sp, #104]	; 0x68
 8005914:	4654      	mov	r4, sl
 8005916:	2205      	movs	r2, #5
 8005918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591c:	4850      	ldr	r0, [pc, #320]	; (8005a60 <_svfiprintf_r+0x1e8>)
 800591e:	f000 fa67 	bl	8005df0 <memchr>
 8005922:	9a04      	ldr	r2, [sp, #16]
 8005924:	b9d8      	cbnz	r0, 800595e <_svfiprintf_r+0xe6>
 8005926:	06d0      	lsls	r0, r2, #27
 8005928:	bf44      	itt	mi
 800592a:	2320      	movmi	r3, #32
 800592c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005930:	0711      	lsls	r1, r2, #28
 8005932:	bf44      	itt	mi
 8005934:	232b      	movmi	r3, #43	; 0x2b
 8005936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800593a:	f89a 3000 	ldrb.w	r3, [sl]
 800593e:	2b2a      	cmp	r3, #42	; 0x2a
 8005940:	d015      	beq.n	800596e <_svfiprintf_r+0xf6>
 8005942:	4654      	mov	r4, sl
 8005944:	2000      	movs	r0, #0
 8005946:	f04f 0c0a 	mov.w	ip, #10
 800594a:	9a07      	ldr	r2, [sp, #28]
 800594c:	4621      	mov	r1, r4
 800594e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005952:	3b30      	subs	r3, #48	; 0x30
 8005954:	2b09      	cmp	r3, #9
 8005956:	d94d      	bls.n	80059f4 <_svfiprintf_r+0x17c>
 8005958:	b1b0      	cbz	r0, 8005988 <_svfiprintf_r+0x110>
 800595a:	9207      	str	r2, [sp, #28]
 800595c:	e014      	b.n	8005988 <_svfiprintf_r+0x110>
 800595e:	eba0 0308 	sub.w	r3, r0, r8
 8005962:	fa09 f303 	lsl.w	r3, r9, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	46a2      	mov	sl, r4
 800596a:	9304      	str	r3, [sp, #16]
 800596c:	e7d2      	b.n	8005914 <_svfiprintf_r+0x9c>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	9103      	str	r1, [sp, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	bfbb      	ittet	lt
 800597a:	425b      	neglt	r3, r3
 800597c:	f042 0202 	orrlt.w	r2, r2, #2
 8005980:	9307      	strge	r3, [sp, #28]
 8005982:	9307      	strlt	r3, [sp, #28]
 8005984:	bfb8      	it	lt
 8005986:	9204      	strlt	r2, [sp, #16]
 8005988:	7823      	ldrb	r3, [r4, #0]
 800598a:	2b2e      	cmp	r3, #46	; 0x2e
 800598c:	d10c      	bne.n	80059a8 <_svfiprintf_r+0x130>
 800598e:	7863      	ldrb	r3, [r4, #1]
 8005990:	2b2a      	cmp	r3, #42	; 0x2a
 8005992:	d134      	bne.n	80059fe <_svfiprintf_r+0x186>
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	3402      	adds	r4, #2
 8005998:	1d1a      	adds	r2, r3, #4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	9203      	str	r2, [sp, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfb8      	it	lt
 80059a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80059a6:	9305      	str	r3, [sp, #20]
 80059a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005a64 <_svfiprintf_r+0x1ec>
 80059ac:	2203      	movs	r2, #3
 80059ae:	4650      	mov	r0, sl
 80059b0:	7821      	ldrb	r1, [r4, #0]
 80059b2:	f000 fa1d 	bl	8005df0 <memchr>
 80059b6:	b138      	cbz	r0, 80059c8 <_svfiprintf_r+0x150>
 80059b8:	2240      	movs	r2, #64	; 0x40
 80059ba:	9b04      	ldr	r3, [sp, #16]
 80059bc:	eba0 000a 	sub.w	r0, r0, sl
 80059c0:	4082      	lsls	r2, r0
 80059c2:	4313      	orrs	r3, r2
 80059c4:	3401      	adds	r4, #1
 80059c6:	9304      	str	r3, [sp, #16]
 80059c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059cc:	2206      	movs	r2, #6
 80059ce:	4826      	ldr	r0, [pc, #152]	; (8005a68 <_svfiprintf_r+0x1f0>)
 80059d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059d4:	f000 fa0c 	bl	8005df0 <memchr>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d038      	beq.n	8005a4e <_svfiprintf_r+0x1d6>
 80059dc:	4b23      	ldr	r3, [pc, #140]	; (8005a6c <_svfiprintf_r+0x1f4>)
 80059de:	bb1b      	cbnz	r3, 8005a28 <_svfiprintf_r+0x1b0>
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	3307      	adds	r3, #7
 80059e4:	f023 0307 	bic.w	r3, r3, #7
 80059e8:	3308      	adds	r3, #8
 80059ea:	9303      	str	r3, [sp, #12]
 80059ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ee:	4433      	add	r3, r6
 80059f0:	9309      	str	r3, [sp, #36]	; 0x24
 80059f2:	e768      	b.n	80058c6 <_svfiprintf_r+0x4e>
 80059f4:	460c      	mov	r4, r1
 80059f6:	2001      	movs	r0, #1
 80059f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059fc:	e7a6      	b.n	800594c <_svfiprintf_r+0xd4>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f04f 0c0a 	mov.w	ip, #10
 8005a04:	4619      	mov	r1, r3
 8005a06:	3401      	adds	r4, #1
 8005a08:	9305      	str	r3, [sp, #20]
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a10:	3a30      	subs	r2, #48	; 0x30
 8005a12:	2a09      	cmp	r2, #9
 8005a14:	d903      	bls.n	8005a1e <_svfiprintf_r+0x1a6>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0c6      	beq.n	80059a8 <_svfiprintf_r+0x130>
 8005a1a:	9105      	str	r1, [sp, #20]
 8005a1c:	e7c4      	b.n	80059a8 <_svfiprintf_r+0x130>
 8005a1e:	4604      	mov	r4, r0
 8005a20:	2301      	movs	r3, #1
 8005a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a26:	e7f0      	b.n	8005a0a <_svfiprintf_r+0x192>
 8005a28:	ab03      	add	r3, sp, #12
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	462a      	mov	r2, r5
 8005a2e:	4638      	mov	r0, r7
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <_svfiprintf_r+0x1f8>)
 8005a32:	a904      	add	r1, sp, #16
 8005a34:	f3af 8000 	nop.w
 8005a38:	1c42      	adds	r2, r0, #1
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	d1d6      	bne.n	80059ec <_svfiprintf_r+0x174>
 8005a3e:	89ab      	ldrh	r3, [r5, #12]
 8005a40:	065b      	lsls	r3, r3, #25
 8005a42:	f53f af2d 	bmi.w	80058a0 <_svfiprintf_r+0x28>
 8005a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a48:	b01d      	add	sp, #116	; 0x74
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	ab03      	add	r3, sp, #12
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	462a      	mov	r2, r5
 8005a54:	4638      	mov	r0, r7
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <_svfiprintf_r+0x1f8>)
 8005a58:	a904      	add	r1, sp, #16
 8005a5a:	f000 f87d 	bl	8005b58 <_printf_i>
 8005a5e:	e7eb      	b.n	8005a38 <_svfiprintf_r+0x1c0>
 8005a60:	08005f2e 	.word	0x08005f2e
 8005a64:	08005f34 	.word	0x08005f34
 8005a68:	08005f38 	.word	0x08005f38
 8005a6c:	00000000 	.word	0x00000000
 8005a70:	080057c5 	.word	0x080057c5

08005a74 <_printf_common>:
 8005a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	4616      	mov	r6, r2
 8005a7a:	4699      	mov	r9, r3
 8005a7c:	688a      	ldr	r2, [r1, #8]
 8005a7e:	690b      	ldr	r3, [r1, #16]
 8005a80:	4607      	mov	r7, r0
 8005a82:	4293      	cmp	r3, r2
 8005a84:	bfb8      	it	lt
 8005a86:	4613      	movlt	r3, r2
 8005a88:	6033      	str	r3, [r6, #0]
 8005a8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a8e:	460c      	mov	r4, r1
 8005a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a94:	b10a      	cbz	r2, 8005a9a <_printf_common+0x26>
 8005a96:	3301      	adds	r3, #1
 8005a98:	6033      	str	r3, [r6, #0]
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	0699      	lsls	r1, r3, #26
 8005a9e:	bf42      	ittt	mi
 8005aa0:	6833      	ldrmi	r3, [r6, #0]
 8005aa2:	3302      	addmi	r3, #2
 8005aa4:	6033      	strmi	r3, [r6, #0]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	f015 0506 	ands.w	r5, r5, #6
 8005aac:	d106      	bne.n	8005abc <_printf_common+0x48>
 8005aae:	f104 0a19 	add.w	sl, r4, #25
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	6832      	ldr	r2, [r6, #0]
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	dc2b      	bgt.n	8005b14 <_printf_common+0xa0>
 8005abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ac0:	1e13      	subs	r3, r2, #0
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	bf18      	it	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	0692      	lsls	r2, r2, #26
 8005aca:	d430      	bmi.n	8005b2e <_printf_common+0xba>
 8005acc:	4649      	mov	r1, r9
 8005ace:	4638      	mov	r0, r7
 8005ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad4:	47c0      	blx	r8
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d023      	beq.n	8005b22 <_printf_common+0xae>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	6922      	ldr	r2, [r4, #16]
 8005ade:	f003 0306 	and.w	r3, r3, #6
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	bf14      	ite	ne
 8005ae6:	2500      	movne	r5, #0
 8005ae8:	6833      	ldreq	r3, [r6, #0]
 8005aea:	f04f 0600 	mov.w	r6, #0
 8005aee:	bf08      	it	eq
 8005af0:	68e5      	ldreq	r5, [r4, #12]
 8005af2:	f104 041a 	add.w	r4, r4, #26
 8005af6:	bf08      	it	eq
 8005af8:	1aed      	subeq	r5, r5, r3
 8005afa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005afe:	bf08      	it	eq
 8005b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bfc4      	itt	gt
 8005b08:	1a9b      	subgt	r3, r3, r2
 8005b0a:	18ed      	addgt	r5, r5, r3
 8005b0c:	42b5      	cmp	r5, r6
 8005b0e:	d11a      	bne.n	8005b46 <_printf_common+0xd2>
 8005b10:	2000      	movs	r0, #0
 8005b12:	e008      	b.n	8005b26 <_printf_common+0xb2>
 8005b14:	2301      	movs	r3, #1
 8005b16:	4652      	mov	r2, sl
 8005b18:	4649      	mov	r1, r9
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	47c0      	blx	r8
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d103      	bne.n	8005b2a <_printf_common+0xb6>
 8005b22:	f04f 30ff 	mov.w	r0, #4294967295
 8005b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2a:	3501      	adds	r5, #1
 8005b2c:	e7c1      	b.n	8005ab2 <_printf_common+0x3e>
 8005b2e:	2030      	movs	r0, #48	; 0x30
 8005b30:	18e1      	adds	r1, r4, r3
 8005b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b3c:	4422      	add	r2, r4
 8005b3e:	3302      	adds	r3, #2
 8005b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b44:	e7c2      	b.n	8005acc <_printf_common+0x58>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4622      	mov	r2, r4
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	47c0      	blx	r8
 8005b50:	3001      	adds	r0, #1
 8005b52:	d0e6      	beq.n	8005b22 <_printf_common+0xae>
 8005b54:	3601      	adds	r6, #1
 8005b56:	e7d9      	b.n	8005b0c <_printf_common+0x98>

08005b58 <_printf_i>:
 8005b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b5c:	7e0f      	ldrb	r7, [r1, #24]
 8005b5e:	4691      	mov	r9, r2
 8005b60:	2f78      	cmp	r7, #120	; 0x78
 8005b62:	4680      	mov	r8, r0
 8005b64:	460c      	mov	r4, r1
 8005b66:	469a      	mov	sl, r3
 8005b68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b6e:	d807      	bhi.n	8005b80 <_printf_i+0x28>
 8005b70:	2f62      	cmp	r7, #98	; 0x62
 8005b72:	d80a      	bhi.n	8005b8a <_printf_i+0x32>
 8005b74:	2f00      	cmp	r7, #0
 8005b76:	f000 80d5 	beq.w	8005d24 <_printf_i+0x1cc>
 8005b7a:	2f58      	cmp	r7, #88	; 0x58
 8005b7c:	f000 80c1 	beq.w	8005d02 <_printf_i+0x1aa>
 8005b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b88:	e03a      	b.n	8005c00 <_printf_i+0xa8>
 8005b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b8e:	2b15      	cmp	r3, #21
 8005b90:	d8f6      	bhi.n	8005b80 <_printf_i+0x28>
 8005b92:	a101      	add	r1, pc, #4	; (adr r1, 8005b98 <_printf_i+0x40>)
 8005b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b98:	08005bf1 	.word	0x08005bf1
 8005b9c:	08005c05 	.word	0x08005c05
 8005ba0:	08005b81 	.word	0x08005b81
 8005ba4:	08005b81 	.word	0x08005b81
 8005ba8:	08005b81 	.word	0x08005b81
 8005bac:	08005b81 	.word	0x08005b81
 8005bb0:	08005c05 	.word	0x08005c05
 8005bb4:	08005b81 	.word	0x08005b81
 8005bb8:	08005b81 	.word	0x08005b81
 8005bbc:	08005b81 	.word	0x08005b81
 8005bc0:	08005b81 	.word	0x08005b81
 8005bc4:	08005d0b 	.word	0x08005d0b
 8005bc8:	08005c31 	.word	0x08005c31
 8005bcc:	08005cc5 	.word	0x08005cc5
 8005bd0:	08005b81 	.word	0x08005b81
 8005bd4:	08005b81 	.word	0x08005b81
 8005bd8:	08005d2d 	.word	0x08005d2d
 8005bdc:	08005b81 	.word	0x08005b81
 8005be0:	08005c31 	.word	0x08005c31
 8005be4:	08005b81 	.word	0x08005b81
 8005be8:	08005b81 	.word	0x08005b81
 8005bec:	08005ccd 	.word	0x08005ccd
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	1d1a      	adds	r2, r3, #4
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	602a      	str	r2, [r5, #0]
 8005bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0a0      	b.n	8005d46 <_printf_i+0x1ee>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	682b      	ldr	r3, [r5, #0]
 8005c08:	0607      	lsls	r7, r0, #24
 8005c0a:	f103 0104 	add.w	r1, r3, #4
 8005c0e:	6029      	str	r1, [r5, #0]
 8005c10:	d501      	bpl.n	8005c16 <_printf_i+0xbe>
 8005c12:	681e      	ldr	r6, [r3, #0]
 8005c14:	e003      	b.n	8005c1e <_printf_i+0xc6>
 8005c16:	0646      	lsls	r6, r0, #25
 8005c18:	d5fb      	bpl.n	8005c12 <_printf_i+0xba>
 8005c1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	da03      	bge.n	8005c2a <_printf_i+0xd2>
 8005c22:	232d      	movs	r3, #45	; 0x2d
 8005c24:	4276      	negs	r6, r6
 8005c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	4859      	ldr	r0, [pc, #356]	; (8005d94 <_printf_i+0x23c>)
 8005c2e:	e012      	b.n	8005c56 <_printf_i+0xfe>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	6820      	ldr	r0, [r4, #0]
 8005c34:	1d19      	adds	r1, r3, #4
 8005c36:	6029      	str	r1, [r5, #0]
 8005c38:	0605      	lsls	r5, r0, #24
 8005c3a:	d501      	bpl.n	8005c40 <_printf_i+0xe8>
 8005c3c:	681e      	ldr	r6, [r3, #0]
 8005c3e:	e002      	b.n	8005c46 <_printf_i+0xee>
 8005c40:	0641      	lsls	r1, r0, #25
 8005c42:	d5fb      	bpl.n	8005c3c <_printf_i+0xe4>
 8005c44:	881e      	ldrh	r6, [r3, #0]
 8005c46:	2f6f      	cmp	r7, #111	; 0x6f
 8005c48:	bf0c      	ite	eq
 8005c4a:	2308      	moveq	r3, #8
 8005c4c:	230a      	movne	r3, #10
 8005c4e:	4851      	ldr	r0, [pc, #324]	; (8005d94 <_printf_i+0x23c>)
 8005c50:	2100      	movs	r1, #0
 8005c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c56:	6865      	ldr	r5, [r4, #4]
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	bfa8      	it	ge
 8005c5c:	6821      	ldrge	r1, [r4, #0]
 8005c5e:	60a5      	str	r5, [r4, #8]
 8005c60:	bfa4      	itt	ge
 8005c62:	f021 0104 	bicge.w	r1, r1, #4
 8005c66:	6021      	strge	r1, [r4, #0]
 8005c68:	b90e      	cbnz	r6, 8005c6e <_printf_i+0x116>
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	d04b      	beq.n	8005d06 <_printf_i+0x1ae>
 8005c6e:	4615      	mov	r5, r2
 8005c70:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c74:	fb03 6711 	mls	r7, r3, r1, r6
 8005c78:	5dc7      	ldrb	r7, [r0, r7]
 8005c7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c7e:	4637      	mov	r7, r6
 8005c80:	42bb      	cmp	r3, r7
 8005c82:	460e      	mov	r6, r1
 8005c84:	d9f4      	bls.n	8005c70 <_printf_i+0x118>
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d10b      	bne.n	8005ca2 <_printf_i+0x14a>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	07de      	lsls	r6, r3, #31
 8005c8e:	d508      	bpl.n	8005ca2 <_printf_i+0x14a>
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	6861      	ldr	r1, [r4, #4]
 8005c94:	4299      	cmp	r1, r3
 8005c96:	bfde      	ittt	le
 8005c98:	2330      	movle	r3, #48	; 0x30
 8005c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ca2:	1b52      	subs	r2, r2, r5
 8005ca4:	6122      	str	r2, [r4, #16]
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4640      	mov	r0, r8
 8005cac:	f8cd a000 	str.w	sl, [sp]
 8005cb0:	aa03      	add	r2, sp, #12
 8005cb2:	f7ff fedf 	bl	8005a74 <_printf_common>
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d14a      	bne.n	8005d50 <_printf_i+0x1f8>
 8005cba:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbe:	b004      	add	sp, #16
 8005cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	f043 0320 	orr.w	r3, r3, #32
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	2778      	movs	r7, #120	; 0x78
 8005cce:	4832      	ldr	r0, [pc, #200]	; (8005d98 <_printf_i+0x240>)
 8005cd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	6829      	ldr	r1, [r5, #0]
 8005cd8:	061f      	lsls	r7, r3, #24
 8005cda:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cde:	d402      	bmi.n	8005ce6 <_printf_i+0x18e>
 8005ce0:	065f      	lsls	r7, r3, #25
 8005ce2:	bf48      	it	mi
 8005ce4:	b2b6      	uxthmi	r6, r6
 8005ce6:	07df      	lsls	r7, r3, #31
 8005ce8:	bf48      	it	mi
 8005cea:	f043 0320 	orrmi.w	r3, r3, #32
 8005cee:	6029      	str	r1, [r5, #0]
 8005cf0:	bf48      	it	mi
 8005cf2:	6023      	strmi	r3, [r4, #0]
 8005cf4:	b91e      	cbnz	r6, 8005cfe <_printf_i+0x1a6>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	f023 0320 	bic.w	r3, r3, #32
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	2310      	movs	r3, #16
 8005d00:	e7a6      	b.n	8005c50 <_printf_i+0xf8>
 8005d02:	4824      	ldr	r0, [pc, #144]	; (8005d94 <_printf_i+0x23c>)
 8005d04:	e7e4      	b.n	8005cd0 <_printf_i+0x178>
 8005d06:	4615      	mov	r5, r2
 8005d08:	e7bd      	b.n	8005c86 <_printf_i+0x12e>
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	6826      	ldr	r6, [r4, #0]
 8005d0e:	1d18      	adds	r0, r3, #4
 8005d10:	6961      	ldr	r1, [r4, #20]
 8005d12:	6028      	str	r0, [r5, #0]
 8005d14:	0635      	lsls	r5, r6, #24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	d501      	bpl.n	8005d1e <_printf_i+0x1c6>
 8005d1a:	6019      	str	r1, [r3, #0]
 8005d1c:	e002      	b.n	8005d24 <_printf_i+0x1cc>
 8005d1e:	0670      	lsls	r0, r6, #25
 8005d20:	d5fb      	bpl.n	8005d1a <_printf_i+0x1c2>
 8005d22:	8019      	strh	r1, [r3, #0]
 8005d24:	2300      	movs	r3, #0
 8005d26:	4615      	mov	r5, r2
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	e7bc      	b.n	8005ca6 <_printf_i+0x14e>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	2100      	movs	r1, #0
 8005d30:	1d1a      	adds	r2, r3, #4
 8005d32:	602a      	str	r2, [r5, #0]
 8005d34:	681d      	ldr	r5, [r3, #0]
 8005d36:	6862      	ldr	r2, [r4, #4]
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 f859 	bl	8005df0 <memchr>
 8005d3e:	b108      	cbz	r0, 8005d44 <_printf_i+0x1ec>
 8005d40:	1b40      	subs	r0, r0, r5
 8005d42:	6060      	str	r0, [r4, #4]
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4e:	e7aa      	b.n	8005ca6 <_printf_i+0x14e>
 8005d50:	462a      	mov	r2, r5
 8005d52:	4649      	mov	r1, r9
 8005d54:	4640      	mov	r0, r8
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	47d0      	blx	sl
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d0ad      	beq.n	8005cba <_printf_i+0x162>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	079b      	lsls	r3, r3, #30
 8005d62:	d413      	bmi.n	8005d8c <_printf_i+0x234>
 8005d64:	68e0      	ldr	r0, [r4, #12]
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	4298      	cmp	r0, r3
 8005d6a:	bfb8      	it	lt
 8005d6c:	4618      	movlt	r0, r3
 8005d6e:	e7a6      	b.n	8005cbe <_printf_i+0x166>
 8005d70:	2301      	movs	r3, #1
 8005d72:	4632      	mov	r2, r6
 8005d74:	4649      	mov	r1, r9
 8005d76:	4640      	mov	r0, r8
 8005d78:	47d0      	blx	sl
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d09d      	beq.n	8005cba <_printf_i+0x162>
 8005d7e:	3501      	adds	r5, #1
 8005d80:	68e3      	ldr	r3, [r4, #12]
 8005d82:	9903      	ldr	r1, [sp, #12]
 8005d84:	1a5b      	subs	r3, r3, r1
 8005d86:	42ab      	cmp	r3, r5
 8005d88:	dcf2      	bgt.n	8005d70 <_printf_i+0x218>
 8005d8a:	e7eb      	b.n	8005d64 <_printf_i+0x20c>
 8005d8c:	2500      	movs	r5, #0
 8005d8e:	f104 0619 	add.w	r6, r4, #25
 8005d92:	e7f5      	b.n	8005d80 <_printf_i+0x228>
 8005d94:	08005f3f 	.word	0x08005f3f
 8005d98:	08005f50 	.word	0x08005f50

08005d9c <memmove>:
 8005d9c:	4288      	cmp	r0, r1
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	eb01 0402 	add.w	r4, r1, r2
 8005da4:	d902      	bls.n	8005dac <memmove+0x10>
 8005da6:	4284      	cmp	r4, r0
 8005da8:	4623      	mov	r3, r4
 8005daa:	d807      	bhi.n	8005dbc <memmove+0x20>
 8005dac:	1e43      	subs	r3, r0, #1
 8005dae:	42a1      	cmp	r1, r4
 8005db0:	d008      	beq.n	8005dc4 <memmove+0x28>
 8005db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dba:	e7f8      	b.n	8005dae <memmove+0x12>
 8005dbc:	4601      	mov	r1, r0
 8005dbe:	4402      	add	r2, r0
 8005dc0:	428a      	cmp	r2, r1
 8005dc2:	d100      	bne.n	8005dc6 <memmove+0x2a>
 8005dc4:	bd10      	pop	{r4, pc}
 8005dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dce:	e7f7      	b.n	8005dc0 <memmove+0x24>

08005dd0 <_sbrk_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	4d05      	ldr	r5, [pc, #20]	; (8005dec <_sbrk_r+0x1c>)
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	4608      	mov	r0, r1
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	f7fb f8a4 	bl	8000f28 <_sbrk>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_sbrk_r+0x1a>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_sbrk_r+0x1a>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	200003a4 	.word	0x200003a4

08005df0 <memchr>:
 8005df0:	4603      	mov	r3, r0
 8005df2:	b510      	push	{r4, lr}
 8005df4:	b2c9      	uxtb	r1, r1
 8005df6:	4402      	add	r2, r0
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	d101      	bne.n	8005e02 <memchr+0x12>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e003      	b.n	8005e0a <memchr+0x1a>
 8005e02:	7804      	ldrb	r4, [r0, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	428c      	cmp	r4, r1
 8005e08:	d1f6      	bne.n	8005df8 <memchr+0x8>
 8005e0a:	bd10      	pop	{r4, pc}

08005e0c <memcpy>:
 8005e0c:	440a      	add	r2, r1
 8005e0e:	4291      	cmp	r1, r2
 8005e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e14:	d100      	bne.n	8005e18 <memcpy+0xc>
 8005e16:	4770      	bx	lr
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e1e:	4291      	cmp	r1, r2
 8005e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e24:	d1f9      	bne.n	8005e1a <memcpy+0xe>
 8005e26:	bd10      	pop	{r4, pc}

08005e28 <_realloc_r>:
 8005e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	4614      	mov	r4, r2
 8005e30:	460e      	mov	r6, r1
 8005e32:	b921      	cbnz	r1, 8005e3e <_realloc_r+0x16>
 8005e34:	4611      	mov	r1, r2
 8005e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	f7ff bc37 	b.w	80056ac <_malloc_r>
 8005e3e:	b92a      	cbnz	r2, 8005e4c <_realloc_r+0x24>
 8005e40:	f7ff fbcc 	bl	80055dc <_free_r>
 8005e44:	4625      	mov	r5, r4
 8005e46:	4628      	mov	r0, r5
 8005e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e4c:	f000 f81b 	bl	8005e86 <_malloc_usable_size_r>
 8005e50:	4284      	cmp	r4, r0
 8005e52:	4607      	mov	r7, r0
 8005e54:	d802      	bhi.n	8005e5c <_realloc_r+0x34>
 8005e56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e5a:	d812      	bhi.n	8005e82 <_realloc_r+0x5a>
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4640      	mov	r0, r8
 8005e60:	f7ff fc24 	bl	80056ac <_malloc_r>
 8005e64:	4605      	mov	r5, r0
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d0ed      	beq.n	8005e46 <_realloc_r+0x1e>
 8005e6a:	42bc      	cmp	r4, r7
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4631      	mov	r1, r6
 8005e70:	bf28      	it	cs
 8005e72:	463a      	movcs	r2, r7
 8005e74:	f7ff ffca 	bl	8005e0c <memcpy>
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	f7ff fbae 	bl	80055dc <_free_r>
 8005e80:	e7e1      	b.n	8005e46 <_realloc_r+0x1e>
 8005e82:	4635      	mov	r5, r6
 8005e84:	e7df      	b.n	8005e46 <_realloc_r+0x1e>

08005e86 <_malloc_usable_size_r>:
 8005e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8a:	1f18      	subs	r0, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bfbc      	itt	lt
 8005e90:	580b      	ldrlt	r3, [r1, r0]
 8005e92:	18c0      	addlt	r0, r0, r3
 8005e94:	4770      	bx	lr
	...

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr
