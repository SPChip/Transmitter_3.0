
Transmitter_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002928  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad4  08002ad4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad4  08002ad4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad4  08002ad4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000064  08002b40  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08002b40  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000adbe  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001867  00000000  00000000  0002ae8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f6  00000000  00000000  0002d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016dc7  00000000  00000000  0002db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cafe  00000000  00000000  0004491d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008869b  00000000  00000000  0005141b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f8  00000000  00000000  000d9ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dcfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a1c 	.word	0x08002a1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002a1c 	.word	0x08002a1c

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	b0af      	sub	sp, #188	; 0xbc
 8000150:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fcdb 	bl	8000b0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f9f7 	bl	8000548 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 fb0d 	bl	8000778 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800015e:	f000 fae1 	bl	8000724 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8000162:	f000 fa37 	bl	80005d4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000166:	f000 fa89 	bl	800067c <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	__HAL_TIM_SET_COUNTER(&htim3, start_counter);
 800016a:	4b96      	ldr	r3, [pc, #600]	; (80003c4 <main+0x278>)
 800016c:	881a      	ldrh	r2, [r3, #0]
 800016e:	4b96      	ldr	r3, [pc, #600]	; (80003c8 <main+0x27c>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000174:	213c      	movs	r1, #60	; 0x3c
 8000176:	4894      	ldr	r0, [pc, #592]	; (80003c8 <main+0x27c>)
 8000178:	f001 fc5c 	bl	8001a34 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim4, start_counter);
 800017c:	4b91      	ldr	r3, [pc, #580]	; (80003c4 <main+0x278>)
 800017e:	881a      	ldrh	r2, [r3, #0]
 8000180:	4b92      	ldr	r3, [pc, #584]	; (80003cc <main+0x280>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000186:	213c      	movs	r1, #60	; 0x3c
 8000188:	4890      	ldr	r0, [pc, #576]	; (80003cc <main+0x280>)
 800018a:	f001 fc53 	bl	8001a34 <HAL_TIM_Encoder_Start>
	uint8_t message[50] = { '\0' };
 800018e:	2300      	movs	r3, #0
 8000190:	633b      	str	r3, [r7, #48]	; 0x30
 8000192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000196:	222e      	movs	r2, #46	; 0x2e
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f001 ffac 	bl	80020f8 <memset>
	transmit_data[4] = 127;
 80001a0:	4b8b      	ldr	r3, [pc, #556]	; (80003d0 <main+0x284>)
 80001a2:	227f      	movs	r2, #127	; 0x7f
 80001a4:	711a      	strb	r2, [r3, #4]
	transmit_data[5] = 127;
 80001a6:	4b8a      	ldr	r3, [pc, #552]	; (80003d0 <main+0x284>)
 80001a8:	227f      	movs	r2, #127	; 0x7f
 80001aa:	715a      	strb	r2, [r3, #5]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//обработка энкодера 1
		cur_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80001ac:	4b86      	ldr	r3, [pc, #536]	; (80003c8 <main+0x27c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001b2:	b29a      	uxth	r2, r3
 80001b4:	4b87      	ldr	r3, [pc, #540]	; (80003d4 <main+0x288>)
 80001b6:	801a      	strh	r2, [r3, #0]
		if (cur_counter != prev_counter) {
 80001b8:	4b86      	ldr	r3, [pc, #536]	; (80003d4 <main+0x288>)
 80001ba:	881a      	ldrh	r2, [r3, #0]
 80001bc:	4b86      	ldr	r3, [pc, #536]	; (80003d8 <main+0x28c>)
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d026      	beq.n	8000212 <main+0xc6>
			if (cur_counter > prev_counter) {
 80001c4:	4b83      	ldr	r3, [pc, #524]	; (80003d4 <main+0x288>)
 80001c6:	881a      	ldrh	r2, [r3, #0]
 80001c8:	4b83      	ldr	r3, [pc, #524]	; (80003d8 <main+0x28c>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d90e      	bls.n	80001ee <main+0xa2>
				if (transmit_data[4] > 251) {
 80001d0:	4b7f      	ldr	r3, [pc, #508]	; (80003d0 <main+0x284>)
 80001d2:	791b      	ldrb	r3, [r3, #4]
 80001d4:	2bfb      	cmp	r3, #251	; 0xfb
 80001d6:	d903      	bls.n	80001e0 <main+0x94>
					transmit_data[4] = 255;
 80001d8:	4b7d      	ldr	r3, [pc, #500]	; (80003d0 <main+0x284>)
 80001da:	22ff      	movs	r2, #255	; 0xff
 80001dc:	711a      	strb	r2, [r3, #4]
 80001de:	e014      	b.n	800020a <main+0xbe>
				} else {
					transmit_data[4] += 2;
 80001e0:	4b7b      	ldr	r3, [pc, #492]	; (80003d0 <main+0x284>)
 80001e2:	791b      	ldrb	r3, [r3, #4]
 80001e4:	3302      	adds	r3, #2
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	4b79      	ldr	r3, [pc, #484]	; (80003d0 <main+0x284>)
 80001ea:	711a      	strb	r2, [r3, #4]
 80001ec:	e00d      	b.n	800020a <main+0xbe>
				}
			} else {
				if (transmit_data[4] < 4) {
 80001ee:	4b78      	ldr	r3, [pc, #480]	; (80003d0 <main+0x284>)
 80001f0:	791b      	ldrb	r3, [r3, #4]
 80001f2:	2b03      	cmp	r3, #3
 80001f4:	d803      	bhi.n	80001fe <main+0xb2>
					transmit_data[4] = 0;
 80001f6:	4b76      	ldr	r3, [pc, #472]	; (80003d0 <main+0x284>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	711a      	strb	r2, [r3, #4]
 80001fc:	e005      	b.n	800020a <main+0xbe>
				} else {
					transmit_data[4] -= 2;
 80001fe:	4b74      	ldr	r3, [pc, #464]	; (80003d0 <main+0x284>)
 8000200:	791b      	ldrb	r3, [r3, #4]
 8000202:	3b02      	subs	r3, #2
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4b72      	ldr	r3, [pc, #456]	; (80003d0 <main+0x284>)
 8000208:	711a      	strb	r2, [r3, #4]
				}
			}
			prev_counter = cur_counter;
 800020a:	4b72      	ldr	r3, [pc, #456]	; (80003d4 <main+0x288>)
 800020c:	881a      	ldrh	r2, [r3, #0]
 800020e:	4b72      	ldr	r3, [pc, #456]	; (80003d8 <main+0x28c>)
 8000210:	801a      	strh	r2, [r3, #0]
		}
		//обработка энкодера 2
		cur_counter_2 = __HAL_TIM_GET_COUNTER(&htim4);
 8000212:	4b6e      	ldr	r3, [pc, #440]	; (80003cc <main+0x280>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b70      	ldr	r3, [pc, #448]	; (80003dc <main+0x290>)
 800021c:	801a      	strh	r2, [r3, #0]
		if (cur_counter_2 != prev_counter_2) {
 800021e:	4b6f      	ldr	r3, [pc, #444]	; (80003dc <main+0x290>)
 8000220:	881a      	ldrh	r2, [r3, #0]
 8000222:	4b6f      	ldr	r3, [pc, #444]	; (80003e0 <main+0x294>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	429a      	cmp	r2, r3
 8000228:	d026      	beq.n	8000278 <main+0x12c>
			if (cur_counter_2 > prev_counter_2) {
 800022a:	4b6c      	ldr	r3, [pc, #432]	; (80003dc <main+0x290>)
 800022c:	881a      	ldrh	r2, [r3, #0]
 800022e:	4b6c      	ldr	r3, [pc, #432]	; (80003e0 <main+0x294>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	d90e      	bls.n	8000254 <main+0x108>
				if (transmit_data[5] > 251) {
 8000236:	4b66      	ldr	r3, [pc, #408]	; (80003d0 <main+0x284>)
 8000238:	795b      	ldrb	r3, [r3, #5]
 800023a:	2bfb      	cmp	r3, #251	; 0xfb
 800023c:	d903      	bls.n	8000246 <main+0xfa>
					transmit_data[5] = 255;
 800023e:	4b64      	ldr	r3, [pc, #400]	; (80003d0 <main+0x284>)
 8000240:	22ff      	movs	r2, #255	; 0xff
 8000242:	715a      	strb	r2, [r3, #5]
 8000244:	e014      	b.n	8000270 <main+0x124>
				} else {
					transmit_data[5] += 2;
 8000246:	4b62      	ldr	r3, [pc, #392]	; (80003d0 <main+0x284>)
 8000248:	795b      	ldrb	r3, [r3, #5]
 800024a:	3302      	adds	r3, #2
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b60      	ldr	r3, [pc, #384]	; (80003d0 <main+0x284>)
 8000250:	715a      	strb	r2, [r3, #5]
 8000252:	e00d      	b.n	8000270 <main+0x124>
				}
			} else {
				if (transmit_data[5] < 4) {
 8000254:	4b5e      	ldr	r3, [pc, #376]	; (80003d0 <main+0x284>)
 8000256:	795b      	ldrb	r3, [r3, #5]
 8000258:	2b03      	cmp	r3, #3
 800025a:	d803      	bhi.n	8000264 <main+0x118>
					transmit_data[5] = 0;
 800025c:	4b5c      	ldr	r3, [pc, #368]	; (80003d0 <main+0x284>)
 800025e:	2200      	movs	r2, #0
 8000260:	715a      	strb	r2, [r3, #5]
 8000262:	e005      	b.n	8000270 <main+0x124>
				} else {
					transmit_data[5] -= 2;
 8000264:	4b5a      	ldr	r3, [pc, #360]	; (80003d0 <main+0x284>)
 8000266:	795b      	ldrb	r3, [r3, #5]
 8000268:	3b02      	subs	r3, #2
 800026a:	b2da      	uxtb	r2, r3
 800026c:	4b58      	ldr	r3, [pc, #352]	; (80003d0 <main+0x284>)
 800026e:	715a      	strb	r2, [r3, #5]
				}
			}
			prev_counter_2 = cur_counter_2;
 8000270:	4b5a      	ldr	r3, [pc, #360]	; (80003dc <main+0x290>)
 8000272:	881a      	ldrh	r2, [r3, #0]
 8000274:	4b5a      	ldr	r3, [pc, #360]	; (80003e0 <main+0x294>)
 8000276:	801a      	strh	r2, [r3, #0]
		}

		//обработка кнопки энкодера 1
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 8000278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027c:	4859      	ldr	r0, [pc, #356]	; (80003e4 <main+0x298>)
 800027e:	f000 ff0f 	bl	80010a0 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d002      	beq.n	800028e <main+0x142>
			key_flag = 1;
 8000288:	4b57      	ldr	r3, [pc, #348]	; (80003e8 <main+0x29c>)
 800028a:	2201      	movs	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
		}
		if (key_flag) {
 800028e:	4b56      	ldr	r3, [pc, #344]	; (80003e8 <main+0x29c>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d050      	beq.n	8000338 <main+0x1ec>
			uint32_t ms = HAL_GetTick();
 8000296:	f000 fc91 	bl	8000bbc <HAL_GetTick>
 800029a:	66f8      	str	r0, [r7, #108]	; 0x6c
			uint8_t key1_state = HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 800029c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a0:	4850      	ldr	r0, [pc, #320]	; (80003e4 <main+0x298>)
 80002a2:	f000 fefd 	bl	80010a0 <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			if (key1_state == 0 && !short_state && (ms - time_key1) > 50) {
 80002ac:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d113      	bne.n	80002dc <main+0x190>
 80002b4:	4b4d      	ldr	r3, [pc, #308]	; (80003ec <main+0x2a0>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10f      	bne.n	80002dc <main+0x190>
 80002bc:	4b4c      	ldr	r3, [pc, #304]	; (80003f0 <main+0x2a4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	2b32      	cmp	r3, #50	; 0x32
 80002c6:	d909      	bls.n	80002dc <main+0x190>
				short_state = 1;
 80002c8:	4b48      	ldr	r3, [pc, #288]	; (80003ec <main+0x2a0>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	701a      	strb	r2, [r3, #0]
				long_state = 0;
 80002ce:	4b49      	ldr	r3, [pc, #292]	; (80003f4 <main+0x2a8>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
				time_key1 = ms;
 80002d4:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <main+0x2a4>)
 80002d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80002d8:	6013      	str	r3, [r2, #0]
 80002da:	e02d      	b.n	8000338 <main+0x1ec>
			} else if (key1_state == 0 && !long_state
 80002dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10e      	bne.n	8000302 <main+0x1b6>
 80002e4:	4b43      	ldr	r3, [pc, #268]	; (80003f4 <main+0x2a8>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d10a      	bne.n	8000302 <main+0x1b6>
					&& (ms - time_key1) > 2000) {
 80002ec:	4b40      	ldr	r3, [pc, #256]	; (80003f0 <main+0x2a4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80002f2:	1ad3      	subs	r3, r2, r3
 80002f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002f8:	d903      	bls.n	8000302 <main+0x1b6>
				long_state = 1;
 80002fa:	4b3e      	ldr	r3, [pc, #248]	; (80003f4 <main+0x2a8>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	e01a      	b.n	8000338 <main+0x1ec>

			} else if (key1_state == 1 && short_state
 8000302:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000306:	2b01      	cmp	r3, #1
 8000308:	d116      	bne.n	8000338 <main+0x1ec>
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <main+0x2a0>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d012      	beq.n	8000338 <main+0x1ec>
					&& (ms - time_key1) > 50) {
 8000312:	4b37      	ldr	r3, [pc, #220]	; (80003f0 <main+0x2a4>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	2b32      	cmp	r3, #50	; 0x32
 800031c:	d90c      	bls.n	8000338 <main+0x1ec>
				short_state = 0;
 800031e:	4b33      	ldr	r3, [pc, #204]	; (80003ec <main+0x2a0>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
				time_key1 = ms;
 8000324:	4a32      	ldr	r2, [pc, #200]	; (80003f0 <main+0x2a4>)
 8000326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000328:	6013      	str	r3, [r2, #0]
				if (!long_state) {
 800032a:	4b32      	ldr	r3, [pc, #200]	; (80003f4 <main+0x2a8>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <main+0x1ec>

					transmit_data[4] = 127;
 8000332:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <main+0x284>)
 8000334:	227f      	movs	r2, #127	; 0x7f
 8000336:	711a      	strb	r2, [r3, #4]
				}
			}
		}

		//обработка кнопки энкодера 2
		if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8000338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033c:	4829      	ldr	r0, [pc, #164]	; (80003e4 <main+0x298>)
 800033e:	f000 feaf 	bl	80010a0 <HAL_GPIO_ReadPin>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d002      	beq.n	800034e <main+0x202>
			key_flag_2 = 1;
 8000348:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <main+0x2ac>)
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
		}
		if (key_flag_2) {
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <main+0x2ac>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d073      	beq.n	800043e <main+0x2f2>
			uint32_t ms_2 = HAL_GetTick();
 8000356:	f000 fc31 	bl	8000bbc <HAL_GetTick>
 800035a:	6678      	str	r0, [r7, #100]	; 0x64
			uint8_t key2_state = HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin);
 800035c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000360:	4820      	ldr	r0, [pc, #128]	; (80003e4 <main+0x298>)
 8000362:	f000 fe9d 	bl	80010a0 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			if (key2_state == 0 && !short_state_2 && (ms_2 - time_key2) > 50) {
 800036c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000370:	2b00      	cmp	r3, #0
 8000372:	d113      	bne.n	800039c <main+0x250>
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <main+0x2b0>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10f      	bne.n	800039c <main+0x250>
 800037c:	4b20      	ldr	r3, [pc, #128]	; (8000400 <main+0x2b4>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	2b32      	cmp	r3, #50	; 0x32
 8000386:	d909      	bls.n	800039c <main+0x250>
				short_state_2 = 1;
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <main+0x2b0>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
				long_state_2 = 0;
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <main+0x2b8>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
				time_key2 = ms_2;
 8000394:	4a1a      	ldr	r2, [pc, #104]	; (8000400 <main+0x2b4>)
 8000396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000398:	6013      	str	r3, [r2, #0]
 800039a:	e050      	b.n	800043e <main+0x2f2>
			} else if (key2_state == 0 && !long_state_2
 800039c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d131      	bne.n	8000408 <main+0x2bc>
 80003a4:	4b17      	ldr	r3, [pc, #92]	; (8000404 <main+0x2b8>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d12d      	bne.n	8000408 <main+0x2bc>
					&& (ms_2 - time_key2) > 2000) {
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <main+0x2b4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80003b2:	1ad3      	subs	r3, r2, r3
 80003b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003b8:	d926      	bls.n	8000408 <main+0x2bc>
				long_state_2 = 1;
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <main+0x2b8>)
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
 80003c0:	e03d      	b.n	800043e <main+0x2f2>
 80003c2:	bf00      	nop
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000080 	.word	0x20000080
 80003cc:	200000c8 	.word	0x200000c8
 80003d0:	20000170 	.word	0x20000170
 80003d4:	2000016a 	.word	0x2000016a
 80003d8:	20000002 	.word	0x20000002
 80003dc:	2000016c 	.word	0x2000016c
 80003e0:	20000004 	.word	0x20000004
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	20000158 	.word	0x20000158
 80003ec:	20000160 	.word	0x20000160
 80003f0:	2000015c 	.word	0x2000015c
 80003f4:	20000161 	.word	0x20000161
 80003f8:	20000162 	.word	0x20000162
 80003fc:	20000168 	.word	0x20000168
 8000400:	20000164 	.word	0x20000164
 8000404:	20000169 	.word	0x20000169

			} else if (key2_state == 1 && short_state_2
 8000408:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800040c:	2b01      	cmp	r3, #1
 800040e:	d116      	bne.n	800043e <main+0x2f2>
 8000410:	4b46      	ldr	r3, [pc, #280]	; (800052c <main+0x3e0>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d012      	beq.n	800043e <main+0x2f2>
					&& (ms_2 - time_key2) > 50) {
 8000418:	4b45      	ldr	r3, [pc, #276]	; (8000530 <main+0x3e4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800041e:	1ad3      	subs	r3, r2, r3
 8000420:	2b32      	cmp	r3, #50	; 0x32
 8000422:	d90c      	bls.n	800043e <main+0x2f2>
				short_state_2 = 0;
 8000424:	4b41      	ldr	r3, [pc, #260]	; (800052c <main+0x3e0>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
				time_key2 = ms_2;
 800042a:	4a41      	ldr	r2, [pc, #260]	; (8000530 <main+0x3e4>)
 800042c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800042e:	6013      	str	r3, [r2, #0]
				if (!long_state_2) {
 8000430:	4b40      	ldr	r3, [pc, #256]	; (8000534 <main+0x3e8>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d102      	bne.n	800043e <main+0x2f2>

					transmit_data[5] = 127;
 8000438:	4b3f      	ldr	r3, [pc, #252]	; (8000538 <main+0x3ec>)
 800043a:	227f      	movs	r2, #127	; 0x7f
 800043c:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		//отправка данных в uart
		if (HAL_GetTick() - ms2 > 100) { //каждые 100 мс
 800043e:	f000 fbbd 	bl	8000bbc <HAL_GetTick>
 8000442:	4602      	mov	r2, r0
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <main+0x3f0>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	2b64      	cmp	r3, #100	; 0x64
 800044c:	f67f aeae 	bls.w	80001ac <main+0x60>
			sprintf(message,
					"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n\r",
					transmit_data[0], transmit_data[1], transmit_data[2],
 8000450:	4b39      	ldr	r3, [pc, #228]	; (8000538 <main+0x3ec>)
 8000452:	781b      	ldrb	r3, [r3, #0]
			sprintf(message,
 8000454:	469c      	mov	ip, r3
					transmit_data[0], transmit_data[1], transmit_data[2],
 8000456:	4b38      	ldr	r3, [pc, #224]	; (8000538 <main+0x3ec>)
 8000458:	785b      	ldrb	r3, [r3, #1]
			sprintf(message,
 800045a:	469e      	mov	lr, r3
					transmit_data[0], transmit_data[1], transmit_data[2],
 800045c:	4b36      	ldr	r3, [pc, #216]	; (8000538 <main+0x3ec>)
 800045e:	789b      	ldrb	r3, [r3, #2]
			sprintf(message,
 8000460:	62fb      	str	r3, [r7, #44]	; 0x2c
					transmit_data[3], transmit_data[4], transmit_data[5],
 8000462:	4b35      	ldr	r3, [pc, #212]	; (8000538 <main+0x3ec>)
 8000464:	78db      	ldrb	r3, [r3, #3]
			sprintf(message,
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
					transmit_data[3], transmit_data[4], transmit_data[5],
 8000468:	4b33      	ldr	r3, [pc, #204]	; (8000538 <main+0x3ec>)
 800046a:	791b      	ldrb	r3, [r3, #4]
			sprintf(message,
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
					transmit_data[3], transmit_data[4], transmit_data[5],
 800046e:	4b32      	ldr	r3, [pc, #200]	; (8000538 <main+0x3ec>)
 8000470:	795b      	ldrb	r3, [r3, #5]
			sprintf(message,
 8000472:	623b      	str	r3, [r7, #32]
					transmit_data[6], transmit_data[7], transmit_data[8],
 8000474:	4b30      	ldr	r3, [pc, #192]	; (8000538 <main+0x3ec>)
 8000476:	799b      	ldrb	r3, [r3, #6]
			sprintf(message,
 8000478:	61fb      	str	r3, [r7, #28]
					transmit_data[6], transmit_data[7], transmit_data[8],
 800047a:	4b2f      	ldr	r3, [pc, #188]	; (8000538 <main+0x3ec>)
 800047c:	79db      	ldrb	r3, [r3, #7]
			sprintf(message,
 800047e:	61bb      	str	r3, [r7, #24]
					transmit_data[6], transmit_data[7], transmit_data[8],
 8000480:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <main+0x3ec>)
 8000482:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(message,
 8000484:	617b      	str	r3, [r7, #20]
					transmit_data[9], transmit_data[10], transmit_data[11],
 8000486:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <main+0x3ec>)
 8000488:	7a5b      	ldrb	r3, [r3, #9]
			sprintf(message,
 800048a:	613b      	str	r3, [r7, #16]
					transmit_data[9], transmit_data[10], transmit_data[11],
 800048c:	4b2a      	ldr	r3, [pc, #168]	; (8000538 <main+0x3ec>)
 800048e:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(message,
 8000490:	60fb      	str	r3, [r7, #12]
					transmit_data[9], transmit_data[10], transmit_data[11],
 8000492:	4b29      	ldr	r3, [pc, #164]	; (8000538 <main+0x3ec>)
 8000494:	7adb      	ldrb	r3, [r3, #11]
			sprintf(message,
 8000496:	60bb      	str	r3, [r7, #8]
					transmit_data[12], transmit_data[13], transmit_data[14],
 8000498:	4b27      	ldr	r3, [pc, #156]	; (8000538 <main+0x3ec>)
 800049a:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(message,
 800049c:	607b      	str	r3, [r7, #4]
					transmit_data[12], transmit_data[13], transmit_data[14],
 800049e:	4b26      	ldr	r3, [pc, #152]	; (8000538 <main+0x3ec>)
 80004a0:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(message,
 80004a2:	603b      	str	r3, [r7, #0]
					transmit_data[12], transmit_data[13], transmit_data[14],
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <main+0x3ec>)
 80004a6:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(message,
 80004a8:	461e      	mov	r6, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 80004aa:	4b23      	ldr	r3, [pc, #140]	; (8000538 <main+0x3ec>)
 80004ac:	7bdb      	ldrb	r3, [r3, #15]
			sprintf(message,
 80004ae:	461d      	mov	r5, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 80004b0:	4b21      	ldr	r3, [pc, #132]	; (8000538 <main+0x3ec>)
 80004b2:	7c1b      	ldrb	r3, [r3, #16]
			sprintf(message,
 80004b4:	461c      	mov	r4, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <main+0x3ec>)
 80004b8:	7c5b      	ldrb	r3, [r3, #17]
			sprintf(message,
 80004ba:	4619      	mov	r1, r3
					transmit_data[18], transmit_data[19]);
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <main+0x3ec>)
 80004be:	7c9b      	ldrb	r3, [r3, #18]
			sprintf(message,
 80004c0:	461a      	mov	r2, r3
					transmit_data[18], transmit_data[19]);
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <main+0x3ec>)
 80004c4:	7cdb      	ldrb	r3, [r3, #19]
			sprintf(message,
 80004c6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80004ca:	9311      	str	r3, [sp, #68]	; 0x44
 80004cc:	9210      	str	r2, [sp, #64]	; 0x40
 80004ce:	910f      	str	r1, [sp, #60]	; 0x3c
 80004d0:	940e      	str	r4, [sp, #56]	; 0x38
 80004d2:	950d      	str	r5, [sp, #52]	; 0x34
 80004d4:	960c      	str	r6, [sp, #48]	; 0x30
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	920a      	str	r2, [sp, #40]	; 0x28
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	9209      	str	r2, [sp, #36]	; 0x24
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	9208      	str	r2, [sp, #32]
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	9207      	str	r2, [sp, #28]
 80004ea:	697a      	ldr	r2, [r7, #20]
 80004ec:	9206      	str	r2, [sp, #24]
 80004ee:	69ba      	ldr	r2, [r7, #24]
 80004f0:	9205      	str	r2, [sp, #20]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	9204      	str	r2, [sp, #16]
 80004f6:	6a3a      	ldr	r2, [r7, #32]
 80004f8:	9203      	str	r2, [sp, #12]
 80004fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004fc:	9202      	str	r2, [sp, #8]
 80004fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000500:	9201      	str	r2, [sp, #4]
 8000502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	4673      	mov	r3, lr
 8000508:	4662      	mov	r2, ip
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <main+0x3f4>)
 800050c:	f001 fdd4 	bl	80020b8 <siprintf>
			HAL_UART_Transmit(&huart1, message, sizeof(message), 100);
 8000510:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	2232      	movs	r2, #50	; 0x32
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <main+0x3f8>)
 800051a:	f001 fc4d 	bl	8001db8 <HAL_UART_Transmit>
			ms2 = HAL_GetTick();
 800051e:	f000 fb4d 	bl	8000bbc <HAL_GetTick>
 8000522:	4603      	mov	r3, r0
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <main+0x3f0>)
 8000526:	6013      	str	r3, [r2, #0]
		cur_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000528:	e640      	b.n	80001ac <main+0x60>
 800052a:	bf00      	nop
 800052c:	20000168 	.word	0x20000168
 8000530:	20000164 	.word	0x20000164
 8000534:	20000169 	.word	0x20000169
 8000538:	20000170 	.word	0x20000170
 800053c:	20000184 	.word	0x20000184
 8000540:	08002a34 	.word	0x08002a34
 8000544:	20000110 	.word	0x20000110

08000548 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b090      	sub	sp, #64	; 0x40
 800054c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2228      	movs	r2, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fdce 	bl	80020f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000586:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fd9d 	bl	80010d0 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x58>
		Error_Handler();
 800059c:	f000 f93c 	bl	8000818 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2102      	movs	r1, #2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f80a 	bl	80015d4 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x82>
		Error_Handler();
 80005c6:	f000 f927 	bl	8000818 <Error_Handler>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3740      	adds	r7, #64	; 0x40
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2224      	movs	r2, #36	; 0x24
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fd88 	bl	80020f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_TIM3_Init+0xa0>)
 80005f2:	4a21      	ldr	r2, [pc, #132]	; (8000678 <MX_TIM3_Init+0xa4>)
 80005f4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_TIM3_Init+0xa0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_TIM3_Init+0xa0>)
 80005fe:	2220      	movs	r2, #32
 8000600:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_TIM3_Init+0xa0>)
 8000604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000608:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_TIM3_Init+0xa0>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_TIM3_Init+0xa0>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000616:	2303      	movs	r3, #3
 8000618:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800061e:	2301      	movs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8000626:	230a      	movs	r3, #10
 8000628:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800062e:	2301      	movs	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 8000636:	230a      	movs	r3, #10
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_TIM3_Init+0xa0>)
 8000642:	f001 f955 	bl	80018f0 <HAL_TIM_Encoder_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM3_Init+0x7c>
		Error_Handler();
 800064c:	f000 f8e4 	bl	8000818 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_TIM3_Init+0xa0>)
 800065e:	f001 fafd 	bl	8001c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8000668:	f000 f8d6 	bl	8000818 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000080 	.word	0x20000080
 8000678:	40000400 	.word	0x40000400

0800067c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b08c      	sub	sp, #48	; 0x30
 8000680:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2224      	movs	r2, #36	; 0x24
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fd34 	bl	80020f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_TIM4_Init+0xa0>)
 800069a:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MX_TIM4_Init+0xa4>)
 800069c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_TIM4_Init+0xa0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_TIM4_Init+0xa0>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_TIM4_Init+0xa0>)
 80006ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_TIM4_Init+0xa0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_TIM4_Init+0xa0>)
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006c6:	2301      	movs	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80006ce:	230a      	movs	r3, #10
 80006d0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_TIM4_Init+0xa0>)
 80006ea:	f001 f901 	bl	80018f0 <HAL_TIM_Encoder_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM4_Init+0x7c>
		Error_Handler();
 80006f4:	f000 f890 	bl	8000818 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_TIM4_Init+0xa0>)
 8000706:	f001 faa9 	bl	8001c5c <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8000710:	f000 f882 	bl	8000818 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3730      	adds	r7, #48	; 0x30
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000c8 	.word	0x200000c8
 8000720:	40000800 	.word	0x40000800

08000724 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART1_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800075c:	f001 fadc 	bl	8001d18 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000766:	f000 f857 	bl	8000818 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000110 	.word	0x20000110
 8000774:	40013800 	.word	0x40013800

08000778 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_GPIO_Init+0x98>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <MX_GPIO_Init+0x98>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_GPIO_Init+0x98>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0310 	and.w	r3, r3, #16
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_GPIO_Init+0x98>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <MX_GPIO_Init+0x98>)
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_GPIO_Init+0x98>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_GPIO_Init+0x98>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <MX_GPIO_Init+0x98>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_GPIO_Init+0x98>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_GPIO_Init+0x98>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <MX_GPIO_Init+0x98>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_GPIO_Init+0x98>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : KEY_Pin KEY_2_Pin */
	GPIO_InitStruct.Pin = KEY_Pin | KEY_2_Pin;
 80007ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000802:	f000 fac9 	bl	8000d98 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	40010c00 	.word	0x40010c00

08000818 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_MspInit+0x5c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <HAL_MspInit+0x5c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x5c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_MspInit+0x60>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_MspInit+0x60>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000

08000888 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a2a      	ldr	r2, [pc, #168]	; (800094c <HAL_TIM_Encoder_MspInit+0xc4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d124      	bne.n	80008f2 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a28      	ldr	r2, [pc, #160]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a22      	ldr	r2, [pc, #136]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d8:	23c0      	movs	r3, #192	; 0xc0
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4619      	mov	r1, r3
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <HAL_TIM_Encoder_MspInit+0xcc>)
 80008ec:	f000 fa54 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008f0:	e028      	b.n	8000944 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d123      	bne.n	8000944 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	4a13      	ldr	r2, [pc, #76]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	61d3      	str	r3, [r2, #28]
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800092c:	23c0      	movs	r3, #192	; 0xc0
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4619      	mov	r1, r3
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <HAL_TIM_Encoder_MspInit+0xd4>)
 8000940:	f000 fa2a 	bl	8000d98 <HAL_GPIO_Init>
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40000400 	.word	0x40000400
 8000950:	40021000 	.word	0x40021000
 8000954:	40010800 	.word	0x40010800
 8000958:	40000800 	.word	0x40000800
 800095c:	40010c00 	.word	0x40010c00

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <HAL_UART_MspInit+0x8c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d131      	bne.n	80009e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_UART_MspInit+0x90>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <HAL_UART_MspInit+0x90>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_UART_MspInit+0x90>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_UART_MspInit+0x90>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <HAL_UART_MspInit+0x90>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_UART_MspInit+0x90>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <HAL_UART_MspInit+0x94>)
 80009c6:	f000 f9e7 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_UART_MspInit+0x94>)
 80009e0:	f000 f9da 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40013800 	.word	0x40013800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f8ab 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f001 fb46 	bl	8002108 <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20005000 	.word	0x20005000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	20000188 	.word	0x20000188
 8000ab0:	200002d8 	.word	0x200002d8

08000ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac0:	f7ff fff8 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ac6:	490c      	ldr	r1, [pc, #48]	; (8000af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000adc:	4c09      	ldr	r4, [pc, #36]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f001 fb13 	bl	8002114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aee:	f7ff fb2d 	bl	800014c <main>
  bx lr
 8000af2:	4770      	bx	lr
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000afc:	08002adc 	.word	0x08002adc
  ldr r2, =_sbss
 8000b00:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b04:	200002d8 	.word	0x200002d8

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x28>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x28>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f907 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe7c 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f911 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f8e7 	bl	8000d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000010 	.word	0x20000010
 8000b94:	2000000c 	.word	0x2000000c

08000b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_IncTick+0x1c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_IncTick+0x20>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <HAL_IncTick+0x20>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000010 	.word	0x20000010
 8000bb8:	2000018c 	.word	0x2000018c

08000bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <HAL_GetTick+0x10>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	2000018c 	.word	0x2000018c

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff90 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff49 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff5e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff90 	bl	8000c88 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5f 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffb0 	bl	8000cec <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b08b      	sub	sp, #44	; 0x2c
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000daa:	e169      	b.n	8001080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dac:	2201      	movs	r2, #1
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 8158 	bne.w	800107a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	4a9a      	ldr	r2, [pc, #616]	; (8001038 <HAL_GPIO_Init+0x2a0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d05e      	beq.n	8000e92 <HAL_GPIO_Init+0xfa>
 8000dd4:	4a98      	ldr	r2, [pc, #608]	; (8001038 <HAL_GPIO_Init+0x2a0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d875      	bhi.n	8000ec6 <HAL_GPIO_Init+0x12e>
 8000dda:	4a98      	ldr	r2, [pc, #608]	; (800103c <HAL_GPIO_Init+0x2a4>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d058      	beq.n	8000e92 <HAL_GPIO_Init+0xfa>
 8000de0:	4a96      	ldr	r2, [pc, #600]	; (800103c <HAL_GPIO_Init+0x2a4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d86f      	bhi.n	8000ec6 <HAL_GPIO_Init+0x12e>
 8000de6:	4a96      	ldr	r2, [pc, #600]	; (8001040 <HAL_GPIO_Init+0x2a8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d052      	beq.n	8000e92 <HAL_GPIO_Init+0xfa>
 8000dec:	4a94      	ldr	r2, [pc, #592]	; (8001040 <HAL_GPIO_Init+0x2a8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d869      	bhi.n	8000ec6 <HAL_GPIO_Init+0x12e>
 8000df2:	4a94      	ldr	r2, [pc, #592]	; (8001044 <HAL_GPIO_Init+0x2ac>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d04c      	beq.n	8000e92 <HAL_GPIO_Init+0xfa>
 8000df8:	4a92      	ldr	r2, [pc, #584]	; (8001044 <HAL_GPIO_Init+0x2ac>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d863      	bhi.n	8000ec6 <HAL_GPIO_Init+0x12e>
 8000dfe:	4a92      	ldr	r2, [pc, #584]	; (8001048 <HAL_GPIO_Init+0x2b0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d046      	beq.n	8000e92 <HAL_GPIO_Init+0xfa>
 8000e04:	4a90      	ldr	r2, [pc, #576]	; (8001048 <HAL_GPIO_Init+0x2b0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d85d      	bhi.n	8000ec6 <HAL_GPIO_Init+0x12e>
 8000e0a:	2b12      	cmp	r3, #18
 8000e0c:	d82a      	bhi.n	8000e64 <HAL_GPIO_Init+0xcc>
 8000e0e:	2b12      	cmp	r3, #18
 8000e10:	d859      	bhi.n	8000ec6 <HAL_GPIO_Init+0x12e>
 8000e12:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <HAL_GPIO_Init+0x80>)
 8000e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e18:	08000e93 	.word	0x08000e93
 8000e1c:	08000e6d 	.word	0x08000e6d
 8000e20:	08000e7f 	.word	0x08000e7f
 8000e24:	08000ec1 	.word	0x08000ec1
 8000e28:	08000ec7 	.word	0x08000ec7
 8000e2c:	08000ec7 	.word	0x08000ec7
 8000e30:	08000ec7 	.word	0x08000ec7
 8000e34:	08000ec7 	.word	0x08000ec7
 8000e38:	08000ec7 	.word	0x08000ec7
 8000e3c:	08000ec7 	.word	0x08000ec7
 8000e40:	08000ec7 	.word	0x08000ec7
 8000e44:	08000ec7 	.word	0x08000ec7
 8000e48:	08000ec7 	.word	0x08000ec7
 8000e4c:	08000ec7 	.word	0x08000ec7
 8000e50:	08000ec7 	.word	0x08000ec7
 8000e54:	08000ec7 	.word	0x08000ec7
 8000e58:	08000ec7 	.word	0x08000ec7
 8000e5c:	08000e75 	.word	0x08000e75
 8000e60:	08000e89 	.word	0x08000e89
 8000e64:	4a79      	ldr	r2, [pc, #484]	; (800104c <HAL_GPIO_Init+0x2b4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d013      	beq.n	8000e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e6a:	e02c      	b.n	8000ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	623b      	str	r3, [r7, #32]
          break;
 8000e72:	e029      	b.n	8000ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e024      	b.n	8000ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	3308      	adds	r3, #8
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e01f      	b.n	8000ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	330c      	adds	r3, #12
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e01a      	b.n	8000ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	623b      	str	r3, [r7, #32]
          break;
 8000e9e:	e013      	b.n	8000ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d105      	bne.n	8000eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69fa      	ldr	r2, [r7, #28]
 8000eb0:	611a      	str	r2, [r3, #16]
          break;
 8000eb2:	e009      	b.n	8000ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	615a      	str	r2, [r3, #20]
          break;
 8000ebe:	e003      	b.n	8000ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
          break;
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x130>
          break;
 8000ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2bff      	cmp	r3, #255	; 0xff
 8000ecc:	d801      	bhi.n	8000ed2 <HAL_GPIO_Init+0x13a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	e001      	b.n	8000ed6 <HAL_GPIO_Init+0x13e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	2bff      	cmp	r3, #255	; 0xff
 8000edc:	d802      	bhi.n	8000ee4 <HAL_GPIO_Init+0x14c>
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	e002      	b.n	8000eea <HAL_GPIO_Init+0x152>
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	3b08      	subs	r3, #8
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	401a      	ands	r2, r3
 8000efc:	6a39      	ldr	r1, [r7, #32]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	431a      	orrs	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80b1 	beq.w	800107a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f18:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b4a      	ldr	r3, [pc, #296]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f30:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_GPIO_Init+0x2bc>)
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a40      	ldr	r2, [pc, #256]	; (8001058 <HAL_GPIO_Init+0x2c0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d013      	beq.n	8000f84 <HAL_GPIO_Init+0x1ec>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a3f      	ldr	r2, [pc, #252]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d00d      	beq.n	8000f80 <HAL_GPIO_Init+0x1e8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a3e      	ldr	r2, [pc, #248]	; (8001060 <HAL_GPIO_Init+0x2c8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x1e4>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a3d      	ldr	r2, [pc, #244]	; (8001064 <HAL_GPIO_Init+0x2cc>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d101      	bne.n	8000f78 <HAL_GPIO_Init+0x1e0>
 8000f74:	2303      	movs	r3, #3
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f78:	2304      	movs	r3, #4
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f84:	2300      	movs	r3, #0
 8000f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f96:	492f      	ldr	r1, [pc, #188]	; (8001054 <HAL_GPIO_Init+0x2bc>)
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	492c      	ldr	r1, [pc, #176]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	608b      	str	r3, [r1, #8]
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4928      	ldr	r1, [pc, #160]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	4922      	ldr	r1, [pc, #136]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60cb      	str	r3, [r1, #12]
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	491e      	ldr	r1, [pc, #120]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	4918      	ldr	r1, [pc, #96]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	604b      	str	r3, [r1, #4]
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	43db      	mvns	r3, r3
 8001016:	4914      	ldr	r1, [pc, #80]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8001018:	4013      	ands	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d021      	beq.n	800106c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	490e      	ldr	r1, [pc, #56]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	600b      	str	r3, [r1, #0]
 8001034:	e021      	b.n	800107a <HAL_GPIO_Init+0x2e2>
 8001036:	bf00      	nop
 8001038:	10320000 	.word	0x10320000
 800103c:	10310000 	.word	0x10310000
 8001040:	10220000 	.word	0x10220000
 8001044:	10210000 	.word	0x10210000
 8001048:	10120000 	.word	0x10120000
 800104c:	10110000 	.word	0x10110000
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000
 8001058:	40010800 	.word	0x40010800
 800105c:	40010c00 	.word	0x40010c00
 8001060:	40011000 	.word	0x40011000
 8001064:	40011400 	.word	0x40011400
 8001068:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_GPIO_Init+0x304>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	43db      	mvns	r3, r3
 8001074:	4909      	ldr	r1, [pc, #36]	; (800109c <HAL_GPIO_Init+0x304>)
 8001076:	4013      	ands	r3, r2
 8001078:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	3301      	adds	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	fa22 f303 	lsr.w	r3, r2, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	f47f ae8e 	bne.w	8000dac <HAL_GPIO_Init+0x14>
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	372c      	adds	r7, #44	; 0x2c
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e001      	b.n	80010c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e272      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8087 	beq.w	80011fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f0:	4b92      	ldr	r3, [pc, #584]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d00c      	beq.n	8001116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fc:	4b8f      	ldr	r3, [pc, #572]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d112      	bne.n	800112e <HAL_RCC_OscConfig+0x5e>
 8001108:	4b8c      	ldr	r3, [pc, #560]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001114:	d10b      	bne.n	800112e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001116:	4b89      	ldr	r3, [pc, #548]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d06c      	beq.n	80011fc <HAL_RCC_OscConfig+0x12c>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d168      	bne.n	80011fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e24c      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x76>
 8001138:	4b80      	ldr	r3, [pc, #512]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a7f      	ldr	r2, [pc, #508]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e02e      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x98>
 800114e:	4b7b      	ldr	r3, [pc, #492]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7a      	ldr	r2, [pc, #488]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b78      	ldr	r3, [pc, #480]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a77      	ldr	r2, [pc, #476]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0xbc>
 8001172:	4b72      	ldr	r3, [pc, #456]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a71      	ldr	r2, [pc, #452]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b6f      	ldr	r3, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6e      	ldr	r2, [pc, #440]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 800118c:	4b6b      	ldr	r3, [pc, #428]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6a      	ldr	r2, [pc, #424]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a67      	ldr	r2, [pc, #412]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fd06 	bl	8000bbc <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fd02 	bl	8000bbc <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e200      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe4>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fcf2 	bl	8000bbc <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fcee 	bl	8000bbc <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1ec      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x10c>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x18c>
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x176>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1c0      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b3d      	ldr	r3, [pc, #244]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4939      	ldr	r1, [pc, #228]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fca7 	bl	8000bbc <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fca3 	bl	8000bbc <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1a1      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4927      	ldr	r1, [pc, #156]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc86 	bl	8000bbc <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc82 	bl	8000bbc <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e180      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d03a      	beq.n	8001354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d019      	beq.n	800131a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_RCC_OscConfig+0x274>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fc66 	bl	8000bbc <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fc62 	bl	8000bbc <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e160      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f000 face 	bl	80018b4 <RCC_Delay>
 8001318:	e01c      	b.n	8001354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_RCC_OscConfig+0x274>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001320:	f7ff fc4c 	bl	8000bbc <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	e00f      	b.n	8001348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fc48 	bl	8000bbc <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d908      	bls.n	8001348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e146      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	42420000 	.word	0x42420000
 8001344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b92      	ldr	r3, [pc, #584]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e9      	bne.n	8001328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80a6 	beq.w	80014ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10d      	bne.n	800138e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a87      	ldr	r2, [pc, #540]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b85      	ldr	r3, [pc, #532]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138e:	4b82      	ldr	r3, [pc, #520]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139a:	4b7f      	ldr	r3, [pc, #508]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a7e      	ldr	r2, [pc, #504]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fc09 	bl	8000bbc <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ae:	f7ff fc05 	bl	8000bbc <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e103      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	4b75      	ldr	r3, [pc, #468]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x312>
 80013d4:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	e02d      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x334>
 80013ea:	4b6a      	ldr	r3, [pc, #424]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4a69      	ldr	r2, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6213      	str	r3, [r2, #32]
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a66      	ldr	r2, [pc, #408]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	e01c      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b05      	cmp	r3, #5
 800140a:	d10c      	bne.n	8001426 <HAL_RCC_OscConfig+0x356>
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4a60      	ldr	r2, [pc, #384]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6213      	str	r3, [r2, #32]
 8001418:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a5d      	ldr	r2, [pc, #372]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	e00b      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a5a      	ldr	r2, [pc, #360]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d015      	beq.n	8001472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fbb9 	bl	8000bbc <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff fbb5 	bl	8000bbc <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0b1      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ee      	beq.n	800144e <HAL_RCC_OscConfig+0x37e>
 8001470:	e014      	b.n	800149c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fba3 	bl	8000bbc <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fb9f 	bl	8000bbc <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e09b      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	4b40      	ldr	r3, [pc, #256]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ee      	bne.n	800147a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8087 	beq.w	80015c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d061      	beq.n	8001588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d146      	bne.n	800155a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb73 	bl	8000bbc <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fb6f 	bl	8000bbc <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e06d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d108      	bne.n	8001514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4921      	ldr	r1, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a19      	ldr	r1, [r3, #32]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	430b      	orrs	r3, r1
 8001526:	491b      	ldr	r1, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb43 	bl	8000bbc <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb3f 	bl	8000bbc <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e03d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x46a>
 8001558:	e035      	b.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb2c 	bl	8000bbc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fb28 	bl	8000bbc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e026      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x498>
 8001586:	e01e      	b.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e019      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
 8001594:	40021000 	.word	0x40021000
 8001598:	40007000 	.word	0x40007000
 800159c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_OscConfig+0x500>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0d0      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d910      	bls.n	8001618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 0207 	bic.w	r2, r3, #7
 80015fe:	4965      	ldr	r1, [pc, #404]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b63      	ldr	r3, [pc, #396]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0b8      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001630:	4b59      	ldr	r3, [pc, #356]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a58      	ldr	r2, [pc, #352]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800163a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a52      	ldr	r2, [pc, #328]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	494d      	ldr	r1, [pc, #308]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d040      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d115      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e07f      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e073      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06b      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f023 0203 	bic.w	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4936      	ldr	r1, [pc, #216]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c4:	f7ff fa7a 	bl	8000bbc <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016cc:	f7ff fa76 	bl	8000bbc <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e053      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 020c 	and.w	r2, r3, #12
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d1eb      	bne.n	80016cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d210      	bcs.n	8001724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0207 	bic.w	r2, r3, #7
 800170a:	4922      	ldr	r1, [pc, #136]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e032      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4916      	ldr	r1, [pc, #88]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	490e      	ldr	r1, [pc, #56]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001762:	f000 f821 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	490a      	ldr	r1, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1cc>)
 800177c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f9d8 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000
 8001798:	40021000 	.word	0x40021000
 800179c:	08002a74 	.word	0x08002a74
 80017a0:	20000008 	.word	0x20000008
 80017a4:	2000000c 	.word	0x2000000c

080017a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_RCC_GetSysClockFreq+0x94>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x30>
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x36>
 80017d6:	e027      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_RCC_GetSysClockFreq+0x98>)
 80017da:	613b      	str	r3, [r7, #16]
      break;
 80017dc:	e027      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	0c9b      	lsrs	r3, r3, #18
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_RCC_GetSysClockFreq+0x94>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	0c5b      	lsrs	r3, r3, #17
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_RCC_GetSysClockFreq+0x98>)
 800180a:	fb03 f202 	mul.w	r2, r3, r2
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e004      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_RCC_GetSysClockFreq+0xa4>)
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	613b      	str	r3, [r7, #16]
      break;
 8001826:	e002      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetSysClockFreq+0x98>)
 800182a:	613b      	str	r3, [r7, #16]
      break;
 800182c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182e:	693b      	ldr	r3, [r7, #16]
}
 8001830:	4618      	mov	r0, r3
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	007a1200 	.word	0x007a1200
 8001844:	08002a8c 	.word	0x08002a8c
 8001848:	08002a9c 	.word	0x08002a9c
 800184c:	003d0900 	.word	0x003d0900

08001850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <HAL_RCC_GetHCLKFreq+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	20000008 	.word	0x20000008

08001864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001868:	f7ff fff2 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	4903      	ldr	r1, [pc, #12]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	08002a84 	.word	0x08002a84

0800188c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001890:	f7ff ffde 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0adb      	lsrs	r3, r3, #11
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4903      	ldr	r1, [pc, #12]	; (80018b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08002a84 	.word	0x08002a84

080018b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <RCC_Delay+0x34>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <RCC_Delay+0x38>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0a5b      	lsrs	r3, r3, #9
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018d0:	bf00      	nop
  }
  while (Delay --);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	60fa      	str	r2, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <RCC_Delay+0x1c>
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000008 	.word	0x20000008
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e093      	b.n	8001a2c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7fe ffb5 	bl	8000888 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001934:	f023 0307 	bic.w	r3, r3, #7
 8001938:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4610      	mov	r0, r2
 8001946:	f000 f903 	bl	8001b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	4313      	orrs	r3, r2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001990:	f023 030c 	bic.w	r3, r3, #12
 8001994:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800199c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	4313      	orrs	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	011a      	lsls	r2, r3, #4
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	031b      	lsls	r3, r3, #12
 80019c0:	4313      	orrs	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4313      	orrs	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d110      	bne.n	8001a86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d102      	bne.n	8001a70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001a6a:	7b7b      	ldrb	r3, [r7, #13]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d001      	beq.n	8001a74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e069      	b.n	8001b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a84:	e031      	b.n	8001aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d110      	bne.n	8001aae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d102      	bne.n	8001a98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001a92:	7b3b      	ldrb	r3, [r7, #12]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d001      	beq.n	8001a9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e055      	b.n	8001b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001aac:	e01d      	b.n	8001aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d108      	bne.n	8001ac6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d105      	bne.n	8001ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001aba:	7b7b      	ldrb	r3, [r7, #13]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d102      	bne.n	8001ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d001      	beq.n	8001aca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e03e      	b.n	8001b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_TIM_Encoder_Start+0xc4>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d008      	beq.n	8001b08 <HAL_TIM_Encoder_Start+0xd4>
 8001af6:	e00f      	b.n	8001b18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f887 	bl	8001c14 <TIM_CCxChannelCmd>
      break;
 8001b06:	e016      	b.n	8001b36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2104      	movs	r1, #4
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f87f 	bl	8001c14 <TIM_CCxChannelCmd>
      break;
 8001b16:	e00e      	b.n	8001b36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f877 	bl	8001c14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f870 	bl	8001c14 <TIM_CCxChannelCmd>
      break;
 8001b34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0201 	orr.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a29      	ldr	r2, [pc, #164]	; (8001c08 <TIM_Base_SetConfig+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00b      	beq.n	8001b80 <TIM_Base_SetConfig+0x30>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6e:	d007      	beq.n	8001b80 <TIM_Base_SetConfig+0x30>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <TIM_Base_SetConfig+0xbc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d003      	beq.n	8001b80 <TIM_Base_SetConfig+0x30>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a25      	ldr	r2, [pc, #148]	; (8001c10 <TIM_Base_SetConfig+0xc0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d108      	bne.n	8001b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <TIM_Base_SetConfig+0xb8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00b      	beq.n	8001bb2 <TIM_Base_SetConfig+0x62>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba0:	d007      	beq.n	8001bb2 <TIM_Base_SetConfig+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <TIM_Base_SetConfig+0xbc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <TIM_Base_SetConfig+0x62>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <TIM_Base_SetConfig+0xc0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <TIM_Base_SetConfig+0xb8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d103      	bne.n	8001bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	615a      	str	r2, [r3, #20]
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800

08001c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2201      	movs	r2, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a1a      	ldr	r2, [r3, #32]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	621a      	str	r2, [r3, #32]
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e046      	b.n	8001d02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00e      	beq.n	8001cd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc0:	d009      	beq.n	8001cd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d004      	beq.n	8001cd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a10      	ldr	r2, [pc, #64]	; (8001d14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40012c00 	.word	0x40012c00
 8001d10:	40000400 	.word	0x40000400
 8001d14:	40000800 	.word	0x40000800

08001d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e042      	b.n	8001db0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fe0e 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f91d 	bl	8001f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d16d      	bne.n	8001eb4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_UART_Transmit+0x2c>
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e066      	b.n	8001eb6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2221      	movs	r2, #33	; 0x21
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001df6:	f7fe fee1 	bl	8000bbc <HAL_GetTick>
 8001dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e10:	d108      	bne.n	8001e24 <HAL_UART_Transmit+0x6c>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d104      	bne.n	8001e24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	e003      	b.n	8001e2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e2c:	e02a      	b.n	8001e84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f840 	bl	8001ebe <UART_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e036      	b.n	8001eb6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10b      	bne.n	8001e66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	3302      	adds	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	e007      	b.n	8001e76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3301      	adds	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1cf      	bne.n	8001e2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2140      	movs	r1, #64	; 0x40
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f810 	bl	8001ebe <UART_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e006      	b.n	8001eb6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b090      	sub	sp, #64	; 0x40
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ece:	e050      	b.n	8001f72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed6:	d04c      	beq.n	8001f72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <UART_WaitOnFlagUntilTimeout+0x30>
 8001ede:	f7fe fe6d 	bl	8000bbc <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d241      	bcs.n	8001f72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	e853 3f00 	ldrex	r3, [r3]
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f0e:	637a      	str	r2, [r7, #52]	; 0x34
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f16:	e841 2300 	strex	r3, r2, [r1]
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1e5      	bne.n	8001eee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3314      	adds	r3, #20
 8001f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	e853 3f00 	ldrex	r3, [r3]
 8001f30:	613b      	str	r3, [r7, #16]
   return(result);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3314      	adds	r3, #20
 8001f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f42:	623a      	str	r2, [r7, #32]
 8001f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	6a3a      	ldr	r2, [r7, #32]
 8001f4a:	e841 2300 	strex	r3, r2, [r1]
 8001f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1e5      	bne.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e00f      	b.n	8001f92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d09f      	beq.n	8001ed0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3740      	adds	r7, #64	; 0x40
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fd6:	f023 030c 	bic.w	r3, r3, #12
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <UART_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002004:	f7ff fc42 	bl	800188c <HAL_RCC_GetPCLK2Freq>
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	e002      	b.n	8002012 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800200c:	f7ff fc2a 	bl	8001864 <HAL_RCC_GetPCLK1Freq>
 8002010:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	009a      	lsls	r2, r3, #2
 800201c:	441a      	add	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <UART_SetConfig+0x118>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	0119      	lsls	r1, r3, #4
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	009a      	lsls	r2, r3, #2
 800203c:	441a      	add	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fbb2 f2f3 	udiv	r2, r2, r3
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <UART_SetConfig+0x118>)
 800204a:	fba3 0302 	umull	r0, r3, r3, r2
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2064      	movs	r0, #100	; 0x64
 8002052:	fb00 f303 	mul.w	r3, r0, r3
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	3332      	adds	r3, #50	; 0x32
 800205c:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <UART_SetConfig+0x118>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002068:	4419      	add	r1, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	009a      	lsls	r2, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <UART_SetConfig+0x118>)
 8002082:	fba3 0302 	umull	r0, r3, r3, r2
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2064      	movs	r0, #100	; 0x64
 800208a:	fb00 f303 	mul.w	r3, r0, r3
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	3332      	adds	r3, #50	; 0x32
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <UART_SetConfig+0x118>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	440a      	add	r2, r1
 80020a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013800 	.word	0x40013800
 80020b4:	51eb851f 	.word	0x51eb851f

080020b8 <siprintf>:
 80020b8:	b40e      	push	{r1, r2, r3}
 80020ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020be:	b500      	push	{lr}
 80020c0:	b09c      	sub	sp, #112	; 0x70
 80020c2:	ab1d      	add	r3, sp, #116	; 0x74
 80020c4:	9002      	str	r0, [sp, #8]
 80020c6:	9006      	str	r0, [sp, #24]
 80020c8:	9107      	str	r1, [sp, #28]
 80020ca:	9104      	str	r1, [sp, #16]
 80020cc:	4808      	ldr	r0, [pc, #32]	; (80020f0 <siprintf+0x38>)
 80020ce:	4909      	ldr	r1, [pc, #36]	; (80020f4 <siprintf+0x3c>)
 80020d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80020d4:	9105      	str	r1, [sp, #20]
 80020d6:	6800      	ldr	r0, [r0, #0]
 80020d8:	a902      	add	r1, sp, #8
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	f000 f98e 	bl	80023fc <_svfiprintf_r>
 80020e0:	2200      	movs	r2, #0
 80020e2:	9b02      	ldr	r3, [sp, #8]
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	b01c      	add	sp, #112	; 0x70
 80020e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80020ec:	b003      	add	sp, #12
 80020ee:	4770      	bx	lr
 80020f0:	20000060 	.word	0x20000060
 80020f4:	ffff0208 	.word	0xffff0208

080020f8 <memset>:
 80020f8:	4603      	mov	r3, r0
 80020fa:	4402      	add	r2, r0
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d100      	bne.n	8002102 <memset+0xa>
 8002100:	4770      	bx	lr
 8002102:	f803 1b01 	strb.w	r1, [r3], #1
 8002106:	e7f9      	b.n	80020fc <memset+0x4>

08002108 <__errno>:
 8002108:	4b01      	ldr	r3, [pc, #4]	; (8002110 <__errno+0x8>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000060 	.word	0x20000060

08002114 <__libc_init_array>:
 8002114:	b570      	push	{r4, r5, r6, lr}
 8002116:	2600      	movs	r6, #0
 8002118:	4d0c      	ldr	r5, [pc, #48]	; (800214c <__libc_init_array+0x38>)
 800211a:	4c0d      	ldr	r4, [pc, #52]	; (8002150 <__libc_init_array+0x3c>)
 800211c:	1b64      	subs	r4, r4, r5
 800211e:	10a4      	asrs	r4, r4, #2
 8002120:	42a6      	cmp	r6, r4
 8002122:	d109      	bne.n	8002138 <__libc_init_array+0x24>
 8002124:	f000 fc7a 	bl	8002a1c <_init>
 8002128:	2600      	movs	r6, #0
 800212a:	4d0a      	ldr	r5, [pc, #40]	; (8002154 <__libc_init_array+0x40>)
 800212c:	4c0a      	ldr	r4, [pc, #40]	; (8002158 <__libc_init_array+0x44>)
 800212e:	1b64      	subs	r4, r4, r5
 8002130:	10a4      	asrs	r4, r4, #2
 8002132:	42a6      	cmp	r6, r4
 8002134:	d105      	bne.n	8002142 <__libc_init_array+0x2e>
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	f855 3b04 	ldr.w	r3, [r5], #4
 800213c:	4798      	blx	r3
 800213e:	3601      	adds	r6, #1
 8002140:	e7ee      	b.n	8002120 <__libc_init_array+0xc>
 8002142:	f855 3b04 	ldr.w	r3, [r5], #4
 8002146:	4798      	blx	r3
 8002148:	3601      	adds	r6, #1
 800214a:	e7f2      	b.n	8002132 <__libc_init_array+0x1e>
 800214c:	08002ad4 	.word	0x08002ad4
 8002150:	08002ad4 	.word	0x08002ad4
 8002154:	08002ad4 	.word	0x08002ad4
 8002158:	08002ad8 	.word	0x08002ad8

0800215c <__retarget_lock_acquire_recursive>:
 800215c:	4770      	bx	lr

0800215e <__retarget_lock_release_recursive>:
 800215e:	4770      	bx	lr

08002160 <_free_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4605      	mov	r5, r0
 8002164:	2900      	cmp	r1, #0
 8002166:	d040      	beq.n	80021ea <_free_r+0x8a>
 8002168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800216c:	1f0c      	subs	r4, r1, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	bfb8      	it	lt
 8002172:	18e4      	addlt	r4, r4, r3
 8002174:	f000 f8dc 	bl	8002330 <__malloc_lock>
 8002178:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <_free_r+0x8c>)
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	b933      	cbnz	r3, 800218c <_free_r+0x2c>
 800217e:	6063      	str	r3, [r4, #4]
 8002180:	6014      	str	r4, [r2, #0]
 8002182:	4628      	mov	r0, r5
 8002184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002188:	f000 b8d8 	b.w	800233c <__malloc_unlock>
 800218c:	42a3      	cmp	r3, r4
 800218e:	d908      	bls.n	80021a2 <_free_r+0x42>
 8002190:	6820      	ldr	r0, [r4, #0]
 8002192:	1821      	adds	r1, r4, r0
 8002194:	428b      	cmp	r3, r1
 8002196:	bf01      	itttt	eq
 8002198:	6819      	ldreq	r1, [r3, #0]
 800219a:	685b      	ldreq	r3, [r3, #4]
 800219c:	1809      	addeq	r1, r1, r0
 800219e:	6021      	streq	r1, [r4, #0]
 80021a0:	e7ed      	b.n	800217e <_free_r+0x1e>
 80021a2:	461a      	mov	r2, r3
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	b10b      	cbz	r3, 80021ac <_free_r+0x4c>
 80021a8:	42a3      	cmp	r3, r4
 80021aa:	d9fa      	bls.n	80021a2 <_free_r+0x42>
 80021ac:	6811      	ldr	r1, [r2, #0]
 80021ae:	1850      	adds	r0, r2, r1
 80021b0:	42a0      	cmp	r0, r4
 80021b2:	d10b      	bne.n	80021cc <_free_r+0x6c>
 80021b4:	6820      	ldr	r0, [r4, #0]
 80021b6:	4401      	add	r1, r0
 80021b8:	1850      	adds	r0, r2, r1
 80021ba:	4283      	cmp	r3, r0
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	d1e0      	bne.n	8002182 <_free_r+0x22>
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4408      	add	r0, r1
 80021c6:	6010      	str	r0, [r2, #0]
 80021c8:	6053      	str	r3, [r2, #4]
 80021ca:	e7da      	b.n	8002182 <_free_r+0x22>
 80021cc:	d902      	bls.n	80021d4 <_free_r+0x74>
 80021ce:	230c      	movs	r3, #12
 80021d0:	602b      	str	r3, [r5, #0]
 80021d2:	e7d6      	b.n	8002182 <_free_r+0x22>
 80021d4:	6820      	ldr	r0, [r4, #0]
 80021d6:	1821      	adds	r1, r4, r0
 80021d8:	428b      	cmp	r3, r1
 80021da:	bf01      	itttt	eq
 80021dc:	6819      	ldreq	r1, [r3, #0]
 80021de:	685b      	ldreq	r3, [r3, #4]
 80021e0:	1809      	addeq	r1, r1, r0
 80021e2:	6021      	streq	r1, [r4, #0]
 80021e4:	6063      	str	r3, [r4, #4]
 80021e6:	6054      	str	r4, [r2, #4]
 80021e8:	e7cb      	b.n	8002182 <_free_r+0x22>
 80021ea:	bd38      	pop	{r3, r4, r5, pc}
 80021ec:	200002d0 	.word	0x200002d0

080021f0 <sbrk_aligned>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4e0e      	ldr	r6, [pc, #56]	; (800222c <sbrk_aligned+0x3c>)
 80021f4:	460c      	mov	r4, r1
 80021f6:	6831      	ldr	r1, [r6, #0]
 80021f8:	4605      	mov	r5, r0
 80021fa:	b911      	cbnz	r1, 8002202 <sbrk_aligned+0x12>
 80021fc:	f000 fbaa 	bl	8002954 <_sbrk_r>
 8002200:	6030      	str	r0, [r6, #0]
 8002202:	4621      	mov	r1, r4
 8002204:	4628      	mov	r0, r5
 8002206:	f000 fba5 	bl	8002954 <_sbrk_r>
 800220a:	1c43      	adds	r3, r0, #1
 800220c:	d00a      	beq.n	8002224 <sbrk_aligned+0x34>
 800220e:	1cc4      	adds	r4, r0, #3
 8002210:	f024 0403 	bic.w	r4, r4, #3
 8002214:	42a0      	cmp	r0, r4
 8002216:	d007      	beq.n	8002228 <sbrk_aligned+0x38>
 8002218:	1a21      	subs	r1, r4, r0
 800221a:	4628      	mov	r0, r5
 800221c:	f000 fb9a 	bl	8002954 <_sbrk_r>
 8002220:	3001      	adds	r0, #1
 8002222:	d101      	bne.n	8002228 <sbrk_aligned+0x38>
 8002224:	f04f 34ff 	mov.w	r4, #4294967295
 8002228:	4620      	mov	r0, r4
 800222a:	bd70      	pop	{r4, r5, r6, pc}
 800222c:	200002d4 	.word	0x200002d4

08002230 <_malloc_r>:
 8002230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002234:	1ccd      	adds	r5, r1, #3
 8002236:	f025 0503 	bic.w	r5, r5, #3
 800223a:	3508      	adds	r5, #8
 800223c:	2d0c      	cmp	r5, #12
 800223e:	bf38      	it	cc
 8002240:	250c      	movcc	r5, #12
 8002242:	2d00      	cmp	r5, #0
 8002244:	4607      	mov	r7, r0
 8002246:	db01      	blt.n	800224c <_malloc_r+0x1c>
 8002248:	42a9      	cmp	r1, r5
 800224a:	d905      	bls.n	8002258 <_malloc_r+0x28>
 800224c:	230c      	movs	r3, #12
 800224e:	2600      	movs	r6, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4630      	mov	r0, r6
 8002254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002258:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800232c <_malloc_r+0xfc>
 800225c:	f000 f868 	bl	8002330 <__malloc_lock>
 8002260:	f8d8 3000 	ldr.w	r3, [r8]
 8002264:	461c      	mov	r4, r3
 8002266:	bb5c      	cbnz	r4, 80022c0 <_malloc_r+0x90>
 8002268:	4629      	mov	r1, r5
 800226a:	4638      	mov	r0, r7
 800226c:	f7ff ffc0 	bl	80021f0 <sbrk_aligned>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	4604      	mov	r4, r0
 8002274:	d155      	bne.n	8002322 <_malloc_r+0xf2>
 8002276:	f8d8 4000 	ldr.w	r4, [r8]
 800227a:	4626      	mov	r6, r4
 800227c:	2e00      	cmp	r6, #0
 800227e:	d145      	bne.n	800230c <_malloc_r+0xdc>
 8002280:	2c00      	cmp	r4, #0
 8002282:	d048      	beq.n	8002316 <_malloc_r+0xe6>
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	4631      	mov	r1, r6
 8002288:	4638      	mov	r0, r7
 800228a:	eb04 0903 	add.w	r9, r4, r3
 800228e:	f000 fb61 	bl	8002954 <_sbrk_r>
 8002292:	4581      	cmp	r9, r0
 8002294:	d13f      	bne.n	8002316 <_malloc_r+0xe6>
 8002296:	6821      	ldr	r1, [r4, #0]
 8002298:	4638      	mov	r0, r7
 800229a:	1a6d      	subs	r5, r5, r1
 800229c:	4629      	mov	r1, r5
 800229e:	f7ff ffa7 	bl	80021f0 <sbrk_aligned>
 80022a2:	3001      	adds	r0, #1
 80022a4:	d037      	beq.n	8002316 <_malloc_r+0xe6>
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	442b      	add	r3, r5
 80022aa:	6023      	str	r3, [r4, #0]
 80022ac:	f8d8 3000 	ldr.w	r3, [r8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d038      	beq.n	8002326 <_malloc_r+0xf6>
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	42a2      	cmp	r2, r4
 80022b8:	d12b      	bne.n	8002312 <_malloc_r+0xe2>
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e00f      	b.n	80022e0 <_malloc_r+0xb0>
 80022c0:	6822      	ldr	r2, [r4, #0]
 80022c2:	1b52      	subs	r2, r2, r5
 80022c4:	d41f      	bmi.n	8002306 <_malloc_r+0xd6>
 80022c6:	2a0b      	cmp	r2, #11
 80022c8:	d917      	bls.n	80022fa <_malloc_r+0xca>
 80022ca:	1961      	adds	r1, r4, r5
 80022cc:	42a3      	cmp	r3, r4
 80022ce:	6025      	str	r5, [r4, #0]
 80022d0:	bf18      	it	ne
 80022d2:	6059      	strne	r1, [r3, #4]
 80022d4:	6863      	ldr	r3, [r4, #4]
 80022d6:	bf08      	it	eq
 80022d8:	f8c8 1000 	streq.w	r1, [r8]
 80022dc:	5162      	str	r2, [r4, r5]
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	4638      	mov	r0, r7
 80022e2:	f104 060b 	add.w	r6, r4, #11
 80022e6:	f000 f829 	bl	800233c <__malloc_unlock>
 80022ea:	f026 0607 	bic.w	r6, r6, #7
 80022ee:	1d23      	adds	r3, r4, #4
 80022f0:	1af2      	subs	r2, r6, r3
 80022f2:	d0ae      	beq.n	8002252 <_malloc_r+0x22>
 80022f4:	1b9b      	subs	r3, r3, r6
 80022f6:	50a3      	str	r3, [r4, r2]
 80022f8:	e7ab      	b.n	8002252 <_malloc_r+0x22>
 80022fa:	42a3      	cmp	r3, r4
 80022fc:	6862      	ldr	r2, [r4, #4]
 80022fe:	d1dd      	bne.n	80022bc <_malloc_r+0x8c>
 8002300:	f8c8 2000 	str.w	r2, [r8]
 8002304:	e7ec      	b.n	80022e0 <_malloc_r+0xb0>
 8002306:	4623      	mov	r3, r4
 8002308:	6864      	ldr	r4, [r4, #4]
 800230a:	e7ac      	b.n	8002266 <_malloc_r+0x36>
 800230c:	4634      	mov	r4, r6
 800230e:	6876      	ldr	r6, [r6, #4]
 8002310:	e7b4      	b.n	800227c <_malloc_r+0x4c>
 8002312:	4613      	mov	r3, r2
 8002314:	e7cc      	b.n	80022b0 <_malloc_r+0x80>
 8002316:	230c      	movs	r3, #12
 8002318:	4638      	mov	r0, r7
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	f000 f80e 	bl	800233c <__malloc_unlock>
 8002320:	e797      	b.n	8002252 <_malloc_r+0x22>
 8002322:	6025      	str	r5, [r4, #0]
 8002324:	e7dc      	b.n	80022e0 <_malloc_r+0xb0>
 8002326:	605b      	str	r3, [r3, #4]
 8002328:	deff      	udf	#255	; 0xff
 800232a:	bf00      	nop
 800232c:	200002d0 	.word	0x200002d0

08002330 <__malloc_lock>:
 8002330:	4801      	ldr	r0, [pc, #4]	; (8002338 <__malloc_lock+0x8>)
 8002332:	f7ff bf13 	b.w	800215c <__retarget_lock_acquire_recursive>
 8002336:	bf00      	nop
 8002338:	200002cc 	.word	0x200002cc

0800233c <__malloc_unlock>:
 800233c:	4801      	ldr	r0, [pc, #4]	; (8002344 <__malloc_unlock+0x8>)
 800233e:	f7ff bf0e 	b.w	800215e <__retarget_lock_release_recursive>
 8002342:	bf00      	nop
 8002344:	200002cc 	.word	0x200002cc

08002348 <__ssputs_r>:
 8002348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800234c:	461f      	mov	r7, r3
 800234e:	688e      	ldr	r6, [r1, #8]
 8002350:	4682      	mov	sl, r0
 8002352:	42be      	cmp	r6, r7
 8002354:	460c      	mov	r4, r1
 8002356:	4690      	mov	r8, r2
 8002358:	680b      	ldr	r3, [r1, #0]
 800235a:	d82c      	bhi.n	80023b6 <__ssputs_r+0x6e>
 800235c:	898a      	ldrh	r2, [r1, #12]
 800235e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002362:	d026      	beq.n	80023b2 <__ssputs_r+0x6a>
 8002364:	6965      	ldr	r5, [r4, #20]
 8002366:	6909      	ldr	r1, [r1, #16]
 8002368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800236c:	eba3 0901 	sub.w	r9, r3, r1
 8002370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002374:	1c7b      	adds	r3, r7, #1
 8002376:	444b      	add	r3, r9
 8002378:	106d      	asrs	r5, r5, #1
 800237a:	429d      	cmp	r5, r3
 800237c:	bf38      	it	cc
 800237e:	461d      	movcc	r5, r3
 8002380:	0553      	lsls	r3, r2, #21
 8002382:	d527      	bpl.n	80023d4 <__ssputs_r+0x8c>
 8002384:	4629      	mov	r1, r5
 8002386:	f7ff ff53 	bl	8002230 <_malloc_r>
 800238a:	4606      	mov	r6, r0
 800238c:	b360      	cbz	r0, 80023e8 <__ssputs_r+0xa0>
 800238e:	464a      	mov	r2, r9
 8002390:	6921      	ldr	r1, [r4, #16]
 8002392:	f000 fafd 	bl	8002990 <memcpy>
 8002396:	89a3      	ldrh	r3, [r4, #12]
 8002398:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800239c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a0:	81a3      	strh	r3, [r4, #12]
 80023a2:	6126      	str	r6, [r4, #16]
 80023a4:	444e      	add	r6, r9
 80023a6:	6026      	str	r6, [r4, #0]
 80023a8:	463e      	mov	r6, r7
 80023aa:	6165      	str	r5, [r4, #20]
 80023ac:	eba5 0509 	sub.w	r5, r5, r9
 80023b0:	60a5      	str	r5, [r4, #8]
 80023b2:	42be      	cmp	r6, r7
 80023b4:	d900      	bls.n	80023b8 <__ssputs_r+0x70>
 80023b6:	463e      	mov	r6, r7
 80023b8:	4632      	mov	r2, r6
 80023ba:	4641      	mov	r1, r8
 80023bc:	6820      	ldr	r0, [r4, #0]
 80023be:	f000 faaf 	bl	8002920 <memmove>
 80023c2:	2000      	movs	r0, #0
 80023c4:	68a3      	ldr	r3, [r4, #8]
 80023c6:	1b9b      	subs	r3, r3, r6
 80023c8:	60a3      	str	r3, [r4, #8]
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	4433      	add	r3, r6
 80023ce:	6023      	str	r3, [r4, #0]
 80023d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d4:	462a      	mov	r2, r5
 80023d6:	f000 fae9 	bl	80029ac <_realloc_r>
 80023da:	4606      	mov	r6, r0
 80023dc:	2800      	cmp	r0, #0
 80023de:	d1e0      	bne.n	80023a2 <__ssputs_r+0x5a>
 80023e0:	4650      	mov	r0, sl
 80023e2:	6921      	ldr	r1, [r4, #16]
 80023e4:	f7ff febc 	bl	8002160 <_free_r>
 80023e8:	230c      	movs	r3, #12
 80023ea:	f8ca 3000 	str.w	r3, [sl]
 80023ee:	89a3      	ldrh	r3, [r4, #12]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f8:	81a3      	strh	r3, [r4, #12]
 80023fa:	e7e9      	b.n	80023d0 <__ssputs_r+0x88>

080023fc <_svfiprintf_r>:
 80023fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002400:	4698      	mov	r8, r3
 8002402:	898b      	ldrh	r3, [r1, #12]
 8002404:	4607      	mov	r7, r0
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	460d      	mov	r5, r1
 800240a:	4614      	mov	r4, r2
 800240c:	b09d      	sub	sp, #116	; 0x74
 800240e:	d50e      	bpl.n	800242e <_svfiprintf_r+0x32>
 8002410:	690b      	ldr	r3, [r1, #16]
 8002412:	b963      	cbnz	r3, 800242e <_svfiprintf_r+0x32>
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	f7ff ff0b 	bl	8002230 <_malloc_r>
 800241a:	6028      	str	r0, [r5, #0]
 800241c:	6128      	str	r0, [r5, #16]
 800241e:	b920      	cbnz	r0, 800242a <_svfiprintf_r+0x2e>
 8002420:	230c      	movs	r3, #12
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	e0d0      	b.n	80025cc <_svfiprintf_r+0x1d0>
 800242a:	2340      	movs	r3, #64	; 0x40
 800242c:	616b      	str	r3, [r5, #20]
 800242e:	2300      	movs	r3, #0
 8002430:	9309      	str	r3, [sp, #36]	; 0x24
 8002432:	2320      	movs	r3, #32
 8002434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002438:	2330      	movs	r3, #48	; 0x30
 800243a:	f04f 0901 	mov.w	r9, #1
 800243e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002442:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80025e4 <_svfiprintf_r+0x1e8>
 8002446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800244a:	4623      	mov	r3, r4
 800244c:	469a      	mov	sl, r3
 800244e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002452:	b10a      	cbz	r2, 8002458 <_svfiprintf_r+0x5c>
 8002454:	2a25      	cmp	r2, #37	; 0x25
 8002456:	d1f9      	bne.n	800244c <_svfiprintf_r+0x50>
 8002458:	ebba 0b04 	subs.w	fp, sl, r4
 800245c:	d00b      	beq.n	8002476 <_svfiprintf_r+0x7a>
 800245e:	465b      	mov	r3, fp
 8002460:	4622      	mov	r2, r4
 8002462:	4629      	mov	r1, r5
 8002464:	4638      	mov	r0, r7
 8002466:	f7ff ff6f 	bl	8002348 <__ssputs_r>
 800246a:	3001      	adds	r0, #1
 800246c:	f000 80a9 	beq.w	80025c2 <_svfiprintf_r+0x1c6>
 8002470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002472:	445a      	add	r2, fp
 8002474:	9209      	str	r2, [sp, #36]	; 0x24
 8002476:	f89a 3000 	ldrb.w	r3, [sl]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a1 	beq.w	80025c2 <_svfiprintf_r+0x1c6>
 8002480:	2300      	movs	r3, #0
 8002482:	f04f 32ff 	mov.w	r2, #4294967295
 8002486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800248a:	f10a 0a01 	add.w	sl, sl, #1
 800248e:	9304      	str	r3, [sp, #16]
 8002490:	9307      	str	r3, [sp, #28]
 8002492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002496:	931a      	str	r3, [sp, #104]	; 0x68
 8002498:	4654      	mov	r4, sl
 800249a:	2205      	movs	r2, #5
 800249c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024a0:	4850      	ldr	r0, [pc, #320]	; (80025e4 <_svfiprintf_r+0x1e8>)
 80024a2:	f000 fa67 	bl	8002974 <memchr>
 80024a6:	9a04      	ldr	r2, [sp, #16]
 80024a8:	b9d8      	cbnz	r0, 80024e2 <_svfiprintf_r+0xe6>
 80024aa:	06d0      	lsls	r0, r2, #27
 80024ac:	bf44      	itt	mi
 80024ae:	2320      	movmi	r3, #32
 80024b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024b4:	0711      	lsls	r1, r2, #28
 80024b6:	bf44      	itt	mi
 80024b8:	232b      	movmi	r3, #43	; 0x2b
 80024ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024be:	f89a 3000 	ldrb.w	r3, [sl]
 80024c2:	2b2a      	cmp	r3, #42	; 0x2a
 80024c4:	d015      	beq.n	80024f2 <_svfiprintf_r+0xf6>
 80024c6:	4654      	mov	r4, sl
 80024c8:	2000      	movs	r0, #0
 80024ca:	f04f 0c0a 	mov.w	ip, #10
 80024ce:	9a07      	ldr	r2, [sp, #28]
 80024d0:	4621      	mov	r1, r4
 80024d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024d6:	3b30      	subs	r3, #48	; 0x30
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d94d      	bls.n	8002578 <_svfiprintf_r+0x17c>
 80024dc:	b1b0      	cbz	r0, 800250c <_svfiprintf_r+0x110>
 80024de:	9207      	str	r2, [sp, #28]
 80024e0:	e014      	b.n	800250c <_svfiprintf_r+0x110>
 80024e2:	eba0 0308 	sub.w	r3, r0, r8
 80024e6:	fa09 f303 	lsl.w	r3, r9, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	46a2      	mov	sl, r4
 80024ee:	9304      	str	r3, [sp, #16]
 80024f0:	e7d2      	b.n	8002498 <_svfiprintf_r+0x9c>
 80024f2:	9b03      	ldr	r3, [sp, #12]
 80024f4:	1d19      	adds	r1, r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	9103      	str	r1, [sp, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bfbb      	ittet	lt
 80024fe:	425b      	neglt	r3, r3
 8002500:	f042 0202 	orrlt.w	r2, r2, #2
 8002504:	9307      	strge	r3, [sp, #28]
 8002506:	9307      	strlt	r3, [sp, #28]
 8002508:	bfb8      	it	lt
 800250a:	9204      	strlt	r2, [sp, #16]
 800250c:	7823      	ldrb	r3, [r4, #0]
 800250e:	2b2e      	cmp	r3, #46	; 0x2e
 8002510:	d10c      	bne.n	800252c <_svfiprintf_r+0x130>
 8002512:	7863      	ldrb	r3, [r4, #1]
 8002514:	2b2a      	cmp	r3, #42	; 0x2a
 8002516:	d134      	bne.n	8002582 <_svfiprintf_r+0x186>
 8002518:	9b03      	ldr	r3, [sp, #12]
 800251a:	3402      	adds	r4, #2
 800251c:	1d1a      	adds	r2, r3, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	9203      	str	r2, [sp, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	bfb8      	it	lt
 8002526:	f04f 33ff 	movlt.w	r3, #4294967295
 800252a:	9305      	str	r3, [sp, #20]
 800252c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80025e8 <_svfiprintf_r+0x1ec>
 8002530:	2203      	movs	r2, #3
 8002532:	4650      	mov	r0, sl
 8002534:	7821      	ldrb	r1, [r4, #0]
 8002536:	f000 fa1d 	bl	8002974 <memchr>
 800253a:	b138      	cbz	r0, 800254c <_svfiprintf_r+0x150>
 800253c:	2240      	movs	r2, #64	; 0x40
 800253e:	9b04      	ldr	r3, [sp, #16]
 8002540:	eba0 000a 	sub.w	r0, r0, sl
 8002544:	4082      	lsls	r2, r0
 8002546:	4313      	orrs	r3, r2
 8002548:	3401      	adds	r4, #1
 800254a:	9304      	str	r3, [sp, #16]
 800254c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002550:	2206      	movs	r2, #6
 8002552:	4826      	ldr	r0, [pc, #152]	; (80025ec <_svfiprintf_r+0x1f0>)
 8002554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002558:	f000 fa0c 	bl	8002974 <memchr>
 800255c:	2800      	cmp	r0, #0
 800255e:	d038      	beq.n	80025d2 <_svfiprintf_r+0x1d6>
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <_svfiprintf_r+0x1f4>)
 8002562:	bb1b      	cbnz	r3, 80025ac <_svfiprintf_r+0x1b0>
 8002564:	9b03      	ldr	r3, [sp, #12]
 8002566:	3307      	adds	r3, #7
 8002568:	f023 0307 	bic.w	r3, r3, #7
 800256c:	3308      	adds	r3, #8
 800256e:	9303      	str	r3, [sp, #12]
 8002570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002572:	4433      	add	r3, r6
 8002574:	9309      	str	r3, [sp, #36]	; 0x24
 8002576:	e768      	b.n	800244a <_svfiprintf_r+0x4e>
 8002578:	460c      	mov	r4, r1
 800257a:	2001      	movs	r0, #1
 800257c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002580:	e7a6      	b.n	80024d0 <_svfiprintf_r+0xd4>
 8002582:	2300      	movs	r3, #0
 8002584:	f04f 0c0a 	mov.w	ip, #10
 8002588:	4619      	mov	r1, r3
 800258a:	3401      	adds	r4, #1
 800258c:	9305      	str	r3, [sp, #20]
 800258e:	4620      	mov	r0, r4
 8002590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002594:	3a30      	subs	r2, #48	; 0x30
 8002596:	2a09      	cmp	r2, #9
 8002598:	d903      	bls.n	80025a2 <_svfiprintf_r+0x1a6>
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0c6      	beq.n	800252c <_svfiprintf_r+0x130>
 800259e:	9105      	str	r1, [sp, #20]
 80025a0:	e7c4      	b.n	800252c <_svfiprintf_r+0x130>
 80025a2:	4604      	mov	r4, r0
 80025a4:	2301      	movs	r3, #1
 80025a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80025aa:	e7f0      	b.n	800258e <_svfiprintf_r+0x192>
 80025ac:	ab03      	add	r3, sp, #12
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	462a      	mov	r2, r5
 80025b2:	4638      	mov	r0, r7
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <_svfiprintf_r+0x1f8>)
 80025b6:	a904      	add	r1, sp, #16
 80025b8:	f3af 8000 	nop.w
 80025bc:	1c42      	adds	r2, r0, #1
 80025be:	4606      	mov	r6, r0
 80025c0:	d1d6      	bne.n	8002570 <_svfiprintf_r+0x174>
 80025c2:	89ab      	ldrh	r3, [r5, #12]
 80025c4:	065b      	lsls	r3, r3, #25
 80025c6:	f53f af2d 	bmi.w	8002424 <_svfiprintf_r+0x28>
 80025ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025cc:	b01d      	add	sp, #116	; 0x74
 80025ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025d2:	ab03      	add	r3, sp, #12
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	462a      	mov	r2, r5
 80025d8:	4638      	mov	r0, r7
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <_svfiprintf_r+0x1f8>)
 80025dc:	a904      	add	r1, sp, #16
 80025de:	f000 f87d 	bl	80026dc <_printf_i>
 80025e2:	e7eb      	b.n	80025bc <_svfiprintf_r+0x1c0>
 80025e4:	08002a9e 	.word	0x08002a9e
 80025e8:	08002aa4 	.word	0x08002aa4
 80025ec:	08002aa8 	.word	0x08002aa8
 80025f0:	00000000 	.word	0x00000000
 80025f4:	08002349 	.word	0x08002349

080025f8 <_printf_common>:
 80025f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025fc:	4616      	mov	r6, r2
 80025fe:	4699      	mov	r9, r3
 8002600:	688a      	ldr	r2, [r1, #8]
 8002602:	690b      	ldr	r3, [r1, #16]
 8002604:	4607      	mov	r7, r0
 8002606:	4293      	cmp	r3, r2
 8002608:	bfb8      	it	lt
 800260a:	4613      	movlt	r3, r2
 800260c:	6033      	str	r3, [r6, #0]
 800260e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002612:	460c      	mov	r4, r1
 8002614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002618:	b10a      	cbz	r2, 800261e <_printf_common+0x26>
 800261a:	3301      	adds	r3, #1
 800261c:	6033      	str	r3, [r6, #0]
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	0699      	lsls	r1, r3, #26
 8002622:	bf42      	ittt	mi
 8002624:	6833      	ldrmi	r3, [r6, #0]
 8002626:	3302      	addmi	r3, #2
 8002628:	6033      	strmi	r3, [r6, #0]
 800262a:	6825      	ldr	r5, [r4, #0]
 800262c:	f015 0506 	ands.w	r5, r5, #6
 8002630:	d106      	bne.n	8002640 <_printf_common+0x48>
 8002632:	f104 0a19 	add.w	sl, r4, #25
 8002636:	68e3      	ldr	r3, [r4, #12]
 8002638:	6832      	ldr	r2, [r6, #0]
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	42ab      	cmp	r3, r5
 800263e:	dc2b      	bgt.n	8002698 <_printf_common+0xa0>
 8002640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002644:	1e13      	subs	r3, r2, #0
 8002646:	6822      	ldr	r2, [r4, #0]
 8002648:	bf18      	it	ne
 800264a:	2301      	movne	r3, #1
 800264c:	0692      	lsls	r2, r2, #26
 800264e:	d430      	bmi.n	80026b2 <_printf_common+0xba>
 8002650:	4649      	mov	r1, r9
 8002652:	4638      	mov	r0, r7
 8002654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002658:	47c0      	blx	r8
 800265a:	3001      	adds	r0, #1
 800265c:	d023      	beq.n	80026a6 <_printf_common+0xae>
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	6922      	ldr	r2, [r4, #16]
 8002662:	f003 0306 	and.w	r3, r3, #6
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf14      	ite	ne
 800266a:	2500      	movne	r5, #0
 800266c:	6833      	ldreq	r3, [r6, #0]
 800266e:	f04f 0600 	mov.w	r6, #0
 8002672:	bf08      	it	eq
 8002674:	68e5      	ldreq	r5, [r4, #12]
 8002676:	f104 041a 	add.w	r4, r4, #26
 800267a:	bf08      	it	eq
 800267c:	1aed      	subeq	r5, r5, r3
 800267e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002682:	bf08      	it	eq
 8002684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002688:	4293      	cmp	r3, r2
 800268a:	bfc4      	itt	gt
 800268c:	1a9b      	subgt	r3, r3, r2
 800268e:	18ed      	addgt	r5, r5, r3
 8002690:	42b5      	cmp	r5, r6
 8002692:	d11a      	bne.n	80026ca <_printf_common+0xd2>
 8002694:	2000      	movs	r0, #0
 8002696:	e008      	b.n	80026aa <_printf_common+0xb2>
 8002698:	2301      	movs	r3, #1
 800269a:	4652      	mov	r2, sl
 800269c:	4649      	mov	r1, r9
 800269e:	4638      	mov	r0, r7
 80026a0:	47c0      	blx	r8
 80026a2:	3001      	adds	r0, #1
 80026a4:	d103      	bne.n	80026ae <_printf_common+0xb6>
 80026a6:	f04f 30ff 	mov.w	r0, #4294967295
 80026aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ae:	3501      	adds	r5, #1
 80026b0:	e7c1      	b.n	8002636 <_printf_common+0x3e>
 80026b2:	2030      	movs	r0, #48	; 0x30
 80026b4:	18e1      	adds	r1, r4, r3
 80026b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026c0:	4422      	add	r2, r4
 80026c2:	3302      	adds	r3, #2
 80026c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026c8:	e7c2      	b.n	8002650 <_printf_common+0x58>
 80026ca:	2301      	movs	r3, #1
 80026cc:	4622      	mov	r2, r4
 80026ce:	4649      	mov	r1, r9
 80026d0:	4638      	mov	r0, r7
 80026d2:	47c0      	blx	r8
 80026d4:	3001      	adds	r0, #1
 80026d6:	d0e6      	beq.n	80026a6 <_printf_common+0xae>
 80026d8:	3601      	adds	r6, #1
 80026da:	e7d9      	b.n	8002690 <_printf_common+0x98>

080026dc <_printf_i>:
 80026dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026e0:	7e0f      	ldrb	r7, [r1, #24]
 80026e2:	4691      	mov	r9, r2
 80026e4:	2f78      	cmp	r7, #120	; 0x78
 80026e6:	4680      	mov	r8, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	469a      	mov	sl, r3
 80026ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026f2:	d807      	bhi.n	8002704 <_printf_i+0x28>
 80026f4:	2f62      	cmp	r7, #98	; 0x62
 80026f6:	d80a      	bhi.n	800270e <_printf_i+0x32>
 80026f8:	2f00      	cmp	r7, #0
 80026fa:	f000 80d5 	beq.w	80028a8 <_printf_i+0x1cc>
 80026fe:	2f58      	cmp	r7, #88	; 0x58
 8002700:	f000 80c1 	beq.w	8002886 <_printf_i+0x1aa>
 8002704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800270c:	e03a      	b.n	8002784 <_printf_i+0xa8>
 800270e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002712:	2b15      	cmp	r3, #21
 8002714:	d8f6      	bhi.n	8002704 <_printf_i+0x28>
 8002716:	a101      	add	r1, pc, #4	; (adr r1, 800271c <_printf_i+0x40>)
 8002718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800271c:	08002775 	.word	0x08002775
 8002720:	08002789 	.word	0x08002789
 8002724:	08002705 	.word	0x08002705
 8002728:	08002705 	.word	0x08002705
 800272c:	08002705 	.word	0x08002705
 8002730:	08002705 	.word	0x08002705
 8002734:	08002789 	.word	0x08002789
 8002738:	08002705 	.word	0x08002705
 800273c:	08002705 	.word	0x08002705
 8002740:	08002705 	.word	0x08002705
 8002744:	08002705 	.word	0x08002705
 8002748:	0800288f 	.word	0x0800288f
 800274c:	080027b5 	.word	0x080027b5
 8002750:	08002849 	.word	0x08002849
 8002754:	08002705 	.word	0x08002705
 8002758:	08002705 	.word	0x08002705
 800275c:	080028b1 	.word	0x080028b1
 8002760:	08002705 	.word	0x08002705
 8002764:	080027b5 	.word	0x080027b5
 8002768:	08002705 	.word	0x08002705
 800276c:	08002705 	.word	0x08002705
 8002770:	08002851 	.word	0x08002851
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	602a      	str	r2, [r5, #0]
 800277c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002784:	2301      	movs	r3, #1
 8002786:	e0a0      	b.n	80028ca <_printf_i+0x1ee>
 8002788:	6820      	ldr	r0, [r4, #0]
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	0607      	lsls	r7, r0, #24
 800278e:	f103 0104 	add.w	r1, r3, #4
 8002792:	6029      	str	r1, [r5, #0]
 8002794:	d501      	bpl.n	800279a <_printf_i+0xbe>
 8002796:	681e      	ldr	r6, [r3, #0]
 8002798:	e003      	b.n	80027a2 <_printf_i+0xc6>
 800279a:	0646      	lsls	r6, r0, #25
 800279c:	d5fb      	bpl.n	8002796 <_printf_i+0xba>
 800279e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	da03      	bge.n	80027ae <_printf_i+0xd2>
 80027a6:	232d      	movs	r3, #45	; 0x2d
 80027a8:	4276      	negs	r6, r6
 80027aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027ae:	230a      	movs	r3, #10
 80027b0:	4859      	ldr	r0, [pc, #356]	; (8002918 <_printf_i+0x23c>)
 80027b2:	e012      	b.n	80027da <_printf_i+0xfe>
 80027b4:	682b      	ldr	r3, [r5, #0]
 80027b6:	6820      	ldr	r0, [r4, #0]
 80027b8:	1d19      	adds	r1, r3, #4
 80027ba:	6029      	str	r1, [r5, #0]
 80027bc:	0605      	lsls	r5, r0, #24
 80027be:	d501      	bpl.n	80027c4 <_printf_i+0xe8>
 80027c0:	681e      	ldr	r6, [r3, #0]
 80027c2:	e002      	b.n	80027ca <_printf_i+0xee>
 80027c4:	0641      	lsls	r1, r0, #25
 80027c6:	d5fb      	bpl.n	80027c0 <_printf_i+0xe4>
 80027c8:	881e      	ldrh	r6, [r3, #0]
 80027ca:	2f6f      	cmp	r7, #111	; 0x6f
 80027cc:	bf0c      	ite	eq
 80027ce:	2308      	moveq	r3, #8
 80027d0:	230a      	movne	r3, #10
 80027d2:	4851      	ldr	r0, [pc, #324]	; (8002918 <_printf_i+0x23c>)
 80027d4:	2100      	movs	r1, #0
 80027d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027da:	6865      	ldr	r5, [r4, #4]
 80027dc:	2d00      	cmp	r5, #0
 80027de:	bfa8      	it	ge
 80027e0:	6821      	ldrge	r1, [r4, #0]
 80027e2:	60a5      	str	r5, [r4, #8]
 80027e4:	bfa4      	itt	ge
 80027e6:	f021 0104 	bicge.w	r1, r1, #4
 80027ea:	6021      	strge	r1, [r4, #0]
 80027ec:	b90e      	cbnz	r6, 80027f2 <_printf_i+0x116>
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	d04b      	beq.n	800288a <_printf_i+0x1ae>
 80027f2:	4615      	mov	r5, r2
 80027f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80027f8:	fb03 6711 	mls	r7, r3, r1, r6
 80027fc:	5dc7      	ldrb	r7, [r0, r7]
 80027fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002802:	4637      	mov	r7, r6
 8002804:	42bb      	cmp	r3, r7
 8002806:	460e      	mov	r6, r1
 8002808:	d9f4      	bls.n	80027f4 <_printf_i+0x118>
 800280a:	2b08      	cmp	r3, #8
 800280c:	d10b      	bne.n	8002826 <_printf_i+0x14a>
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	07de      	lsls	r6, r3, #31
 8002812:	d508      	bpl.n	8002826 <_printf_i+0x14a>
 8002814:	6923      	ldr	r3, [r4, #16]
 8002816:	6861      	ldr	r1, [r4, #4]
 8002818:	4299      	cmp	r1, r3
 800281a:	bfde      	ittt	le
 800281c:	2330      	movle	r3, #48	; 0x30
 800281e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002822:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002826:	1b52      	subs	r2, r2, r5
 8002828:	6122      	str	r2, [r4, #16]
 800282a:	464b      	mov	r3, r9
 800282c:	4621      	mov	r1, r4
 800282e:	4640      	mov	r0, r8
 8002830:	f8cd a000 	str.w	sl, [sp]
 8002834:	aa03      	add	r2, sp, #12
 8002836:	f7ff fedf 	bl	80025f8 <_printf_common>
 800283a:	3001      	adds	r0, #1
 800283c:	d14a      	bne.n	80028d4 <_printf_i+0x1f8>
 800283e:	f04f 30ff 	mov.w	r0, #4294967295
 8002842:	b004      	add	sp, #16
 8002844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	f043 0320 	orr.w	r3, r3, #32
 800284e:	6023      	str	r3, [r4, #0]
 8002850:	2778      	movs	r7, #120	; 0x78
 8002852:	4832      	ldr	r0, [pc, #200]	; (800291c <_printf_i+0x240>)
 8002854:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	6829      	ldr	r1, [r5, #0]
 800285c:	061f      	lsls	r7, r3, #24
 800285e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002862:	d402      	bmi.n	800286a <_printf_i+0x18e>
 8002864:	065f      	lsls	r7, r3, #25
 8002866:	bf48      	it	mi
 8002868:	b2b6      	uxthmi	r6, r6
 800286a:	07df      	lsls	r7, r3, #31
 800286c:	bf48      	it	mi
 800286e:	f043 0320 	orrmi.w	r3, r3, #32
 8002872:	6029      	str	r1, [r5, #0]
 8002874:	bf48      	it	mi
 8002876:	6023      	strmi	r3, [r4, #0]
 8002878:	b91e      	cbnz	r6, 8002882 <_printf_i+0x1a6>
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	f023 0320 	bic.w	r3, r3, #32
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	2310      	movs	r3, #16
 8002884:	e7a6      	b.n	80027d4 <_printf_i+0xf8>
 8002886:	4824      	ldr	r0, [pc, #144]	; (8002918 <_printf_i+0x23c>)
 8002888:	e7e4      	b.n	8002854 <_printf_i+0x178>
 800288a:	4615      	mov	r5, r2
 800288c:	e7bd      	b.n	800280a <_printf_i+0x12e>
 800288e:	682b      	ldr	r3, [r5, #0]
 8002890:	6826      	ldr	r6, [r4, #0]
 8002892:	1d18      	adds	r0, r3, #4
 8002894:	6961      	ldr	r1, [r4, #20]
 8002896:	6028      	str	r0, [r5, #0]
 8002898:	0635      	lsls	r5, r6, #24
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	d501      	bpl.n	80028a2 <_printf_i+0x1c6>
 800289e:	6019      	str	r1, [r3, #0]
 80028a0:	e002      	b.n	80028a8 <_printf_i+0x1cc>
 80028a2:	0670      	lsls	r0, r6, #25
 80028a4:	d5fb      	bpl.n	800289e <_printf_i+0x1c2>
 80028a6:	8019      	strh	r1, [r3, #0]
 80028a8:	2300      	movs	r3, #0
 80028aa:	4615      	mov	r5, r2
 80028ac:	6123      	str	r3, [r4, #16]
 80028ae:	e7bc      	b.n	800282a <_printf_i+0x14e>
 80028b0:	682b      	ldr	r3, [r5, #0]
 80028b2:	2100      	movs	r1, #0
 80028b4:	1d1a      	adds	r2, r3, #4
 80028b6:	602a      	str	r2, [r5, #0]
 80028b8:	681d      	ldr	r5, [r3, #0]
 80028ba:	6862      	ldr	r2, [r4, #4]
 80028bc:	4628      	mov	r0, r5
 80028be:	f000 f859 	bl	8002974 <memchr>
 80028c2:	b108      	cbz	r0, 80028c8 <_printf_i+0x1ec>
 80028c4:	1b40      	subs	r0, r0, r5
 80028c6:	6060      	str	r0, [r4, #4]
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	6123      	str	r3, [r4, #16]
 80028cc:	2300      	movs	r3, #0
 80028ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028d2:	e7aa      	b.n	800282a <_printf_i+0x14e>
 80028d4:	462a      	mov	r2, r5
 80028d6:	4649      	mov	r1, r9
 80028d8:	4640      	mov	r0, r8
 80028da:	6923      	ldr	r3, [r4, #16]
 80028dc:	47d0      	blx	sl
 80028de:	3001      	adds	r0, #1
 80028e0:	d0ad      	beq.n	800283e <_printf_i+0x162>
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	079b      	lsls	r3, r3, #30
 80028e6:	d413      	bmi.n	8002910 <_printf_i+0x234>
 80028e8:	68e0      	ldr	r0, [r4, #12]
 80028ea:	9b03      	ldr	r3, [sp, #12]
 80028ec:	4298      	cmp	r0, r3
 80028ee:	bfb8      	it	lt
 80028f0:	4618      	movlt	r0, r3
 80028f2:	e7a6      	b.n	8002842 <_printf_i+0x166>
 80028f4:	2301      	movs	r3, #1
 80028f6:	4632      	mov	r2, r6
 80028f8:	4649      	mov	r1, r9
 80028fa:	4640      	mov	r0, r8
 80028fc:	47d0      	blx	sl
 80028fe:	3001      	adds	r0, #1
 8002900:	d09d      	beq.n	800283e <_printf_i+0x162>
 8002902:	3501      	adds	r5, #1
 8002904:	68e3      	ldr	r3, [r4, #12]
 8002906:	9903      	ldr	r1, [sp, #12]
 8002908:	1a5b      	subs	r3, r3, r1
 800290a:	42ab      	cmp	r3, r5
 800290c:	dcf2      	bgt.n	80028f4 <_printf_i+0x218>
 800290e:	e7eb      	b.n	80028e8 <_printf_i+0x20c>
 8002910:	2500      	movs	r5, #0
 8002912:	f104 0619 	add.w	r6, r4, #25
 8002916:	e7f5      	b.n	8002904 <_printf_i+0x228>
 8002918:	08002aaf 	.word	0x08002aaf
 800291c:	08002ac0 	.word	0x08002ac0

08002920 <memmove>:
 8002920:	4288      	cmp	r0, r1
 8002922:	b510      	push	{r4, lr}
 8002924:	eb01 0402 	add.w	r4, r1, r2
 8002928:	d902      	bls.n	8002930 <memmove+0x10>
 800292a:	4284      	cmp	r4, r0
 800292c:	4623      	mov	r3, r4
 800292e:	d807      	bhi.n	8002940 <memmove+0x20>
 8002930:	1e43      	subs	r3, r0, #1
 8002932:	42a1      	cmp	r1, r4
 8002934:	d008      	beq.n	8002948 <memmove+0x28>
 8002936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800293a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800293e:	e7f8      	b.n	8002932 <memmove+0x12>
 8002940:	4601      	mov	r1, r0
 8002942:	4402      	add	r2, r0
 8002944:	428a      	cmp	r2, r1
 8002946:	d100      	bne.n	800294a <memmove+0x2a>
 8002948:	bd10      	pop	{r4, pc}
 800294a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800294e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002952:	e7f7      	b.n	8002944 <memmove+0x24>

08002954 <_sbrk_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	2300      	movs	r3, #0
 8002958:	4d05      	ldr	r5, [pc, #20]	; (8002970 <_sbrk_r+0x1c>)
 800295a:	4604      	mov	r4, r0
 800295c:	4608      	mov	r0, r1
 800295e:	602b      	str	r3, [r5, #0]
 8002960:	f7fe f872 	bl	8000a48 <_sbrk>
 8002964:	1c43      	adds	r3, r0, #1
 8002966:	d102      	bne.n	800296e <_sbrk_r+0x1a>
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	b103      	cbz	r3, 800296e <_sbrk_r+0x1a>
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	bd38      	pop	{r3, r4, r5, pc}
 8002970:	200002c8 	.word	0x200002c8

08002974 <memchr>:
 8002974:	4603      	mov	r3, r0
 8002976:	b510      	push	{r4, lr}
 8002978:	b2c9      	uxtb	r1, r1
 800297a:	4402      	add	r2, r0
 800297c:	4293      	cmp	r3, r2
 800297e:	4618      	mov	r0, r3
 8002980:	d101      	bne.n	8002986 <memchr+0x12>
 8002982:	2000      	movs	r0, #0
 8002984:	e003      	b.n	800298e <memchr+0x1a>
 8002986:	7804      	ldrb	r4, [r0, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	428c      	cmp	r4, r1
 800298c:	d1f6      	bne.n	800297c <memchr+0x8>
 800298e:	bd10      	pop	{r4, pc}

08002990 <memcpy>:
 8002990:	440a      	add	r2, r1
 8002992:	4291      	cmp	r1, r2
 8002994:	f100 33ff 	add.w	r3, r0, #4294967295
 8002998:	d100      	bne.n	800299c <memcpy+0xc>
 800299a:	4770      	bx	lr
 800299c:	b510      	push	{r4, lr}
 800299e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029a2:	4291      	cmp	r1, r2
 80029a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029a8:	d1f9      	bne.n	800299e <memcpy+0xe>
 80029aa:	bd10      	pop	{r4, pc}

080029ac <_realloc_r>:
 80029ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b0:	4680      	mov	r8, r0
 80029b2:	4614      	mov	r4, r2
 80029b4:	460e      	mov	r6, r1
 80029b6:	b921      	cbnz	r1, 80029c2 <_realloc_r+0x16>
 80029b8:	4611      	mov	r1, r2
 80029ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029be:	f7ff bc37 	b.w	8002230 <_malloc_r>
 80029c2:	b92a      	cbnz	r2, 80029d0 <_realloc_r+0x24>
 80029c4:	f7ff fbcc 	bl	8002160 <_free_r>
 80029c8:	4625      	mov	r5, r4
 80029ca:	4628      	mov	r0, r5
 80029cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029d0:	f000 f81b 	bl	8002a0a <_malloc_usable_size_r>
 80029d4:	4284      	cmp	r4, r0
 80029d6:	4607      	mov	r7, r0
 80029d8:	d802      	bhi.n	80029e0 <_realloc_r+0x34>
 80029da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80029de:	d812      	bhi.n	8002a06 <_realloc_r+0x5a>
 80029e0:	4621      	mov	r1, r4
 80029e2:	4640      	mov	r0, r8
 80029e4:	f7ff fc24 	bl	8002230 <_malloc_r>
 80029e8:	4605      	mov	r5, r0
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d0ed      	beq.n	80029ca <_realloc_r+0x1e>
 80029ee:	42bc      	cmp	r4, r7
 80029f0:	4622      	mov	r2, r4
 80029f2:	4631      	mov	r1, r6
 80029f4:	bf28      	it	cs
 80029f6:	463a      	movcs	r2, r7
 80029f8:	f7ff ffca 	bl	8002990 <memcpy>
 80029fc:	4631      	mov	r1, r6
 80029fe:	4640      	mov	r0, r8
 8002a00:	f7ff fbae 	bl	8002160 <_free_r>
 8002a04:	e7e1      	b.n	80029ca <_realloc_r+0x1e>
 8002a06:	4635      	mov	r5, r6
 8002a08:	e7df      	b.n	80029ca <_realloc_r+0x1e>

08002a0a <_malloc_usable_size_r>:
 8002a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a0e:	1f18      	subs	r0, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bfbc      	itt	lt
 8002a14:	580b      	ldrlt	r3, [r1, r0]
 8002a16:	18c0      	addlt	r0, r0, r3
 8002a18:	4770      	bx	lr
	...

08002a1c <_init>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	bf00      	nop
 8002a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a22:	bc08      	pop	{r3}
 8002a24:	469e      	mov	lr, r3
 8002a26:	4770      	bx	lr

08002a28 <_fini>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	bf00      	nop
 8002a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2e:	bc08      	pop	{r3}
 8002a30:	469e      	mov	lr, r3
 8002a32:	4770      	bx	lr
