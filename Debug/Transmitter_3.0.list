
Transmitter_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e18  08003e18  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003e18  08003e18  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e18  08003e18  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000064  08003e84  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08003e84  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d97e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ee  00000000  00000000  0002da4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abc  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bd9  00000000  00000000  000314ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103d7  00000000  00000000  00049085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008db67  00000000  00000000  0005945c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e38  00000000  00000000  000e6fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000eadfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d4c 	.word	0x08003d4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003d4c 	.word	0x08003d4c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	b0bd      	sub	sp, #244	; 0xf4
 8000150:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe75 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fa57 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fc35 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 fc15 	bl	800098c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000162:	f000 fbe9 	bl	8000938 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000166:	f000 fb3f 	bl	80007e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800016a:	f000 fb91 	bl	8000890 <MX_TIM4_Init>
  MX_ADC1_Init();
 800016e:	f000 faa7 	bl	80006c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_SET_COUNTER(&htim3, encoders_start_counter);
 8000172:	4b95      	ldr	r3, [pc, #596]	; (80003c8 <main+0x27c>)
 8000174:	881a      	ldrh	r2, [r3, #0]
 8000176:	4b95      	ldr	r3, [pc, #596]	; (80003cc <main+0x280>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800017c:	213c      	movs	r1, #60	; 0x3c
 800017e:	4893      	ldr	r0, [pc, #588]	; (80003cc <main+0x280>)
 8000180:	f002 fdf0 	bl	8002d64 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim4, encoders_start_counter);
 8000184:	4b90      	ldr	r3, [pc, #576]	; (80003c8 <main+0x27c>)
 8000186:	881a      	ldrh	r2, [r3, #0]
 8000188:	4b91      	ldr	r3, [pc, #580]	; (80003d0 <main+0x284>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800018e:	213c      	movs	r1, #60	; 0x3c
 8000190:	488f      	ldr	r0, [pc, #572]	; (80003d0 <main+0x284>)
 8000192:	f002 fde7 	bl	8002d64 <HAL_TIM_Encoder_Start>

	HAL_ADCEx_Calibration_Start(&hadc1);//калибровка ADC
 8000196:	488f      	ldr	r0, [pc, #572]	; (80003d4 <main+0x288>)
 8000198:	f001 fa80 	bl	800169c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 7);
 800019c:	2207      	movs	r2, #7
 800019e:	498e      	ldr	r1, [pc, #568]	; (80003d8 <main+0x28c>)
 80001a0:	488c      	ldr	r0, [pc, #560]	; (80003d4 <main+0x288>)
 80001a2:	f000 ff87 	bl	80010b4 <HAL_ADC_Start_DMA>


	uint8_t message[100] = { '\0' };
 80001a6:	2300      	movs	r3, #0
 80001a8:	637b      	str	r3, [r7, #52]	; 0x34
 80001aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001ae:	2260      	movs	r2, #96	; 0x60
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f003 f938 	bl	8003428 <memset>
	transmit_data[4] = 127;
 80001b8:	4b88      	ldr	r3, [pc, #544]	; (80003dc <main+0x290>)
 80001ba:	227f      	movs	r2, #127	; 0x7f
 80001bc:	711a      	strb	r2, [r3, #4]
	transmit_data[5] = 127;
 80001be:	4b87      	ldr	r3, [pc, #540]	; (80003dc <main+0x290>)
 80001c0:	227f      	movs	r2, #127	; 0x7f
 80001c2:	715a      	strb	r2, [r3, #5]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//обработка энкодера 1
		encoder_1_cur_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80001c4:	4b81      	ldr	r3, [pc, #516]	; (80003cc <main+0x280>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	4b84      	ldr	r3, [pc, #528]	; (80003e0 <main+0x294>)
 80001ce:	801a      	strh	r2, [r3, #0]
		if (encoder_1_cur_counter != encoder_1_prev_counter) {
 80001d0:	4b83      	ldr	r3, [pc, #524]	; (80003e0 <main+0x294>)
 80001d2:	881a      	ldrh	r2, [r3, #0]
 80001d4:	4b83      	ldr	r3, [pc, #524]	; (80003e4 <main+0x298>)
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d026      	beq.n	800022a <main+0xde>
			if (encoder_1_cur_counter > encoder_1_prev_counter) {
 80001dc:	4b80      	ldr	r3, [pc, #512]	; (80003e0 <main+0x294>)
 80001de:	881a      	ldrh	r2, [r3, #0]
 80001e0:	4b80      	ldr	r3, [pc, #512]	; (80003e4 <main+0x298>)
 80001e2:	881b      	ldrh	r3, [r3, #0]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d90e      	bls.n	8000206 <main+0xba>
				if (transmit_data[4] > 251) {
 80001e8:	4b7c      	ldr	r3, [pc, #496]	; (80003dc <main+0x290>)
 80001ea:	791b      	ldrb	r3, [r3, #4]
 80001ec:	2bfb      	cmp	r3, #251	; 0xfb
 80001ee:	d903      	bls.n	80001f8 <main+0xac>
					transmit_data[4] = 255;
 80001f0:	4b7a      	ldr	r3, [pc, #488]	; (80003dc <main+0x290>)
 80001f2:	22ff      	movs	r2, #255	; 0xff
 80001f4:	711a      	strb	r2, [r3, #4]
 80001f6:	e014      	b.n	8000222 <main+0xd6>
				} else {
					transmit_data[4] += 2;
 80001f8:	4b78      	ldr	r3, [pc, #480]	; (80003dc <main+0x290>)
 80001fa:	791b      	ldrb	r3, [r3, #4]
 80001fc:	3302      	adds	r3, #2
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b76      	ldr	r3, [pc, #472]	; (80003dc <main+0x290>)
 8000202:	711a      	strb	r2, [r3, #4]
 8000204:	e00d      	b.n	8000222 <main+0xd6>
				}
			} else {
				if (transmit_data[4] < 4) {
 8000206:	4b75      	ldr	r3, [pc, #468]	; (80003dc <main+0x290>)
 8000208:	791b      	ldrb	r3, [r3, #4]
 800020a:	2b03      	cmp	r3, #3
 800020c:	d803      	bhi.n	8000216 <main+0xca>
					transmit_data[4] = 0;
 800020e:	4b73      	ldr	r3, [pc, #460]	; (80003dc <main+0x290>)
 8000210:	2200      	movs	r2, #0
 8000212:	711a      	strb	r2, [r3, #4]
 8000214:	e005      	b.n	8000222 <main+0xd6>
				} else {
					transmit_data[4] -= 2;
 8000216:	4b71      	ldr	r3, [pc, #452]	; (80003dc <main+0x290>)
 8000218:	791b      	ldrb	r3, [r3, #4]
 800021a:	3b02      	subs	r3, #2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	4b6f      	ldr	r3, [pc, #444]	; (80003dc <main+0x290>)
 8000220:	711a      	strb	r2, [r3, #4]
				}
			}
			encoder_1_prev_counter = encoder_1_cur_counter;
 8000222:	4b6f      	ldr	r3, [pc, #444]	; (80003e0 <main+0x294>)
 8000224:	881a      	ldrh	r2, [r3, #0]
 8000226:	4b6f      	ldr	r3, [pc, #444]	; (80003e4 <main+0x298>)
 8000228:	801a      	strh	r2, [r3, #0]
		}
		//обработка энкодера 2
		encoder_2_encoder_1_cur_counter = __HAL_TIM_GET_COUNTER(&htim4);
 800022a:	4b69      	ldr	r3, [pc, #420]	; (80003d0 <main+0x284>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000230:	b29a      	uxth	r2, r3
 8000232:	4b6d      	ldr	r3, [pc, #436]	; (80003e8 <main+0x29c>)
 8000234:	801a      	strh	r2, [r3, #0]
		if (encoder_2_encoder_1_cur_counter != encoder_2_encoder_1_prev_counter) {
 8000236:	4b6c      	ldr	r3, [pc, #432]	; (80003e8 <main+0x29c>)
 8000238:	881a      	ldrh	r2, [r3, #0]
 800023a:	4b6c      	ldr	r3, [pc, #432]	; (80003ec <main+0x2a0>)
 800023c:	881b      	ldrh	r3, [r3, #0]
 800023e:	429a      	cmp	r2, r3
 8000240:	d026      	beq.n	8000290 <main+0x144>
			if (encoder_2_encoder_1_cur_counter > encoder_2_encoder_1_prev_counter) {
 8000242:	4b69      	ldr	r3, [pc, #420]	; (80003e8 <main+0x29c>)
 8000244:	881a      	ldrh	r2, [r3, #0]
 8000246:	4b69      	ldr	r3, [pc, #420]	; (80003ec <main+0x2a0>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	429a      	cmp	r2, r3
 800024c:	d90e      	bls.n	800026c <main+0x120>
				if (transmit_data[5] > 251) {
 800024e:	4b63      	ldr	r3, [pc, #396]	; (80003dc <main+0x290>)
 8000250:	795b      	ldrb	r3, [r3, #5]
 8000252:	2bfb      	cmp	r3, #251	; 0xfb
 8000254:	d903      	bls.n	800025e <main+0x112>
					transmit_data[5] = 255;
 8000256:	4b61      	ldr	r3, [pc, #388]	; (80003dc <main+0x290>)
 8000258:	22ff      	movs	r2, #255	; 0xff
 800025a:	715a      	strb	r2, [r3, #5]
 800025c:	e014      	b.n	8000288 <main+0x13c>
				} else {
					transmit_data[5] += 2;
 800025e:	4b5f      	ldr	r3, [pc, #380]	; (80003dc <main+0x290>)
 8000260:	795b      	ldrb	r3, [r3, #5]
 8000262:	3302      	adds	r3, #2
 8000264:	b2da      	uxtb	r2, r3
 8000266:	4b5d      	ldr	r3, [pc, #372]	; (80003dc <main+0x290>)
 8000268:	715a      	strb	r2, [r3, #5]
 800026a:	e00d      	b.n	8000288 <main+0x13c>
				}
			} else {
				if (transmit_data[5] < 4) {
 800026c:	4b5b      	ldr	r3, [pc, #364]	; (80003dc <main+0x290>)
 800026e:	795b      	ldrb	r3, [r3, #5]
 8000270:	2b03      	cmp	r3, #3
 8000272:	d803      	bhi.n	800027c <main+0x130>
					transmit_data[5] = 0;
 8000274:	4b59      	ldr	r3, [pc, #356]	; (80003dc <main+0x290>)
 8000276:	2200      	movs	r2, #0
 8000278:	715a      	strb	r2, [r3, #5]
 800027a:	e005      	b.n	8000288 <main+0x13c>
				} else {
					transmit_data[5] -= 2;
 800027c:	4b57      	ldr	r3, [pc, #348]	; (80003dc <main+0x290>)
 800027e:	795b      	ldrb	r3, [r3, #5]
 8000280:	3b02      	subs	r3, #2
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b55      	ldr	r3, [pc, #340]	; (80003dc <main+0x290>)
 8000286:	715a      	strb	r2, [r3, #5]
				}
			}
			encoder_2_encoder_1_prev_counter = encoder_2_encoder_1_cur_counter;
 8000288:	4b57      	ldr	r3, [pc, #348]	; (80003e8 <main+0x29c>)
 800028a:	881a      	ldrh	r2, [r3, #0]
 800028c:	4b57      	ldr	r3, [pc, #348]	; (80003ec <main+0x2a0>)
 800028e:	801a      	strh	r2, [r3, #0]
		}

		//обработка кнопки энкодера 1
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 8000290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000294:	4856      	ldr	r0, [pc, #344]	; (80003f0 <main+0x2a4>)
 8000296:	f001 ff2f 	bl	80020f8 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <main+0x15a>
			encoder_1_key_flag = 1;
 80002a0:	4b54      	ldr	r3, [pc, #336]	; (80003f4 <main+0x2a8>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
		}
		if (encoder_1_key_flag) {
 80002a6:	4b53      	ldr	r3, [pc, #332]	; (80003f4 <main+0x2a8>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d056      	beq.n	800035c <main+0x210>
			uint32_t ms = HAL_GetTick();
 80002ae:	f000 fe1f 	bl	8000ef0 <HAL_GetTick>
 80002b2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			uint8_t key1_state = HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 80002b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ba:	484d      	ldr	r0, [pc, #308]	; (80003f0 <main+0x2a4>)
 80002bc:	f001 ff1c 	bl	80020f8 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			if (key1_state == 0 && !encoder_1_key_short_state && (ms - encoder_1_key_time) > 50) {
 80002c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d115      	bne.n	80002fa <main+0x1ae>
 80002ce:	4b4a      	ldr	r3, [pc, #296]	; (80003f8 <main+0x2ac>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d111      	bne.n	80002fa <main+0x1ae>
 80002d6:	4b49      	ldr	r3, [pc, #292]	; (80003fc <main+0x2b0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	2b32      	cmp	r3, #50	; 0x32
 80002e2:	d90a      	bls.n	80002fa <main+0x1ae>
				encoder_1_key_short_state = 1;
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <main+0x2ac>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
				encoder_1_key_long_state = 0;
 80002ea:	4b45      	ldr	r3, [pc, #276]	; (8000400 <main+0x2b4>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
				encoder_1_key_time = ms;
 80002f0:	4a42      	ldr	r2, [pc, #264]	; (80003fc <main+0x2b0>)
 80002f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	e030      	b.n	800035c <main+0x210>
			} else if (key1_state == 0 && !encoder_1_key_long_state
 80002fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d10f      	bne.n	8000322 <main+0x1d6>
 8000302:	4b3f      	ldr	r3, [pc, #252]	; (8000400 <main+0x2b4>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d10b      	bne.n	8000322 <main+0x1d6>
					&& (ms - encoder_1_key_time) > 2000) {
 800030a:	4b3c      	ldr	r3, [pc, #240]	; (80003fc <main+0x2b0>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000318:	d903      	bls.n	8000322 <main+0x1d6>
				encoder_1_key_long_state = 1;
 800031a:	4b39      	ldr	r3, [pc, #228]	; (8000400 <main+0x2b4>)
 800031c:	2201      	movs	r2, #1
 800031e:	701a      	strb	r2, [r3, #0]
 8000320:	e01c      	b.n	800035c <main+0x210>

			} else if (key1_state == 1 && encoder_1_key_short_state
 8000322:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000326:	2b01      	cmp	r3, #1
 8000328:	d118      	bne.n	800035c <main+0x210>
 800032a:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <main+0x2ac>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d014      	beq.n	800035c <main+0x210>
					&& (ms - encoder_1_key_time) > 50) {
 8000332:	4b32      	ldr	r3, [pc, #200]	; (80003fc <main+0x2b0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800033a:	1ad3      	subs	r3, r2, r3
 800033c:	2b32      	cmp	r3, #50	; 0x32
 800033e:	d90d      	bls.n	800035c <main+0x210>
				encoder_1_key_short_state = 0;
 8000340:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <main+0x2ac>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
				encoder_1_key_time = ms;
 8000346:	4a2d      	ldr	r2, [pc, #180]	; (80003fc <main+0x2b0>)
 8000348:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800034c:	6013      	str	r3, [r2, #0]
				if (!encoder_1_key_long_state) {
 800034e:	4b2c      	ldr	r3, [pc, #176]	; (8000400 <main+0x2b4>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <main+0x210>

					transmit_data[4] = 127;
 8000356:	4b21      	ldr	r3, [pc, #132]	; (80003dc <main+0x290>)
 8000358:	227f      	movs	r2, #127	; 0x7f
 800035a:	711a      	strb	r2, [r3, #4]
				}
			}
		}

		//обработка кнопки энкодера 2
		if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 800035c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000360:	4823      	ldr	r0, [pc, #140]	; (80003f0 <main+0x2a4>)
 8000362:	f001 fec9 	bl	80020f8 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <main+0x226>
			encoder_2_key_flag = 1;
 800036c:	4b25      	ldr	r3, [pc, #148]	; (8000404 <main+0x2b8>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		}
		if (encoder_2_key_flag) {
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <main+0x2b8>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d07d      	beq.n	8000476 <main+0x32a>
			uint32_t ms_2 = HAL_GetTick();
 800037a:	f000 fdb9 	bl	8000ef0 <HAL_GetTick>
 800037e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			uint8_t key2_state = HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin);
 8000382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000386:	481a      	ldr	r0, [pc, #104]	; (80003f0 <main+0x2a4>)
 8000388:	f001 feb6 	bl	80020f8 <HAL_GPIO_ReadPin>
 800038c:	4603      	mov	r3, r0
 800038e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			if (key2_state == 0 && !encoder_2_key_encoder_1_key_short_state && (ms_2 - encoder_2_key_time) > 50) {
 8000392:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000396:	2b00      	cmp	r3, #0
 8000398:	d13c      	bne.n	8000414 <main+0x2c8>
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <main+0x2bc>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d138      	bne.n	8000414 <main+0x2c8>
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <main+0x2c0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	2b32      	cmp	r3, #50	; 0x32
 80003ae:	d931      	bls.n	8000414 <main+0x2c8>
				encoder_2_key_encoder_1_key_short_state = 1;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <main+0x2bc>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
				encoder_2_key_encoder_1_key_long_state = 0;
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <main+0x2c4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
				encoder_2_key_time = ms_2;
 80003bc:	4a13      	ldr	r2, [pc, #76]	; (800040c <main+0x2c0>)
 80003be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80003c2:	6013      	str	r3, [r2, #0]
 80003c4:	e057      	b.n	8000476 <main+0x32a>
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000
 80003cc:	200000f4 	.word	0x200000f4
 80003d0:	2000013c 	.word	0x2000013c
 80003d4:	20000080 	.word	0x20000080
 80003d8:	200001e4 	.word	0x200001e4
 80003dc:	200001f4 	.word	0x200001f4
 80003e0:	200001de 	.word	0x200001de
 80003e4:	20000002 	.word	0x20000002
 80003e8:	200001e0 	.word	0x200001e0
 80003ec:	20000004 	.word	0x20000004
 80003f0:	40010c00 	.word	0x40010c00
 80003f4:	200001cc 	.word	0x200001cc
 80003f8:	200001d4 	.word	0x200001d4
 80003fc:	200001d0 	.word	0x200001d0
 8000400:	200001d5 	.word	0x200001d5
 8000404:	200001d6 	.word	0x200001d6
 8000408:	200001dc 	.word	0x200001dc
 800040c:	200001d8 	.word	0x200001d8
 8000410:	200001dd 	.word	0x200001dd
			} else if (key2_state == 0 && !encoder_2_key_encoder_1_key_long_state
 8000414:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000418:	2b00      	cmp	r3, #0
 800041a:	d10f      	bne.n	800043c <main+0x2f0>
 800041c:	4b71      	ldr	r3, [pc, #452]	; (80005e4 <main+0x498>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10b      	bne.n	800043c <main+0x2f0>
					&& (ms_2 - encoder_2_key_time) > 2000) {
 8000424:	4b70      	ldr	r3, [pc, #448]	; (80005e8 <main+0x49c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000432:	d903      	bls.n	800043c <main+0x2f0>
				encoder_2_key_encoder_1_key_long_state = 1;
 8000434:	4b6b      	ldr	r3, [pc, #428]	; (80005e4 <main+0x498>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	e01c      	b.n	8000476 <main+0x32a>

			} else if (key2_state == 1 && encoder_2_key_encoder_1_key_short_state
 800043c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000440:	2b01      	cmp	r3, #1
 8000442:	d118      	bne.n	8000476 <main+0x32a>
 8000444:	4b69      	ldr	r3, [pc, #420]	; (80005ec <main+0x4a0>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d014      	beq.n	8000476 <main+0x32a>
					&& (ms_2 - encoder_2_key_time) > 50) {
 800044c:	4b66      	ldr	r3, [pc, #408]	; (80005e8 <main+0x49c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	2b32      	cmp	r3, #50	; 0x32
 8000458:	d90d      	bls.n	8000476 <main+0x32a>
				encoder_2_key_encoder_1_key_short_state = 0;
 800045a:	4b64      	ldr	r3, [pc, #400]	; (80005ec <main+0x4a0>)
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
				encoder_2_key_time = ms_2;
 8000460:	4a61      	ldr	r2, [pc, #388]	; (80005e8 <main+0x49c>)
 8000462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000466:	6013      	str	r3, [r2, #0]
				if (!encoder_2_key_encoder_1_key_long_state) {
 8000468:	4b5e      	ldr	r3, [pc, #376]	; (80005e4 <main+0x498>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d102      	bne.n	8000476 <main+0x32a>

					transmit_data[5] = 127;
 8000470:	4b5f      	ldr	r3, [pc, #380]	; (80005f0 <main+0x4a4>)
 8000472:	227f      	movs	r2, #127	; 0x7f
 8000474:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		//обработка потенциометров
		transmit_data[0]=adcData[2]*255/4095;
 8000476:	4b5f      	ldr	r3, [pc, #380]	; (80005f4 <main+0x4a8>)
 8000478:	889b      	ldrh	r3, [r3, #4]
 800047a:	461a      	mov	r2, r3
 800047c:	4613      	mov	r3, r2
 800047e:	021b      	lsls	r3, r3, #8
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	4a5d      	ldr	r2, [pc, #372]	; (80005f8 <main+0x4ac>)
 8000484:	fb82 1203 	smull	r1, r2, r2, r3
 8000488:	441a      	add	r2, r3
 800048a:	12d2      	asrs	r2, r2, #11
 800048c:	17db      	asrs	r3, r3, #31
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	b2da      	uxtb	r2, r3
 8000492:	4b57      	ldr	r3, [pc, #348]	; (80005f0 <main+0x4a4>)
 8000494:	701a      	strb	r2, [r3, #0]
		transmit_data[1]=adcData[3]*255/4095;
 8000496:	4b57      	ldr	r3, [pc, #348]	; (80005f4 <main+0x4a8>)
 8000498:	88db      	ldrh	r3, [r3, #6]
 800049a:	461a      	mov	r2, r3
 800049c:	4613      	mov	r3, r2
 800049e:	021b      	lsls	r3, r3, #8
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	4a55      	ldr	r2, [pc, #340]	; (80005f8 <main+0x4ac>)
 80004a4:	fb82 1203 	smull	r1, r2, r2, r3
 80004a8:	441a      	add	r2, r3
 80004aa:	12d2      	asrs	r2, r2, #11
 80004ac:	17db      	asrs	r3, r3, #31
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	4b4f      	ldr	r3, [pc, #316]	; (80005f0 <main+0x4a4>)
 80004b4:	705a      	strb	r2, [r3, #1]
		transmit_data[2]=adcData[4]*255/4095;
 80004b6:	4b4f      	ldr	r3, [pc, #316]	; (80005f4 <main+0x4a8>)
 80004b8:	891b      	ldrh	r3, [r3, #8]
 80004ba:	461a      	mov	r2, r3
 80004bc:	4613      	mov	r3, r2
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	1a9b      	subs	r3, r3, r2
 80004c2:	4a4d      	ldr	r2, [pc, #308]	; (80005f8 <main+0x4ac>)
 80004c4:	fb82 1203 	smull	r1, r2, r2, r3
 80004c8:	441a      	add	r2, r3
 80004ca:	12d2      	asrs	r2, r2, #11
 80004cc:	17db      	asrs	r3, r3, #31
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b47      	ldr	r3, [pc, #284]	; (80005f0 <main+0x4a4>)
 80004d4:	709a      	strb	r2, [r3, #2]
		transmit_data[3]=adcData[5]*255/4095;
 80004d6:	4b47      	ldr	r3, [pc, #284]	; (80005f4 <main+0x4a8>)
 80004d8:	895b      	ldrh	r3, [r3, #10]
 80004da:	461a      	mov	r2, r3
 80004dc:	4613      	mov	r3, r2
 80004de:	021b      	lsls	r3, r3, #8
 80004e0:	1a9b      	subs	r3, r3, r2
 80004e2:	4a45      	ldr	r2, [pc, #276]	; (80005f8 <main+0x4ac>)
 80004e4:	fb82 1203 	smull	r1, r2, r2, r3
 80004e8:	441a      	add	r2, r3
 80004ea:	12d2      	asrs	r2, r2, #11
 80004ec:	17db      	asrs	r3, r3, #31
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b3f      	ldr	r3, [pc, #252]	; (80005f0 <main+0x4a4>)
 80004f4:	70da      	strb	r2, [r3, #3]
		//(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;


		//отправка данных в uart
		if (HAL_GetTick() - tx_time > 100) { //каждые 100 мс
 80004f6:	f000 fcfb 	bl	8000ef0 <HAL_GetTick>
 80004fa:	4602      	mov	r2, r0
 80004fc:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <main+0x4b0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	2b64      	cmp	r3, #100	; 0x64
 8000504:	f67f ae5e 	bls.w	80001c4 <main+0x78>
			sprintf(message,
					"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n\r",
					transmit_data[0], transmit_data[1], transmit_data[2],
 8000508:	4b39      	ldr	r3, [pc, #228]	; (80005f0 <main+0x4a4>)
 800050a:	781b      	ldrb	r3, [r3, #0]
			sprintf(message,
 800050c:	469c      	mov	ip, r3
					transmit_data[0], transmit_data[1], transmit_data[2],
 800050e:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <main+0x4a4>)
 8000510:	785b      	ldrb	r3, [r3, #1]
			sprintf(message,
 8000512:	469e      	mov	lr, r3
					transmit_data[0], transmit_data[1], transmit_data[2],
 8000514:	4b36      	ldr	r3, [pc, #216]	; (80005f0 <main+0x4a4>)
 8000516:	789b      	ldrb	r3, [r3, #2]
			sprintf(message,
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
					transmit_data[3], transmit_data[4], transmit_data[5],
 800051a:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <main+0x4a4>)
 800051c:	78db      	ldrb	r3, [r3, #3]
			sprintf(message,
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
					transmit_data[3], transmit_data[4], transmit_data[5],
 8000520:	4b33      	ldr	r3, [pc, #204]	; (80005f0 <main+0x4a4>)
 8000522:	791b      	ldrb	r3, [r3, #4]
			sprintf(message,
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
					transmit_data[3], transmit_data[4], transmit_data[5],
 8000526:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <main+0x4a4>)
 8000528:	795b      	ldrb	r3, [r3, #5]
			sprintf(message,
 800052a:	623b      	str	r3, [r7, #32]
					transmit_data[6], transmit_data[7], transmit_data[8],
 800052c:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <main+0x4a4>)
 800052e:	799b      	ldrb	r3, [r3, #6]
			sprintf(message,
 8000530:	61fb      	str	r3, [r7, #28]
					transmit_data[6], transmit_data[7], transmit_data[8],
 8000532:	4b2f      	ldr	r3, [pc, #188]	; (80005f0 <main+0x4a4>)
 8000534:	79db      	ldrb	r3, [r3, #7]
			sprintf(message,
 8000536:	61bb      	str	r3, [r7, #24]
					transmit_data[6], transmit_data[7], transmit_data[8],
 8000538:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <main+0x4a4>)
 800053a:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(message,
 800053c:	617b      	str	r3, [r7, #20]
					transmit_data[9], transmit_data[10], transmit_data[11],
 800053e:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <main+0x4a4>)
 8000540:	7a5b      	ldrb	r3, [r3, #9]
			sprintf(message,
 8000542:	613b      	str	r3, [r7, #16]
					transmit_data[9], transmit_data[10], transmit_data[11],
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <main+0x4a4>)
 8000546:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(message,
 8000548:	60fb      	str	r3, [r7, #12]
					transmit_data[9], transmit_data[10], transmit_data[11],
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <main+0x4a4>)
 800054c:	7adb      	ldrb	r3, [r3, #11]
			sprintf(message,
 800054e:	60bb      	str	r3, [r7, #8]
					transmit_data[12], transmit_data[13], transmit_data[14],
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <main+0x4a4>)
 8000552:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(message,
 8000554:	607b      	str	r3, [r7, #4]
					transmit_data[12], transmit_data[13], transmit_data[14],
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <main+0x4a4>)
 8000558:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(message,
 800055a:	603b      	str	r3, [r7, #0]
					transmit_data[12], transmit_data[13], transmit_data[14],
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <main+0x4a4>)
 800055e:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(message,
 8000560:	461e      	mov	r6, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 8000562:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <main+0x4a4>)
 8000564:	7bdb      	ldrb	r3, [r3, #15]
			sprintf(message,
 8000566:	461d      	mov	r5, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <main+0x4a4>)
 800056a:	7c1b      	ldrb	r3, [r3, #16]
			sprintf(message,
 800056c:	461c      	mov	r4, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <main+0x4a4>)
 8000570:	7c5b      	ldrb	r3, [r3, #17]
			sprintf(message,
 8000572:	4619      	mov	r1, r3
					transmit_data[18], transmit_data[19]);
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <main+0x4a4>)
 8000576:	7c9b      	ldrb	r3, [r3, #18]
			sprintf(message,
 8000578:	461a      	mov	r2, r3
					transmit_data[18], transmit_data[19]);
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <main+0x4a4>)
 800057c:	7cdb      	ldrb	r3, [r3, #19]
			sprintf(message,
 800057e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000582:	9311      	str	r3, [sp, #68]	; 0x44
 8000584:	9210      	str	r2, [sp, #64]	; 0x40
 8000586:	910f      	str	r1, [sp, #60]	; 0x3c
 8000588:	940e      	str	r4, [sp, #56]	; 0x38
 800058a:	950d      	str	r5, [sp, #52]	; 0x34
 800058c:	960c      	str	r6, [sp, #48]	; 0x30
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	920b      	str	r2, [sp, #44]	; 0x2c
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	920a      	str	r2, [sp, #40]	; 0x28
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	9209      	str	r2, [sp, #36]	; 0x24
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	9208      	str	r2, [sp, #32]
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	9207      	str	r2, [sp, #28]
 80005a2:	697a      	ldr	r2, [r7, #20]
 80005a4:	9206      	str	r2, [sp, #24]
 80005a6:	69ba      	ldr	r2, [r7, #24]
 80005a8:	9205      	str	r2, [sp, #20]
 80005aa:	69fa      	ldr	r2, [r7, #28]
 80005ac:	9204      	str	r2, [sp, #16]
 80005ae:	6a3a      	ldr	r2, [r7, #32]
 80005b0:	9203      	str	r2, [sp, #12]
 80005b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005b4:	9202      	str	r2, [sp, #8]
 80005b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005b8:	9201      	str	r2, [sp, #4]
 80005ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4673      	mov	r3, lr
 80005c0:	4662      	mov	r2, ip
 80005c2:	490f      	ldr	r1, [pc, #60]	; (8000600 <main+0x4b4>)
 80005c4:	f002 ff10 	bl	80033e8 <siprintf>
			HAL_UART_Transmit(&huart1, message, sizeof(message), 200);
 80005c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80005cc:	23c8      	movs	r3, #200	; 0xc8
 80005ce:	2264      	movs	r2, #100	; 0x64
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <main+0x4b8>)
 80005d2:	f002 fd89 	bl	80030e8 <HAL_UART_Transmit>
			tx_time = HAL_GetTick();
 80005d6:	f000 fc8b 	bl	8000ef0 <HAL_GetTick>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <main+0x4b0>)
 80005de:	6013      	str	r3, [r2, #0]
		encoder_1_cur_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80005e0:	e5f0      	b.n	80001c4 <main+0x78>
 80005e2:	bf00      	nop
 80005e4:	200001dd 	.word	0x200001dd
 80005e8:	200001d8 	.word	0x200001d8
 80005ec:	200001dc 	.word	0x200001dc
 80005f0:	200001f4 	.word	0x200001f4
 80005f4:	200001e4 	.word	0x200001e4
 80005f8:	80080081 	.word	0x80080081
 80005fc:	20000208 	.word	0x20000208
 8000600:	08003d64 	.word	0x08003d64
 8000604:	20000184 	.word	0x20000184

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 ff06 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000654:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fd62 	bl	8002128 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800066a:	f000 f9fd 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 ffce 	bl	800262c <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000696:	f000 f9e7 	bl	8000a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800069a:	2302      	movs	r3, #2
 800069c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800069e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f94e 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006b2:	f000 f9d9 	bl	8000a68 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d0:	4b43      	ldr	r3, [pc, #268]	; (80007e0 <MX_ADC1_Init+0x120>)
 80006d2:	4a44      	ldr	r2, [pc, #272]	; (80007e4 <MX_ADC1_Init+0x124>)
 80006d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d6:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <MX_ADC1_Init+0x120>)
 80006d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006de:	4b40      	ldr	r3, [pc, #256]	; (80007e0 <MX_ADC1_Init+0x120>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	4b3e      	ldr	r3, [pc, #248]	; (80007e0 <MX_ADC1_Init+0x120>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ea:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <MX_ADC1_Init+0x120>)
 80006ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b3b      	ldr	r3, [pc, #236]	; (80007e0 <MX_ADC1_Init+0x120>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 80006f8:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <MX_ADC1_Init+0x120>)
 80006fa:	2207      	movs	r2, #7
 80006fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fe:	4838      	ldr	r0, [pc, #224]	; (80007e0 <MX_ADC1_Init+0x120>)
 8000700:	f000 fc00 	bl	8000f04 <HAL_ADC_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800070a:	f000 f9ad 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800070e:	2311      	movs	r3, #17
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000716:	2307      	movs	r3, #7
 8000718:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4830      	ldr	r0, [pc, #192]	; (80007e0 <MX_ADC1_Init+0x120>)
 8000720:	f000 fdc2 	bl	80012a8 <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f99d 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4829      	ldr	r0, [pc, #164]	; (80007e0 <MX_ADC1_Init+0x120>)
 800073c:	f000 fdb4 	bl	80012a8 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000746:	f000 f98f 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800074a:	2301      	movs	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800074e:	2303      	movs	r3, #3
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4822      	ldr	r0, [pc, #136]	; (80007e0 <MX_ADC1_Init+0x120>)
 8000758:	f000 fda6 	bl	80012a8 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000762:	f000 f981 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000766:	2302      	movs	r3, #2
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800076a:	2304      	movs	r3, #4
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	481b      	ldr	r0, [pc, #108]	; (80007e0 <MX_ADC1_Init+0x120>)
 8000774:	f000 fd98 	bl	80012a8 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800077e:	f000 f973 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000782:	2303      	movs	r3, #3
 8000784:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000786:	2305      	movs	r3, #5
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4814      	ldr	r0, [pc, #80]	; (80007e0 <MX_ADC1_Init+0x120>)
 8000790:	f000 fd8a 	bl	80012a8 <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800079a:	f000 f965 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800079e:	2304      	movs	r3, #4
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007a2:	2306      	movs	r3, #6
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_ADC1_Init+0x120>)
 80007ac:	f000 fd7c 	bl	80012a8 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80007b6:	f000 f957 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007ba:	2305      	movs	r3, #5
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007be:	2307      	movs	r3, #7
 80007c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <MX_ADC1_Init+0x120>)
 80007c8:	f000 fd6e 	bl	80012a8 <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80007d2:	f000 f949 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000080 	.word	0x20000080
 80007e4:	40012400 	.word	0x40012400

080007e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2224      	movs	r2, #36	; 0x24
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fe16 	bl	8003428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_TIM3_Init+0xa0>)
 8000806:	4a21      	ldr	r2, [pc, #132]	; (800088c <MX_TIM3_Init+0xa4>)
 8000808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_TIM3_Init+0xa0>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_TIM3_Init+0xa0>)
 8000812:	2220      	movs	r2, #32
 8000814:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_TIM3_Init+0xa0>)
 8000818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_TIM3_Init+0xa0>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_TIM3_Init+0xa0>)
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800082a:	2303      	movs	r3, #3
 800082c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800083a:	230a      	movs	r3, #10
 800083c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000842:	2301      	movs	r3, #1
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800084a:	230a      	movs	r3, #10
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_TIM3_Init+0xa0>)
 8000856:	f002 f9e3 	bl	8002c20 <HAL_TIM_Encoder_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000860:	f000 f902 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_TIM3_Init+0xa0>)
 8000872:	f002 fb8b 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800087c:	f000 f8f4 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3730      	adds	r7, #48	; 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000f4 	.word	0x200000f4
 800088c:	40000400 	.word	0x40000400

08000890 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2224      	movs	r2, #36	; 0x24
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fdc2 	bl	8003428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_TIM4_Init+0xa0>)
 80008ae:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM4_Init+0xa0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_TIM4_Init+0xa0>)
 80008ba:	2220      	movs	r2, #32
 80008bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM4_Init+0xa0>)
 80008c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM4_Init+0xa0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_TIM4_Init+0xa0>)
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80008e2:	230a      	movs	r3, #10
 80008e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ea:	2301      	movs	r3, #1
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_TIM4_Init+0xa0>)
 80008fe:	f002 f98f 	bl	8002c20 <HAL_TIM_Encoder_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f8ae 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_TIM4_Init+0xa0>)
 800091a:	f002 fb37 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000924:	f000 f8a0 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000013c 	.word	0x2000013c
 8000934:	40000800 	.word	0x40000800

08000938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART1_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000970:	f002 fb6a 	bl	8003048 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f875 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000184 	.word	0x20000184
 8000988:	40013800 	.word	0x40013800

0800098c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DMA_Init+0x38>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <MX_DMA_Init+0x38>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_DMA_Init+0x38>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	200b      	movs	r0, #11
 80009b0:	f000 fff9 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009b4:	200b      	movs	r0, #11
 80009b6:	f001 f812 	bl	80019de <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_GPIO_Init+0x98>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <MX_GPIO_Init+0x98>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_GPIO_Init+0x98>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_GPIO_Init+0x98>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <MX_GPIO_Init+0x98>)
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_GPIO_Init+0x98>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_GPIO_Init+0x98>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <MX_GPIO_Init+0x98>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_GPIO_Init+0x98>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_GPIO_Init+0x98>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <MX_GPIO_Init+0x98>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_GPIO_Init+0x98>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : KEY_Pin KEY_2_Pin */
  GPIO_InitStruct.Pin = KEY_Pin|KEY_2_Pin;
 8000a3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0x9c>)
 8000a52:	f001 f9cd 	bl	8001df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_MspInit+0x60>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_MspInit+0x60>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a28      	ldr	r2, [pc, #160]	; (8000b94 <HAL_ADC_MspInit+0xbc>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d149      	bne.n	8000b8c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <HAL_ADC_MspInit+0xc0>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <HAL_ADC_MspInit+0xc0>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <HAL_ADC_MspInit+0xc0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <HAL_ADC_MspInit+0xc0>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <HAL_ADC_MspInit+0xc0>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_ADC_MspInit+0xc0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b28:	233f      	movs	r3, #63	; 0x3f
 8000b2a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4619      	mov	r1, r3
 8000b36:	4819      	ldr	r0, [pc, #100]	; (8000b9c <HAL_ADC_MspInit+0xc4>)
 8000b38:	f001 f95a 	bl	8001df0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_ADC_MspInit+0xcc>)
 8000b40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b66:	2220      	movs	r2, #32
 8000b68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b72:	f000 ff4f 	bl	8001a14 <HAL_DMA_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b7c:	f7ff ff74 	bl	8000a68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40012400 	.word	0x40012400
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	200000b0 	.word	0x200000b0
 8000ba4:	40020008 	.word	0x40020008

08000ba8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a2a      	ldr	r2, [pc, #168]	; (8000c6c <HAL_TIM_Encoder_MspInit+0xc4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d124      	bne.n	8000c12 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	61d3      	str	r3, [r2, #28]
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf8:	23c0      	movs	r3, #192	; 0xc0
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481a      	ldr	r0, [pc, #104]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000c0c:	f001 f8f0 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c10:	e028      	b.n	8000c64 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d123      	bne.n	8000c64 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	61d3      	str	r3, [r2, #28]
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c4c:	23c0      	movs	r3, #192	; 0xc0
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <HAL_TIM_Encoder_MspInit+0xd4>)
 8000c60:	f001 f8c6 	bl	8001df0 <HAL_GPIO_Init>
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40000400 	.word	0x40000400
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40000800 	.word	0x40000800
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_UART_MspInit+0x8c>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d131      	bne.n	8000d04 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000ce6:	f001 f883 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000d00:	f001 f876 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010800 	.word	0x40010800

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f000 f8b5 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <DMA1_Channel1_IRQHandler+0x10>)
 8000d6e:	f000 ff0b 	bl	8001b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000b0 	.word	0x200000b0

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f002 fb44 	bl	8003438 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20005000 	.word	0x20005000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	2000020c 	.word	0x2000020c
 8000de4:	20000360 	.word	0x20000360

08000de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df4:	f7ff fff8 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dfa:	490c      	ldr	r1, [pc, #48]	; (8000e2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e10:	4c09      	ldr	r4, [pc, #36]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f002 fb11 	bl	8003444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e22:	f7ff f993 	bl	800014c <main>
  bx lr
 8000e26:	4770      	bx	lr
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e30:	08003e20 	.word	0x08003e20
  ldr r2, =_sbss
 8000e34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e38:	2000035c 	.word	0x2000035c

08000e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_2_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x28>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x28>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 fd9d 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fe0a 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40022000 	.word	0x40022000

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fdb5 	bl	80019fa <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 fd7d 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	2000000c 	.word	0x2000000c

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x20>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <HAL_IncTick+0x20>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	20000210 	.word	0x20000210

08000ef0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <HAL_GetTick+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000210 	.word	0x20000210

08000f04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0be      	b.n	80010a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fdc8 	bl	8000ad8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 faff 	bl	800154c <ADC_ConversionStop_Disable>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 8099 	bne.w	8001092 <HAL_ADC_Init+0x18e>
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f040 8095 	bne.w	8001092 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f70:	f023 0302 	bic.w	r3, r3, #2
 8000f74:	f043 0202 	orr.w	r2, r3, #2
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f84:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7b1b      	ldrb	r3, [r3, #12]
 8000f8a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f8c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f9c:	d003      	beq.n	8000fa6 <HAL_ADC_Init+0xa2>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <HAL_ADC_Init+0xa8>
 8000fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000faa:	e000      	b.n	8000fae <HAL_ADC_Init+0xaa>
 8000fac:	2300      	movs	r3, #0
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7d1b      	ldrb	r3, [r3, #20]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d119      	bne.n	8000ff0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7b1b      	ldrb	r3, [r3, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d109      	bne.n	8000fd8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	035a      	lsls	r2, r3, #13
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f043 0220 	orr.w	r2, r3, #32
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	f043 0201 	orr.w	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	430a      	orrs	r2, r1
 8001002:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_ADC_Init+0x1a8>)
 800100c:	4013      	ands	r3, r2
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	430b      	orrs	r3, r1
 8001016:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001020:	d003      	beq.n	800102a <HAL_ADC_Init+0x126>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d104      	bne.n	8001034 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	3b01      	subs	r3, #1
 8001030:	051b      	lsls	r3, r3, #20
 8001032:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	430a      	orrs	r2, r1
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_ADC_Init+0x1ac>)
 8001050:	4013      	ands	r3, r2
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	429a      	cmp	r2, r3
 8001056:	d10b      	bne.n	8001070 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800106e:	e018      	b.n	80010a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	f023 0312 	bic.w	r3, r3, #18
 8001078:	f043 0210 	orr.w	r2, r3, #16
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	f043 0201 	orr.w	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001090:	e007      	b.n	80010a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	f043 0210 	orr.w	r2, r3, #16
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	ffe1f7fd 	.word	0xffe1f7fd
 80010b0:	ff1f0efe 	.word	0xff1f0efe

080010b4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a64      	ldr	r2, [pc, #400]	; (800125c <HAL_ADC_Start_DMA+0x1a8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d004      	beq.n	80010d8 <HAL_ADC_Start_DMA+0x24>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a63      	ldr	r2, [pc, #396]	; (8001260 <HAL_ADC_Start_DMA+0x1ac>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d106      	bne.n	80010e6 <HAL_ADC_Start_DMA+0x32>
 80010d8:	4b60      	ldr	r3, [pc, #384]	; (800125c <HAL_ADC_Start_DMA+0x1a8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f040 80b3 	bne.w	800124c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_ADC_Start_DMA+0x40>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e0ae      	b.n	8001252 <HAL_ADC_Start_DMA+0x19e>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f9cb 	bl	8001498 <ADC_Enable>
 8001102:	4603      	mov	r3, r0
 8001104:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 809a 	bne.w	8001242 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a4e      	ldr	r2, [pc, #312]	; (8001260 <HAL_ADC_Start_DMA+0x1ac>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d105      	bne.n	8001138 <HAL_ADC_Start_DMA+0x84>
 800112c:	4b4b      	ldr	r3, [pc, #300]	; (800125c <HAL_ADC_Start_DMA+0x1a8>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d115      	bne.n	8001164 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114e:	2b00      	cmp	r3, #0
 8001150:	d026      	beq.n	80011a0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001162:	e01d      	b.n	80011a0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a39      	ldr	r2, [pc, #228]	; (800125c <HAL_ADC_Start_DMA+0x1a8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d004      	beq.n	8001184 <HAL_ADC_Start_DMA+0xd0>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a38      	ldr	r2, [pc, #224]	; (8001260 <HAL_ADC_Start_DMA+0x1ac>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d10d      	bne.n	80011a0 <HAL_ADC_Start_DMA+0xec>
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <HAL_ADC_Start_DMA+0x1a8>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001198:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b0:	f023 0206 	bic.w	r2, r3, #6
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011b8:	e002      	b.n	80011c0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a25      	ldr	r2, [pc, #148]	; (8001264 <HAL_ADC_Start_DMA+0x1b0>)
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a24      	ldr	r2, [pc, #144]	; (8001268 <HAL_ADC_Start_DMA+0x1b4>)
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start_DMA+0x1b8>)
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f06f 0202 	mvn.w	r2, #2
 80011e8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011f8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a18      	ldr	r0, [r3, #32]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	334c      	adds	r3, #76	; 0x4c
 8001204:	4619      	mov	r1, r3
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f000 fc5d 	bl	8001ac8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001218:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800121c:	d108      	bne.n	8001230 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800122c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800122e:	e00f      	b.n	8001250 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800123e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001240:	e006      	b.n	8001250 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800124a:	e001      	b.n	8001250 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40012400 	.word	0x40012400
 8001260:	40012800 	.word	0x40012800
 8001264:	080015cf 	.word	0x080015cf
 8001268:	0800164b 	.word	0x0800164b
 800126c:	08001667 	.word	0x08001667

08001270 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x20>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e0dc      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1da>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b06      	cmp	r3, #6
 80012d6:	d81c      	bhi.n	8001312 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	3b05      	subs	r3, #5
 80012ea:	221f      	movs	r2, #31
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4019      	ands	r1, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	3b05      	subs	r3, #5
 8001304:	fa00 f203 	lsl.w	r2, r0, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
 8001310:	e03c      	b.n	800138c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b0c      	cmp	r3, #12
 8001318:	d81c      	bhi.n	8001354 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	3b23      	subs	r3, #35	; 0x23
 800132c:	221f      	movs	r2, #31
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	4019      	ands	r1, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3b23      	subs	r3, #35	; 0x23
 8001346:	fa00 f203 	lsl.w	r2, r0, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
 8001352:	e01b      	b.n	800138c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b41      	subs	r3, #65	; 0x41
 8001366:	221f      	movs	r2, #31
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	4019      	ands	r1, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b41      	subs	r3, #65	; 0x41
 8001380:	fa00 f203 	lsl.w	r2, r0, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d91c      	bls.n	80013ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68d9      	ldr	r1, [r3, #12]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	3b1e      	subs	r3, #30
 80013a6:	2207      	movs	r2, #7
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4019      	ands	r1, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6898      	ldr	r0, [r3, #8]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	3b1e      	subs	r3, #30
 80013c0:	fa00 f203 	lsl.w	r2, r0, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	e019      	b.n	8001402 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6919      	ldr	r1, [r3, #16]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	2207      	movs	r2, #7
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4019      	ands	r1, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	6898      	ldr	r0, [r3, #8]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	fa00 f203 	lsl.w	r2, r0, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b10      	cmp	r3, #16
 8001408:	d003      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800140e:	2b11      	cmp	r3, #17
 8001410:	d132      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_ADC_ConfigChannel+0x1e4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d125      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d126      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001438:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d11a      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_ADC_ConfigChannel+0x1e8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_ADC_ConfigChannel+0x1ec>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0c9a      	lsrs	r2, r3, #18
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001458:	e002      	b.n	8001460 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3b01      	subs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1b2>
 8001466:	e007      	b.n	8001478 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f043 0220 	orr.w	r2, r3, #32
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40012400 	.word	0x40012400
 8001490:	20000008 	.word	0x20000008
 8001494:	431bde83 	.word	0x431bde83

08001498 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d040      	beq.n	8001538 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <ADC_Enable+0xac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <ADC_Enable+0xb0>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	0c9b      	lsrs	r3, r3, #18
 80014d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014d4:	e002      	b.n	80014dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3b01      	subs	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f9      	bne.n	80014d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014e2:	f7ff fd05 	bl	8000ef0 <HAL_GetTick>
 80014e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014e8:	e01f      	b.n	800152a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ea:	f7ff fd01 	bl	8000ef0 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d918      	bls.n	800152a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b01      	cmp	r3, #1
 8001504:	d011      	beq.n	800152a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	f043 0210 	orr.w	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e007      	b.n	800153a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b01      	cmp	r3, #1
 8001536:	d1d8      	bne.n	80014ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008
 8001548:	431bde83 	.word	0x431bde83

0800154c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b01      	cmp	r3, #1
 8001564:	d12e      	bne.n	80015c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001576:	f7ff fcbb 	bl	8000ef0 <HAL_GetTick>
 800157a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800157c:	e01b      	b.n	80015b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800157e:	f7ff fcb7 	bl	8000ef0 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d914      	bls.n	80015b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10d      	bne.n	80015b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	f043 0210 	orr.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e007      	b.n	80015c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d0dc      	beq.n	800157e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d127      	bne.n	8001638 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001602:	d115      	bne.n	8001630 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff fe1d 	bl	8001270 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001636:	e004      	b.n	8001642 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fe12 	bl	8001282 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	f043 0204 	orr.w	r2, r3, #4
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff fe01 	bl	8001294 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_ADCEx_Calibration_Start+0x1e>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e097      	b.n	80017ea <HAL_ADCEx_Calibration_Start+0x14e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff42 	bl	800154c <ADC_ConversionStop_Disable>
 80016c8:	4603      	mov	r3, r0
 80016ca:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fee3 	bl	8001498 <ADC_Enable>
 80016d2:	4603      	mov	r3, r0
 80016d4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 8081 	bne.w	80017e0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016e6:	f023 0302 	bic.w	r3, r3, #2
 80016ea:	f043 0202 	orr.w	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016f2:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_ADCEx_Calibration_Start+0x158>)
 80016f4:	681c      	ldr	r4, [r3, #0]
 80016f6:	2002      	movs	r0, #2
 80016f8:	f001 f9dc 	bl	8002ab4 <HAL_RCCEx_GetPeriphCLKFreq>
 80016fc:	4603      	mov	r3, r0
 80016fe:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001702:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001704:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001706:	e002      	b.n	800170e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3b01      	subs	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f9      	bne.n	8001708 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0208 	orr.w	r2, r2, #8
 8001722:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001724:	f7ff fbe4 	bl	8000ef0 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800172a:	e01b      	b.n	8001764 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800172c:	f7ff fbe0 	bl	8000ef0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b0a      	cmp	r3, #10
 8001738:	d914      	bls.n	8001764 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00d      	beq.n	8001764 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	f023 0312 	bic.w	r3, r3, #18
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e042      	b.n	80017ea <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1dc      	bne.n	800172c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0204 	orr.w	r2, r2, #4
 8001780:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001782:	f7ff fbb5 	bl	8000ef0 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001788:	e01b      	b.n	80017c2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800178a:	f7ff fbb1 	bl	8000ef0 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b0a      	cmp	r3, #10
 8001796:	d914      	bls.n	80017c2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00d      	beq.n	80017c2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f023 0312 	bic.w	r3, r3, #18
 80017ae:	f043 0210 	orr.w	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e013      	b.n	80017ea <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1dc      	bne.n	800178a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f023 0303 	bic.w	r3, r3, #3
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	371c      	adds	r7, #28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4906      	ldr	r1, [pc, #24]	; (8001890 <__NVIC_EnableIRQ+0x34>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff90 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff2d 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff42 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff90 	bl	80018e8 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5f 	bl	8001894 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff35 	bl	800185c <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e043      	b.n	8001ab2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_DMA_Init+0xa8>)
 8001a32:	4413      	add	r3, r2
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <HAL_DMA_Init+0xac>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	009a      	lsls	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_DMA_Init+0xb0>)
 8001a46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	bffdfff8 	.word	0xbffdfff8
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Start_IT+0x20>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e04b      	b.n	8001b80 <HAL_DMA_Start_IT+0xb8>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d13a      	bne.n	8001b72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0201 	bic.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f937 	bl	8001d94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 020e 	orr.w	r2, r2, #14
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e00f      	b.n	8001b60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0204 	bic.w	r2, r2, #4
 8001b4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 020a 	orr.w	r2, r2, #10
 8001b5e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e005      	b.n	8001b7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d04f      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xc8>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d04a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0204 	bic.w	r2, r2, #4
 8001bd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_DMA_IRQHandler+0x1f0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d029      	beq.n	8001c36 <HAL_DMA_IRQHandler+0xae>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a65      	ldr	r2, [pc, #404]	; (8001d7c <HAL_DMA_IRQHandler+0x1f4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_IRQHandler+0xaa>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a63      	ldr	r2, [pc, #396]	; (8001d80 <HAL_DMA_IRQHandler+0x1f8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01a      	beq.n	8001c2c <HAL_DMA_IRQHandler+0xa4>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a62      	ldr	r2, [pc, #392]	; (8001d84 <HAL_DMA_IRQHandler+0x1fc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d012      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x9e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a60      	ldr	r2, [pc, #384]	; (8001d88 <HAL_DMA_IRQHandler+0x200>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00a      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x98>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5f      	ldr	r2, [pc, #380]	; (8001d8c <HAL_DMA_IRQHandler+0x204>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d102      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x92>
 8001c14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c18:	e00e      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c1e:	e00b      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c24:	e008      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c2a:	e005      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c30:	e002      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c32:	2340      	movs	r3, #64	; 0x40
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c36:	2304      	movs	r3, #4
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <HAL_DMA_IRQHandler+0x208>)
 8001c3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8094 	beq.w	8001d6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c4e:	e08e      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	2202      	movs	r2, #2
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d056      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x186>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d051      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020a 	bic.w	r2, r2, #10
 8001c86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <HAL_DMA_IRQHandler+0x1f0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d029      	beq.n	8001cee <HAL_DMA_IRQHandler+0x166>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a37      	ldr	r2, [pc, #220]	; (8001d7c <HAL_DMA_IRQHandler+0x1f4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_DMA_IRQHandler+0x162>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a35      	ldr	r2, [pc, #212]	; (8001d80 <HAL_DMA_IRQHandler+0x1f8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01a      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x15c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <HAL_DMA_IRQHandler+0x1fc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d012      	beq.n	8001cde <HAL_DMA_IRQHandler+0x156>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_DMA_IRQHandler+0x200>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x150>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a31      	ldr	r2, [pc, #196]	; (8001d8c <HAL_DMA_IRQHandler+0x204>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d102      	bne.n	8001cd2 <HAL_DMA_IRQHandler+0x14a>
 8001ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cd0:	e00e      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	e00b      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cdc:	e008      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce2:	e005      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce8:	e002      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cea:	2320      	movs	r3, #32
 8001cec:	e000      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_DMA_IRQHandler+0x208>)
 8001cf2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d034      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d0c:	e02f      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2208      	movs	r2, #8
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d028      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x1e8>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d023      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 020e 	bic.w	r2, r2, #14
 8001d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d004      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
    }
  }
  return;
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
}
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40020008 	.word	0x40020008
 8001d7c:	4002001c 	.word	0x4002001c
 8001d80:	40020030 	.word	0x40020030
 8001d84:	40020044 	.word	0x40020044
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	4002006c 	.word	0x4002006c
 8001d90:	40020000 	.word	0x40020000

08001d94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d108      	bne.n	8001dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dd2:	e007      	b.n	8001de4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b08b      	sub	sp, #44	; 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e169      	b.n	80020d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8158 	bne.w	80020d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a9a      	ldr	r2, [pc, #616]	; (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d05e      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e2c:	4a98      	ldr	r2, [pc, #608]	; (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d875      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e32:	4a98      	ldr	r2, [pc, #608]	; (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d058      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e38:	4a96      	ldr	r2, [pc, #600]	; (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d86f      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e3e:	4a96      	ldr	r2, [pc, #600]	; (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d052      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e44:	4a94      	ldr	r2, [pc, #592]	; (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d869      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e4a:	4a94      	ldr	r2, [pc, #592]	; (800209c <HAL_GPIO_Init+0x2ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04c      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e50:	4a92      	ldr	r2, [pc, #584]	; (800209c <HAL_GPIO_Init+0x2ac>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d863      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e56:	4a92      	ldr	r2, [pc, #584]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d046      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e5c:	4a90      	ldr	r2, [pc, #576]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d85d      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d82a      	bhi.n	8001ebc <HAL_GPIO_Init+0xcc>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d859      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <HAL_GPIO_Init+0x80>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001ed7 	.word	0x08001ed7
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f1f 	.word	0x08001f1f
 8001e84:	08001f1f 	.word	0x08001f1f
 8001e88:	08001f1f 	.word	0x08001f1f
 8001e8c:	08001f1f 	.word	0x08001f1f
 8001e90:	08001f1f 	.word	0x08001f1f
 8001e94:	08001f1f 	.word	0x08001f1f
 8001e98:	08001f1f 	.word	0x08001f1f
 8001e9c:	08001f1f 	.word	0x08001f1f
 8001ea0:	08001f1f 	.word	0x08001f1f
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001f1f 	.word	0x08001f1f
 8001eac:	08001f1f 	.word	0x08001f1f
 8001eb0:	08001f1f 	.word	0x08001f1f
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ee1 	.word	0x08001ee1
 8001ebc:	4a79      	ldr	r2, [pc, #484]	; (80020a4 <HAL_GPIO_Init+0x2b4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec2:	e02c      	b.n	8001f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e029      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e024      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3308      	adds	r3, #8
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e01f      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e01a      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e013      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	611a      	str	r2, [r3, #16]
          break;
 8001f0a:	e009      	b.n	8001f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	615a      	str	r2, [r3, #20]
          break;
 8001f16:	e003      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          break;
 8001f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d801      	bhi.n	8001f2a <HAL_GPIO_Init+0x13a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_Init+0x13e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	; 0xff
 8001f34:	d802      	bhi.n	8001f3c <HAL_GPIO_Init+0x14c>
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x152>
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3b08      	subs	r3, #8
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	210f      	movs	r1, #15
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80b1 	beq.w	80020d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f70:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2bc>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <HAL_GPIO_Init+0x2c0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_GPIO_Init+0x1ec>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	; (80020b4 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3e      	ldr	r2, [pc, #248]	; (80020b8 <HAL_GPIO_Init+0x2c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1e4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	; (80020bc <HAL_GPIO_Init+0x2cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1e0>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fee:	492f      	ldr	r1, [pc, #188]	; (80020ac <HAL_GPIO_Init+0x2bc>)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	492c      	ldr	r1, [pc, #176]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	4928      	ldr	r1, [pc, #160]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4922      	ldr	r1, [pc, #136]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	491e      	ldr	r1, [pc, #120]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4918      	ldr	r1, [pc, #96]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	4914      	ldr	r1, [pc, #80]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e021      	b.n	80020d2 <HAL_GPIO_Init+0x2e2>
 800208e:	bf00      	nop
 8002090:	10320000 	.word	0x10320000
 8002094:	10310000 	.word	0x10310000
 8002098:	10220000 	.word	0x10220000
 800209c:	10210000 	.word	0x10210000
 80020a0:	10120000 	.word	0x10120000
 80020a4:	10110000 	.word	0x10110000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40011400 	.word	0x40011400
 80020c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_GPIO_Init+0x304>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4909      	ldr	r1, [pc, #36]	; (80020f4 <HAL_GPIO_Init+0x304>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	3301      	adds	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae8e 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	372c      	adds	r7, #44	; 0x2c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e001      	b.n	800211a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
	...

08002128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e272      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8087 	beq.w	8002256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002148:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b04      	cmp	r3, #4
 8002152:	d00c      	beq.n	800216e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002154:	4b8f      	ldr	r3, [pc, #572]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d112      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
 8002160:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d10b      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d06c      	beq.n	8002254 <HAL_RCC_OscConfig+0x12c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d168      	bne.n	8002254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e24c      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x76>
 8002190:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a7f      	ldr	r2, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e02e      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x98>
 80021a6:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7a      	ldr	r2, [pc, #488]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b78      	ldr	r3, [pc, #480]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a77      	ldr	r2, [pc, #476]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e01d      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0xbc>
 80021ca:	4b72      	ldr	r3, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a71      	ldr	r2, [pc, #452]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021e4:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a67      	ldr	r2, [pc, #412]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe fe74 	bl	8000ef0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7fe fe70 	bl	8000ef0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e200      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0xe4>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fe60 	bl	8000ef0 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7fe fe5c 	bl	8000ef0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1ec      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x10c>
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d063      	beq.n	800232a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002262:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d11c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d116      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1c0      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4939      	ldr	r1, [pc, #228]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	e03a      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x270>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fe15 	bl	8000ef0 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7fe fe11 	bl	8000ef0 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1a1      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4927      	ldr	r1, [pc, #156]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x270>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe fdf4 	bl	8000ef0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7fe fdf0 	bl	8000ef0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e180      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d03a      	beq.n	80023ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_RCC_OscConfig+0x274>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe fdd4 	bl	8000ef0 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7fe fdd0 	bl	8000ef0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e160      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f000 face 	bl	800290c <RCC_Delay>
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_OscConfig+0x274>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe fdba 	bl	8000ef0 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	e00f      	b.n	80023a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fdb6 	bl	8000ef0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d908      	bls.n	80023a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e146      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	42420000 	.word	0x42420000
 800239c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e9      	bne.n	8002380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a6 	beq.w	8002506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b8b      	ldr	r3, [pc, #556]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b88      	ldr	r3, [pc, #544]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a87      	ldr	r2, [pc, #540]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b85      	ldr	r3, [pc, #532]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b82      	ldr	r3, [pc, #520]	; (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7e      	ldr	r2, [pc, #504]	; (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fd77 	bl	8000ef0 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7fe fd73 	bl	8000ef0 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b64      	cmp	r3, #100	; 0x64
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e103      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b75      	ldr	r3, [pc, #468]	; (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x312>
 800242c:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a6e      	ldr	r2, [pc, #440]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e02d      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x334>
 8002442:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a69      	ldr	r2, [pc, #420]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a66      	ldr	r2, [pc, #408]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	e01c      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0x356>
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a60      	ldr	r2, [pc, #384]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a5d      	ldr	r2, [pc, #372]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e00b      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800247e:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b58      	ldr	r3, [pc, #352]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a57      	ldr	r2, [pc, #348]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d015      	beq.n	80024ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fe fd27 	bl	8000ef0 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe fd23 	bl	8000ef0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0b1      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ee      	beq.n	80024a6 <HAL_RCC_OscConfig+0x37e>
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fd11 	bl	8000ef0 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe fd0d 	bl	8000ef0 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e09b      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d105      	bne.n	8002506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a3b      	ldr	r2, [pc, #236]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002510:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d061      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d146      	bne.n	80025b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fce1 	bl	8000ef0 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7fe fcdd 	bl	8000ef0 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e06d      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002544:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4921      	ldr	r1, [pc, #132]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a19      	ldr	r1, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	430b      	orrs	r3, r1
 800257e:	491b      	ldr	r1, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe fcb1 	bl	8000ef0 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe fcad 	bl	8000ef0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e03d      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x46a>
 80025b0:	e035      	b.n	800261e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fc9a 	bl	8000ef0 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fc96 	bl	8000ef0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e026      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x498>
 80025de:	e01e      	b.n	800261e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e019      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
 80025f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x500>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0d0      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4965      	ldr	r1, [pc, #404]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d040      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d115      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e073      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06b      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4936      	ldr	r1, [pc, #216]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7fe fbe8 	bl	8000ef0 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fbe4 	bl	8000ef0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e053      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d210      	bcs.n	800277c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4922      	ldr	r1, [pc, #136]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f821 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1cc>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fb46 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08003da4 	.word	0x08003da4
 80027f8:	20000008 	.word	0x20000008
 80027fc:	2000000c 	.word	0x2000000c

08002800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_RCC_GetSysClockFreq+0x94>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d002      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x30>
 800282a:	2b08      	cmp	r3, #8
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x36>
 800282e:	e027      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002832:	613b      	str	r3, [r7, #16]
      break;
 8002834:	e027      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002840:	5cd3      	ldrb	r3, [r2, r3]
 8002842:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCC_GetSysClockFreq+0x94>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0c5b      	lsrs	r3, r3, #17
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
 800285c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002862:	fb03 f202 	mul.w	r2, r3, r2
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e004      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	613b      	str	r3, [r7, #16]
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	613b      	str	r3, [r7, #16]
      break;
 8002884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002886:	693b      	ldr	r3, [r7, #16]
}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	007a1200 	.word	0x007a1200
 800289c:	08003dbc 	.word	0x08003dbc
 80028a0:	08003dcc 	.word	0x08003dcc
 80028a4:	003d0900 	.word	0x003d0900

080028a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ac:	4b02      	ldr	r3, [pc, #8]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000008 	.word	0x20000008

080028bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c0:	f7ff fff2 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08003db4 	.word	0x08003db4

080028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028e8:	f7ff ffde 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	0adb      	lsrs	r3, r3, #11
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4903      	ldr	r1, [pc, #12]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	08003db4 	.word	0x08003db4

0800290c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <RCC_Delay+0x34>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <RCC_Delay+0x38>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0a5b      	lsrs	r3, r3, #9
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002928:	bf00      	nop
  }
  while (Delay --);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	60fa      	str	r2, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f9      	bne.n	8002928 <RCC_Delay+0x1c>
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000008 	.word	0x20000008
 8002944:	10624dd3 	.word	0x10624dd3

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d07d      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	61d3      	str	r3, [r2, #28]
 8002980:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d118      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a42      	ldr	r2, [pc, #264]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a8:	f7fe faa2 	bl	8000ef0 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	e008      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7fe fa9e 	bl	8000ef0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e06d      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02e      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d027      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029fc:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d014      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fa6d 	bl	8000ef0 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fa69 	bl	8000ef0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e036      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ee      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4917      	ldr	r1, [pc, #92]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	490b      	ldr	r1, [pc, #44]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	42420440 	.word	0x42420440

08002ab4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	f200 808a 	bhi.w	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d045      	beq.n	8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d075      	beq.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002aea:	e082      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002af2:	4b45      	ldr	r3, [pc, #276]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d07b      	beq.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a41      	ldr	r2, [pc, #260]	; (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b16:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0c5b      	lsrs	r3, r3, #17
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	4a3b      	ldr	r2, [pc, #236]	; (8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b30:	4a38      	ldr	r2, [pc, #224]	; (8002c14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	e004      	b.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d102      	bne.n	8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	61bb      	str	r3, [r7, #24]
      break;
 8002b5e:	e04a      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	61bb      	str	r3, [r7, #24]
      break;
 8002b6e:	e042      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b80:	d108      	bne.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e01f      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b9e:	d109      	bne.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002bac:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bbe:	d11c      	bne.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002bcc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002bd0:	61bb      	str	r3, [r7, #24]
      break;
 8002bd2:	e012      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bd4:	e011      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bd6:	f7ff fe85 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0b9b      	lsrs	r3, r3, #14
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	61bb      	str	r3, [r7, #24]
      break;
 8002bf0:	e004      	b.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bfa:	bf00      	nop
    }
  }
  return (frequency);
 8002bfc:	69bb      	ldr	r3, [r7, #24]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08003dd0 	.word	0x08003dd0
 8002c10:	08003de0 	.word	0x08003de0
 8002c14:	007a1200 	.word	0x007a1200
 8002c18:	003d0900 	.word	0x003d0900
 8002c1c:	aaaaaaab 	.word	0xaaaaaaab

08002c20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e093      	b.n	8002d5c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fd ffad 	bl	8000ba8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c64:	f023 0307 	bic.w	r3, r3, #7
 8002c68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3304      	adds	r3, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f000 f903 	bl	8002e80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca2:	f023 0303 	bic.w	r3, r3, #3
 8002ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cc0:	f023 030c 	bic.w	r3, r3, #12
 8002cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ccc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	011a      	lsls	r2, r3, #4
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	031b      	lsls	r3, r3, #12
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d110      	bne.n	8002db6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d9a:	7b7b      	ldrb	r3, [r7, #13]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d001      	beq.n	8002da4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e069      	b.n	8002e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db4:	e031      	b.n	8002e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d110      	bne.n	8002dde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dbc:	7bbb      	ldrb	r3, [r7, #14]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dc2:	7b3b      	ldrb	r3, [r7, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d001      	beq.n	8002dcc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e055      	b.n	8002e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ddc:	e01d      	b.n	8002e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d108      	bne.n	8002df6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002de4:	7bbb      	ldrb	r3, [r7, #14]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dea:	7b7b      	ldrb	r3, [r7, #13]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002df0:	7b3b      	ldrb	r3, [r7, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e03e      	b.n	8002e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_TIM_Encoder_Start+0xc4>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d008      	beq.n	8002e38 <HAL_TIM_Encoder_Start+0xd4>
 8002e26:	e00f      	b.n	8002e48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f887 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 8002e36:	e016      	b.n	8002e66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2104      	movs	r1, #4
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f87f 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 8002e46:	e00e      	b.n	8002e66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f877 	bl	8002f44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f870 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 8002e64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a29      	ldr	r2, [pc, #164]	; (8002f38 <TIM_Base_SetConfig+0xb8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00b      	beq.n	8002eb0 <TIM_Base_SetConfig+0x30>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9e:	d007      	beq.n	8002eb0 <TIM_Base_SetConfig+0x30>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <TIM_Base_SetConfig+0xbc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_Base_SetConfig+0x30>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <TIM_Base_SetConfig+0xc0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d108      	bne.n	8002ec2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <TIM_Base_SetConfig+0xb8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00b      	beq.n	8002ee2 <TIM_Base_SetConfig+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d007      	beq.n	8002ee2 <TIM_Base_SetConfig+0x62>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <TIM_Base_SetConfig+0xbc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_Base_SetConfig+0x62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <TIM_Base_SetConfig+0xc0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d108      	bne.n	8002ef4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <TIM_Base_SetConfig+0xb8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	615a      	str	r2, [r3, #20]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	40012c00 	.word	0x40012c00
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800

08002f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2201      	movs	r2, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e046      	b.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a16      	ldr	r2, [pc, #88]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d009      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a10      	ldr	r2, [pc, #64]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10c      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800

08003048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e042      	b.n	80030e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fe06 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800308a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f91d 	bl	80032cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b20      	cmp	r3, #32
 8003106:	d16d      	bne.n	80031e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Transmit+0x2c>
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e066      	b.n	80031e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2221      	movs	r2, #33	; 0x21
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003126:	f7fd fee3 	bl	8000ef0 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003140:	d108      	bne.n	8003154 <HAL_UART_Transmit+0x6c>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e003      	b.n	800315c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800315c:	e02a      	b.n	80031b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f840 	bl	80031ee <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e036      	b.n	80031e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800318c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	3302      	adds	r3, #2
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	e007      	b.n	80031a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1cf      	bne.n	800315e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2140      	movs	r1, #64	; 0x40
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f810 	bl	80031ee <UART_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e006      	b.n	80031e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b090      	sub	sp, #64	; 0x40
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fe:	e050      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003206:	d04c      	beq.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <UART_WaitOnFlagUntilTimeout+0x30>
 800320e:	f7fd fe6f 	bl	8000ef0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800321a:	429a      	cmp	r2, r3
 800321c:	d241      	bcs.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800323e:	637a      	str	r2, [r7, #52]	; 0x34
 8003240:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e5      	bne.n	800321e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	613b      	str	r3, [r7, #16]
   return(result);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3314      	adds	r3, #20
 8003270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003272:	623a      	str	r2, [r7, #32]
 8003274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	69f9      	ldr	r1, [r7, #28]
 8003278:	6a3a      	ldr	r2, [r7, #32]
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e5      	bne.n	8003252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e00f      	b.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d09f      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3740      	adds	r7, #64	; 0x40
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003306:	f023 030c 	bic.w	r3, r3, #12
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	430b      	orrs	r3, r1
 8003312:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2c      	ldr	r2, [pc, #176]	; (80033e0 <UART_SetConfig+0x114>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d103      	bne.n	800333c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003334:	f7ff fad6 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	e002      	b.n	8003342 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800333c:	f7ff fabe 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8003340:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009a      	lsls	r2, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <UART_SetConfig+0x118>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	0119      	lsls	r1, r3, #4
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fbb2 f2f3 	udiv	r2, r2, r3
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <UART_SetConfig+0x118>)
 800337a:	fba3 0302 	umull	r0, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2064      	movs	r0, #100	; 0x64
 8003382:	fb00 f303 	mul.w	r3, r0, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	; 0x32
 800338c:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <UART_SetConfig+0x118>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003398:	4419      	add	r1, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009a      	lsls	r2, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <UART_SetConfig+0x118>)
 80033b2:	fba3 0302 	umull	r0, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2064      	movs	r0, #100	; 0x64
 80033ba:	fb00 f303 	mul.w	r3, r0, r3
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	3332      	adds	r3, #50	; 0x32
 80033c4:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <UART_SetConfig+0x118>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	440a      	add	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40013800 	.word	0x40013800
 80033e4:	51eb851f 	.word	0x51eb851f

080033e8 <siprintf>:
 80033e8:	b40e      	push	{r1, r2, r3}
 80033ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033ee:	b500      	push	{lr}
 80033f0:	b09c      	sub	sp, #112	; 0x70
 80033f2:	ab1d      	add	r3, sp, #116	; 0x74
 80033f4:	9002      	str	r0, [sp, #8]
 80033f6:	9006      	str	r0, [sp, #24]
 80033f8:	9107      	str	r1, [sp, #28]
 80033fa:	9104      	str	r1, [sp, #16]
 80033fc:	4808      	ldr	r0, [pc, #32]	; (8003420 <siprintf+0x38>)
 80033fe:	4909      	ldr	r1, [pc, #36]	; (8003424 <siprintf+0x3c>)
 8003400:	f853 2b04 	ldr.w	r2, [r3], #4
 8003404:	9105      	str	r1, [sp, #20]
 8003406:	6800      	ldr	r0, [r0, #0]
 8003408:	a902      	add	r1, sp, #8
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	f000 f98e 	bl	800372c <_svfiprintf_r>
 8003410:	2200      	movs	r2, #0
 8003412:	9b02      	ldr	r3, [sp, #8]
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	b01c      	add	sp, #112	; 0x70
 8003418:	f85d eb04 	ldr.w	lr, [sp], #4
 800341c:	b003      	add	sp, #12
 800341e:	4770      	bx	lr
 8003420:	20000060 	.word	0x20000060
 8003424:	ffff0208 	.word	0xffff0208

08003428 <memset>:
 8003428:	4603      	mov	r3, r0
 800342a:	4402      	add	r2, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <__errno>:
 8003438:	4b01      	ldr	r3, [pc, #4]	; (8003440 <__errno+0x8>)
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000060 	.word	0x20000060

08003444 <__libc_init_array>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	2600      	movs	r6, #0
 8003448:	4d0c      	ldr	r5, [pc, #48]	; (800347c <__libc_init_array+0x38>)
 800344a:	4c0d      	ldr	r4, [pc, #52]	; (8003480 <__libc_init_array+0x3c>)
 800344c:	1b64      	subs	r4, r4, r5
 800344e:	10a4      	asrs	r4, r4, #2
 8003450:	42a6      	cmp	r6, r4
 8003452:	d109      	bne.n	8003468 <__libc_init_array+0x24>
 8003454:	f000 fc7a 	bl	8003d4c <_init>
 8003458:	2600      	movs	r6, #0
 800345a:	4d0a      	ldr	r5, [pc, #40]	; (8003484 <__libc_init_array+0x40>)
 800345c:	4c0a      	ldr	r4, [pc, #40]	; (8003488 <__libc_init_array+0x44>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	42a6      	cmp	r6, r4
 8003464:	d105      	bne.n	8003472 <__libc_init_array+0x2e>
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	f855 3b04 	ldr.w	r3, [r5], #4
 800346c:	4798      	blx	r3
 800346e:	3601      	adds	r6, #1
 8003470:	e7ee      	b.n	8003450 <__libc_init_array+0xc>
 8003472:	f855 3b04 	ldr.w	r3, [r5], #4
 8003476:	4798      	blx	r3
 8003478:	3601      	adds	r6, #1
 800347a:	e7f2      	b.n	8003462 <__libc_init_array+0x1e>
 800347c:	08003e18 	.word	0x08003e18
 8003480:	08003e18 	.word	0x08003e18
 8003484:	08003e18 	.word	0x08003e18
 8003488:	08003e1c 	.word	0x08003e1c

0800348c <__retarget_lock_acquire_recursive>:
 800348c:	4770      	bx	lr

0800348e <__retarget_lock_release_recursive>:
 800348e:	4770      	bx	lr

08003490 <_free_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4605      	mov	r5, r0
 8003494:	2900      	cmp	r1, #0
 8003496:	d040      	beq.n	800351a <_free_r+0x8a>
 8003498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800349c:	1f0c      	subs	r4, r1, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bfb8      	it	lt
 80034a2:	18e4      	addlt	r4, r4, r3
 80034a4:	f000 f8dc 	bl	8003660 <__malloc_lock>
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <_free_r+0x8c>)
 80034aa:	6813      	ldr	r3, [r2, #0]
 80034ac:	b933      	cbnz	r3, 80034bc <_free_r+0x2c>
 80034ae:	6063      	str	r3, [r4, #4]
 80034b0:	6014      	str	r4, [r2, #0]
 80034b2:	4628      	mov	r0, r5
 80034b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034b8:	f000 b8d8 	b.w	800366c <__malloc_unlock>
 80034bc:	42a3      	cmp	r3, r4
 80034be:	d908      	bls.n	80034d2 <_free_r+0x42>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	1821      	adds	r1, r4, r0
 80034c4:	428b      	cmp	r3, r1
 80034c6:	bf01      	itttt	eq
 80034c8:	6819      	ldreq	r1, [r3, #0]
 80034ca:	685b      	ldreq	r3, [r3, #4]
 80034cc:	1809      	addeq	r1, r1, r0
 80034ce:	6021      	streq	r1, [r4, #0]
 80034d0:	e7ed      	b.n	80034ae <_free_r+0x1e>
 80034d2:	461a      	mov	r2, r3
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	b10b      	cbz	r3, 80034dc <_free_r+0x4c>
 80034d8:	42a3      	cmp	r3, r4
 80034da:	d9fa      	bls.n	80034d2 <_free_r+0x42>
 80034dc:	6811      	ldr	r1, [r2, #0]
 80034de:	1850      	adds	r0, r2, r1
 80034e0:	42a0      	cmp	r0, r4
 80034e2:	d10b      	bne.n	80034fc <_free_r+0x6c>
 80034e4:	6820      	ldr	r0, [r4, #0]
 80034e6:	4401      	add	r1, r0
 80034e8:	1850      	adds	r0, r2, r1
 80034ea:	4283      	cmp	r3, r0
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	d1e0      	bne.n	80034b2 <_free_r+0x22>
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4408      	add	r0, r1
 80034f6:	6010      	str	r0, [r2, #0]
 80034f8:	6053      	str	r3, [r2, #4]
 80034fa:	e7da      	b.n	80034b2 <_free_r+0x22>
 80034fc:	d902      	bls.n	8003504 <_free_r+0x74>
 80034fe:	230c      	movs	r3, #12
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	e7d6      	b.n	80034b2 <_free_r+0x22>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	1821      	adds	r1, r4, r0
 8003508:	428b      	cmp	r3, r1
 800350a:	bf01      	itttt	eq
 800350c:	6819      	ldreq	r1, [r3, #0]
 800350e:	685b      	ldreq	r3, [r3, #4]
 8003510:	1809      	addeq	r1, r1, r0
 8003512:	6021      	streq	r1, [r4, #0]
 8003514:	6063      	str	r3, [r4, #4]
 8003516:	6054      	str	r4, [r2, #4]
 8003518:	e7cb      	b.n	80034b2 <_free_r+0x22>
 800351a:	bd38      	pop	{r3, r4, r5, pc}
 800351c:	20000354 	.word	0x20000354

08003520 <sbrk_aligned>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4e0e      	ldr	r6, [pc, #56]	; (800355c <sbrk_aligned+0x3c>)
 8003524:	460c      	mov	r4, r1
 8003526:	6831      	ldr	r1, [r6, #0]
 8003528:	4605      	mov	r5, r0
 800352a:	b911      	cbnz	r1, 8003532 <sbrk_aligned+0x12>
 800352c:	f000 fbaa 	bl	8003c84 <_sbrk_r>
 8003530:	6030      	str	r0, [r6, #0]
 8003532:	4621      	mov	r1, r4
 8003534:	4628      	mov	r0, r5
 8003536:	f000 fba5 	bl	8003c84 <_sbrk_r>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	d00a      	beq.n	8003554 <sbrk_aligned+0x34>
 800353e:	1cc4      	adds	r4, r0, #3
 8003540:	f024 0403 	bic.w	r4, r4, #3
 8003544:	42a0      	cmp	r0, r4
 8003546:	d007      	beq.n	8003558 <sbrk_aligned+0x38>
 8003548:	1a21      	subs	r1, r4, r0
 800354a:	4628      	mov	r0, r5
 800354c:	f000 fb9a 	bl	8003c84 <_sbrk_r>
 8003550:	3001      	adds	r0, #1
 8003552:	d101      	bne.n	8003558 <sbrk_aligned+0x38>
 8003554:	f04f 34ff 	mov.w	r4, #4294967295
 8003558:	4620      	mov	r0, r4
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	20000358 	.word	0x20000358

08003560 <_malloc_r>:
 8003560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003564:	1ccd      	adds	r5, r1, #3
 8003566:	f025 0503 	bic.w	r5, r5, #3
 800356a:	3508      	adds	r5, #8
 800356c:	2d0c      	cmp	r5, #12
 800356e:	bf38      	it	cc
 8003570:	250c      	movcc	r5, #12
 8003572:	2d00      	cmp	r5, #0
 8003574:	4607      	mov	r7, r0
 8003576:	db01      	blt.n	800357c <_malloc_r+0x1c>
 8003578:	42a9      	cmp	r1, r5
 800357a:	d905      	bls.n	8003588 <_malloc_r+0x28>
 800357c:	230c      	movs	r3, #12
 800357e:	2600      	movs	r6, #0
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4630      	mov	r0, r6
 8003584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003588:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800365c <_malloc_r+0xfc>
 800358c:	f000 f868 	bl	8003660 <__malloc_lock>
 8003590:	f8d8 3000 	ldr.w	r3, [r8]
 8003594:	461c      	mov	r4, r3
 8003596:	bb5c      	cbnz	r4, 80035f0 <_malloc_r+0x90>
 8003598:	4629      	mov	r1, r5
 800359a:	4638      	mov	r0, r7
 800359c:	f7ff ffc0 	bl	8003520 <sbrk_aligned>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	4604      	mov	r4, r0
 80035a4:	d155      	bne.n	8003652 <_malloc_r+0xf2>
 80035a6:	f8d8 4000 	ldr.w	r4, [r8]
 80035aa:	4626      	mov	r6, r4
 80035ac:	2e00      	cmp	r6, #0
 80035ae:	d145      	bne.n	800363c <_malloc_r+0xdc>
 80035b0:	2c00      	cmp	r4, #0
 80035b2:	d048      	beq.n	8003646 <_malloc_r+0xe6>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	4631      	mov	r1, r6
 80035b8:	4638      	mov	r0, r7
 80035ba:	eb04 0903 	add.w	r9, r4, r3
 80035be:	f000 fb61 	bl	8003c84 <_sbrk_r>
 80035c2:	4581      	cmp	r9, r0
 80035c4:	d13f      	bne.n	8003646 <_malloc_r+0xe6>
 80035c6:	6821      	ldr	r1, [r4, #0]
 80035c8:	4638      	mov	r0, r7
 80035ca:	1a6d      	subs	r5, r5, r1
 80035cc:	4629      	mov	r1, r5
 80035ce:	f7ff ffa7 	bl	8003520 <sbrk_aligned>
 80035d2:	3001      	adds	r0, #1
 80035d4:	d037      	beq.n	8003646 <_malloc_r+0xe6>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	442b      	add	r3, r5
 80035da:	6023      	str	r3, [r4, #0]
 80035dc:	f8d8 3000 	ldr.w	r3, [r8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d038      	beq.n	8003656 <_malloc_r+0xf6>
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	42a2      	cmp	r2, r4
 80035e8:	d12b      	bne.n	8003642 <_malloc_r+0xe2>
 80035ea:	2200      	movs	r2, #0
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	e00f      	b.n	8003610 <_malloc_r+0xb0>
 80035f0:	6822      	ldr	r2, [r4, #0]
 80035f2:	1b52      	subs	r2, r2, r5
 80035f4:	d41f      	bmi.n	8003636 <_malloc_r+0xd6>
 80035f6:	2a0b      	cmp	r2, #11
 80035f8:	d917      	bls.n	800362a <_malloc_r+0xca>
 80035fa:	1961      	adds	r1, r4, r5
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	6025      	str	r5, [r4, #0]
 8003600:	bf18      	it	ne
 8003602:	6059      	strne	r1, [r3, #4]
 8003604:	6863      	ldr	r3, [r4, #4]
 8003606:	bf08      	it	eq
 8003608:	f8c8 1000 	streq.w	r1, [r8]
 800360c:	5162      	str	r2, [r4, r5]
 800360e:	604b      	str	r3, [r1, #4]
 8003610:	4638      	mov	r0, r7
 8003612:	f104 060b 	add.w	r6, r4, #11
 8003616:	f000 f829 	bl	800366c <__malloc_unlock>
 800361a:	f026 0607 	bic.w	r6, r6, #7
 800361e:	1d23      	adds	r3, r4, #4
 8003620:	1af2      	subs	r2, r6, r3
 8003622:	d0ae      	beq.n	8003582 <_malloc_r+0x22>
 8003624:	1b9b      	subs	r3, r3, r6
 8003626:	50a3      	str	r3, [r4, r2]
 8003628:	e7ab      	b.n	8003582 <_malloc_r+0x22>
 800362a:	42a3      	cmp	r3, r4
 800362c:	6862      	ldr	r2, [r4, #4]
 800362e:	d1dd      	bne.n	80035ec <_malloc_r+0x8c>
 8003630:	f8c8 2000 	str.w	r2, [r8]
 8003634:	e7ec      	b.n	8003610 <_malloc_r+0xb0>
 8003636:	4623      	mov	r3, r4
 8003638:	6864      	ldr	r4, [r4, #4]
 800363a:	e7ac      	b.n	8003596 <_malloc_r+0x36>
 800363c:	4634      	mov	r4, r6
 800363e:	6876      	ldr	r6, [r6, #4]
 8003640:	e7b4      	b.n	80035ac <_malloc_r+0x4c>
 8003642:	4613      	mov	r3, r2
 8003644:	e7cc      	b.n	80035e0 <_malloc_r+0x80>
 8003646:	230c      	movs	r3, #12
 8003648:	4638      	mov	r0, r7
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	f000 f80e 	bl	800366c <__malloc_unlock>
 8003650:	e797      	b.n	8003582 <_malloc_r+0x22>
 8003652:	6025      	str	r5, [r4, #0]
 8003654:	e7dc      	b.n	8003610 <_malloc_r+0xb0>
 8003656:	605b      	str	r3, [r3, #4]
 8003658:	deff      	udf	#255	; 0xff
 800365a:	bf00      	nop
 800365c:	20000354 	.word	0x20000354

08003660 <__malloc_lock>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__malloc_lock+0x8>)
 8003662:	f7ff bf13 	b.w	800348c <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	20000350 	.word	0x20000350

0800366c <__malloc_unlock>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__malloc_unlock+0x8>)
 800366e:	f7ff bf0e 	b.w	800348e <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	20000350 	.word	0x20000350

08003678 <__ssputs_r>:
 8003678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	461f      	mov	r7, r3
 800367e:	688e      	ldr	r6, [r1, #8]
 8003680:	4682      	mov	sl, r0
 8003682:	42be      	cmp	r6, r7
 8003684:	460c      	mov	r4, r1
 8003686:	4690      	mov	r8, r2
 8003688:	680b      	ldr	r3, [r1, #0]
 800368a:	d82c      	bhi.n	80036e6 <__ssputs_r+0x6e>
 800368c:	898a      	ldrh	r2, [r1, #12]
 800368e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003692:	d026      	beq.n	80036e2 <__ssputs_r+0x6a>
 8003694:	6965      	ldr	r5, [r4, #20]
 8003696:	6909      	ldr	r1, [r1, #16]
 8003698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800369c:	eba3 0901 	sub.w	r9, r3, r1
 80036a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036a4:	1c7b      	adds	r3, r7, #1
 80036a6:	444b      	add	r3, r9
 80036a8:	106d      	asrs	r5, r5, #1
 80036aa:	429d      	cmp	r5, r3
 80036ac:	bf38      	it	cc
 80036ae:	461d      	movcc	r5, r3
 80036b0:	0553      	lsls	r3, r2, #21
 80036b2:	d527      	bpl.n	8003704 <__ssputs_r+0x8c>
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7ff ff53 	bl	8003560 <_malloc_r>
 80036ba:	4606      	mov	r6, r0
 80036bc:	b360      	cbz	r0, 8003718 <__ssputs_r+0xa0>
 80036be:	464a      	mov	r2, r9
 80036c0:	6921      	ldr	r1, [r4, #16]
 80036c2:	f000 fafd 	bl	8003cc0 <memcpy>
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d0:	81a3      	strh	r3, [r4, #12]
 80036d2:	6126      	str	r6, [r4, #16]
 80036d4:	444e      	add	r6, r9
 80036d6:	6026      	str	r6, [r4, #0]
 80036d8:	463e      	mov	r6, r7
 80036da:	6165      	str	r5, [r4, #20]
 80036dc:	eba5 0509 	sub.w	r5, r5, r9
 80036e0:	60a5      	str	r5, [r4, #8]
 80036e2:	42be      	cmp	r6, r7
 80036e4:	d900      	bls.n	80036e8 <__ssputs_r+0x70>
 80036e6:	463e      	mov	r6, r7
 80036e8:	4632      	mov	r2, r6
 80036ea:	4641      	mov	r1, r8
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	f000 faaf 	bl	8003c50 <memmove>
 80036f2:	2000      	movs	r0, #0
 80036f4:	68a3      	ldr	r3, [r4, #8]
 80036f6:	1b9b      	subs	r3, r3, r6
 80036f8:	60a3      	str	r3, [r4, #8]
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	4433      	add	r3, r6
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003704:	462a      	mov	r2, r5
 8003706:	f000 fae9 	bl	8003cdc <_realloc_r>
 800370a:	4606      	mov	r6, r0
 800370c:	2800      	cmp	r0, #0
 800370e:	d1e0      	bne.n	80036d2 <__ssputs_r+0x5a>
 8003710:	4650      	mov	r0, sl
 8003712:	6921      	ldr	r1, [r4, #16]
 8003714:	f7ff febc 	bl	8003490 <_free_r>
 8003718:	230c      	movs	r3, #12
 800371a:	f8ca 3000 	str.w	r3, [sl]
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003728:	81a3      	strh	r3, [r4, #12]
 800372a:	e7e9      	b.n	8003700 <__ssputs_r+0x88>

0800372c <_svfiprintf_r>:
 800372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003730:	4698      	mov	r8, r3
 8003732:	898b      	ldrh	r3, [r1, #12]
 8003734:	4607      	mov	r7, r0
 8003736:	061b      	lsls	r3, r3, #24
 8003738:	460d      	mov	r5, r1
 800373a:	4614      	mov	r4, r2
 800373c:	b09d      	sub	sp, #116	; 0x74
 800373e:	d50e      	bpl.n	800375e <_svfiprintf_r+0x32>
 8003740:	690b      	ldr	r3, [r1, #16]
 8003742:	b963      	cbnz	r3, 800375e <_svfiprintf_r+0x32>
 8003744:	2140      	movs	r1, #64	; 0x40
 8003746:	f7ff ff0b 	bl	8003560 <_malloc_r>
 800374a:	6028      	str	r0, [r5, #0]
 800374c:	6128      	str	r0, [r5, #16]
 800374e:	b920      	cbnz	r0, 800375a <_svfiprintf_r+0x2e>
 8003750:	230c      	movs	r3, #12
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	e0d0      	b.n	80038fc <_svfiprintf_r+0x1d0>
 800375a:	2340      	movs	r3, #64	; 0x40
 800375c:	616b      	str	r3, [r5, #20]
 800375e:	2300      	movs	r3, #0
 8003760:	9309      	str	r3, [sp, #36]	; 0x24
 8003762:	2320      	movs	r3, #32
 8003764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003768:	2330      	movs	r3, #48	; 0x30
 800376a:	f04f 0901 	mov.w	r9, #1
 800376e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003772:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003914 <_svfiprintf_r+0x1e8>
 8003776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800377a:	4623      	mov	r3, r4
 800377c:	469a      	mov	sl, r3
 800377e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003782:	b10a      	cbz	r2, 8003788 <_svfiprintf_r+0x5c>
 8003784:	2a25      	cmp	r2, #37	; 0x25
 8003786:	d1f9      	bne.n	800377c <_svfiprintf_r+0x50>
 8003788:	ebba 0b04 	subs.w	fp, sl, r4
 800378c:	d00b      	beq.n	80037a6 <_svfiprintf_r+0x7a>
 800378e:	465b      	mov	r3, fp
 8003790:	4622      	mov	r2, r4
 8003792:	4629      	mov	r1, r5
 8003794:	4638      	mov	r0, r7
 8003796:	f7ff ff6f 	bl	8003678 <__ssputs_r>
 800379a:	3001      	adds	r0, #1
 800379c:	f000 80a9 	beq.w	80038f2 <_svfiprintf_r+0x1c6>
 80037a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037a2:	445a      	add	r2, fp
 80037a4:	9209      	str	r2, [sp, #36]	; 0x24
 80037a6:	f89a 3000 	ldrb.w	r3, [sl]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a1 	beq.w	80038f2 <_svfiprintf_r+0x1c6>
 80037b0:	2300      	movs	r3, #0
 80037b2:	f04f 32ff 	mov.w	r2, #4294967295
 80037b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ba:	f10a 0a01 	add.w	sl, sl, #1
 80037be:	9304      	str	r3, [sp, #16]
 80037c0:	9307      	str	r3, [sp, #28]
 80037c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037c6:	931a      	str	r3, [sp, #104]	; 0x68
 80037c8:	4654      	mov	r4, sl
 80037ca:	2205      	movs	r2, #5
 80037cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d0:	4850      	ldr	r0, [pc, #320]	; (8003914 <_svfiprintf_r+0x1e8>)
 80037d2:	f000 fa67 	bl	8003ca4 <memchr>
 80037d6:	9a04      	ldr	r2, [sp, #16]
 80037d8:	b9d8      	cbnz	r0, 8003812 <_svfiprintf_r+0xe6>
 80037da:	06d0      	lsls	r0, r2, #27
 80037dc:	bf44      	itt	mi
 80037de:	2320      	movmi	r3, #32
 80037e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037e4:	0711      	lsls	r1, r2, #28
 80037e6:	bf44      	itt	mi
 80037e8:	232b      	movmi	r3, #43	; 0x2b
 80037ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ee:	f89a 3000 	ldrb.w	r3, [sl]
 80037f2:	2b2a      	cmp	r3, #42	; 0x2a
 80037f4:	d015      	beq.n	8003822 <_svfiprintf_r+0xf6>
 80037f6:	4654      	mov	r4, sl
 80037f8:	2000      	movs	r0, #0
 80037fa:	f04f 0c0a 	mov.w	ip, #10
 80037fe:	9a07      	ldr	r2, [sp, #28]
 8003800:	4621      	mov	r1, r4
 8003802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003806:	3b30      	subs	r3, #48	; 0x30
 8003808:	2b09      	cmp	r3, #9
 800380a:	d94d      	bls.n	80038a8 <_svfiprintf_r+0x17c>
 800380c:	b1b0      	cbz	r0, 800383c <_svfiprintf_r+0x110>
 800380e:	9207      	str	r2, [sp, #28]
 8003810:	e014      	b.n	800383c <_svfiprintf_r+0x110>
 8003812:	eba0 0308 	sub.w	r3, r0, r8
 8003816:	fa09 f303 	lsl.w	r3, r9, r3
 800381a:	4313      	orrs	r3, r2
 800381c:	46a2      	mov	sl, r4
 800381e:	9304      	str	r3, [sp, #16]
 8003820:	e7d2      	b.n	80037c8 <_svfiprintf_r+0x9c>
 8003822:	9b03      	ldr	r3, [sp, #12]
 8003824:	1d19      	adds	r1, r3, #4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	9103      	str	r1, [sp, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	bfbb      	ittet	lt
 800382e:	425b      	neglt	r3, r3
 8003830:	f042 0202 	orrlt.w	r2, r2, #2
 8003834:	9307      	strge	r3, [sp, #28]
 8003836:	9307      	strlt	r3, [sp, #28]
 8003838:	bfb8      	it	lt
 800383a:	9204      	strlt	r2, [sp, #16]
 800383c:	7823      	ldrb	r3, [r4, #0]
 800383e:	2b2e      	cmp	r3, #46	; 0x2e
 8003840:	d10c      	bne.n	800385c <_svfiprintf_r+0x130>
 8003842:	7863      	ldrb	r3, [r4, #1]
 8003844:	2b2a      	cmp	r3, #42	; 0x2a
 8003846:	d134      	bne.n	80038b2 <_svfiprintf_r+0x186>
 8003848:	9b03      	ldr	r3, [sp, #12]
 800384a:	3402      	adds	r4, #2
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	9203      	str	r2, [sp, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	bfb8      	it	lt
 8003856:	f04f 33ff 	movlt.w	r3, #4294967295
 800385a:	9305      	str	r3, [sp, #20]
 800385c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003918 <_svfiprintf_r+0x1ec>
 8003860:	2203      	movs	r2, #3
 8003862:	4650      	mov	r0, sl
 8003864:	7821      	ldrb	r1, [r4, #0]
 8003866:	f000 fa1d 	bl	8003ca4 <memchr>
 800386a:	b138      	cbz	r0, 800387c <_svfiprintf_r+0x150>
 800386c:	2240      	movs	r2, #64	; 0x40
 800386e:	9b04      	ldr	r3, [sp, #16]
 8003870:	eba0 000a 	sub.w	r0, r0, sl
 8003874:	4082      	lsls	r2, r0
 8003876:	4313      	orrs	r3, r2
 8003878:	3401      	adds	r4, #1
 800387a:	9304      	str	r3, [sp, #16]
 800387c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003880:	2206      	movs	r2, #6
 8003882:	4826      	ldr	r0, [pc, #152]	; (800391c <_svfiprintf_r+0x1f0>)
 8003884:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003888:	f000 fa0c 	bl	8003ca4 <memchr>
 800388c:	2800      	cmp	r0, #0
 800388e:	d038      	beq.n	8003902 <_svfiprintf_r+0x1d6>
 8003890:	4b23      	ldr	r3, [pc, #140]	; (8003920 <_svfiprintf_r+0x1f4>)
 8003892:	bb1b      	cbnz	r3, 80038dc <_svfiprintf_r+0x1b0>
 8003894:	9b03      	ldr	r3, [sp, #12]
 8003896:	3307      	adds	r3, #7
 8003898:	f023 0307 	bic.w	r3, r3, #7
 800389c:	3308      	adds	r3, #8
 800389e:	9303      	str	r3, [sp, #12]
 80038a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038a2:	4433      	add	r3, r6
 80038a4:	9309      	str	r3, [sp, #36]	; 0x24
 80038a6:	e768      	b.n	800377a <_svfiprintf_r+0x4e>
 80038a8:	460c      	mov	r4, r1
 80038aa:	2001      	movs	r0, #1
 80038ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80038b0:	e7a6      	b.n	8003800 <_svfiprintf_r+0xd4>
 80038b2:	2300      	movs	r3, #0
 80038b4:	f04f 0c0a 	mov.w	ip, #10
 80038b8:	4619      	mov	r1, r3
 80038ba:	3401      	adds	r4, #1
 80038bc:	9305      	str	r3, [sp, #20]
 80038be:	4620      	mov	r0, r4
 80038c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038c4:	3a30      	subs	r2, #48	; 0x30
 80038c6:	2a09      	cmp	r2, #9
 80038c8:	d903      	bls.n	80038d2 <_svfiprintf_r+0x1a6>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0c6      	beq.n	800385c <_svfiprintf_r+0x130>
 80038ce:	9105      	str	r1, [sp, #20]
 80038d0:	e7c4      	b.n	800385c <_svfiprintf_r+0x130>
 80038d2:	4604      	mov	r4, r0
 80038d4:	2301      	movs	r3, #1
 80038d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80038da:	e7f0      	b.n	80038be <_svfiprintf_r+0x192>
 80038dc:	ab03      	add	r3, sp, #12
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	462a      	mov	r2, r5
 80038e2:	4638      	mov	r0, r7
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <_svfiprintf_r+0x1f8>)
 80038e6:	a904      	add	r1, sp, #16
 80038e8:	f3af 8000 	nop.w
 80038ec:	1c42      	adds	r2, r0, #1
 80038ee:	4606      	mov	r6, r0
 80038f0:	d1d6      	bne.n	80038a0 <_svfiprintf_r+0x174>
 80038f2:	89ab      	ldrh	r3, [r5, #12]
 80038f4:	065b      	lsls	r3, r3, #25
 80038f6:	f53f af2d 	bmi.w	8003754 <_svfiprintf_r+0x28>
 80038fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038fc:	b01d      	add	sp, #116	; 0x74
 80038fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003902:	ab03      	add	r3, sp, #12
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	462a      	mov	r2, r5
 8003908:	4638      	mov	r0, r7
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <_svfiprintf_r+0x1f8>)
 800390c:	a904      	add	r1, sp, #16
 800390e:	f000 f87d 	bl	8003a0c <_printf_i>
 8003912:	e7eb      	b.n	80038ec <_svfiprintf_r+0x1c0>
 8003914:	08003de2 	.word	0x08003de2
 8003918:	08003de8 	.word	0x08003de8
 800391c:	08003dec 	.word	0x08003dec
 8003920:	00000000 	.word	0x00000000
 8003924:	08003679 	.word	0x08003679

08003928 <_printf_common>:
 8003928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800392c:	4616      	mov	r6, r2
 800392e:	4699      	mov	r9, r3
 8003930:	688a      	ldr	r2, [r1, #8]
 8003932:	690b      	ldr	r3, [r1, #16]
 8003934:	4607      	mov	r7, r0
 8003936:	4293      	cmp	r3, r2
 8003938:	bfb8      	it	lt
 800393a:	4613      	movlt	r3, r2
 800393c:	6033      	str	r3, [r6, #0]
 800393e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003942:	460c      	mov	r4, r1
 8003944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003948:	b10a      	cbz	r2, 800394e <_printf_common+0x26>
 800394a:	3301      	adds	r3, #1
 800394c:	6033      	str	r3, [r6, #0]
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	0699      	lsls	r1, r3, #26
 8003952:	bf42      	ittt	mi
 8003954:	6833      	ldrmi	r3, [r6, #0]
 8003956:	3302      	addmi	r3, #2
 8003958:	6033      	strmi	r3, [r6, #0]
 800395a:	6825      	ldr	r5, [r4, #0]
 800395c:	f015 0506 	ands.w	r5, r5, #6
 8003960:	d106      	bne.n	8003970 <_printf_common+0x48>
 8003962:	f104 0a19 	add.w	sl, r4, #25
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	6832      	ldr	r2, [r6, #0]
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	42ab      	cmp	r3, r5
 800396e:	dc2b      	bgt.n	80039c8 <_printf_common+0xa0>
 8003970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003974:	1e13      	subs	r3, r2, #0
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	bf18      	it	ne
 800397a:	2301      	movne	r3, #1
 800397c:	0692      	lsls	r2, r2, #26
 800397e:	d430      	bmi.n	80039e2 <_printf_common+0xba>
 8003980:	4649      	mov	r1, r9
 8003982:	4638      	mov	r0, r7
 8003984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003988:	47c0      	blx	r8
 800398a:	3001      	adds	r0, #1
 800398c:	d023      	beq.n	80039d6 <_printf_common+0xae>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	6922      	ldr	r2, [r4, #16]
 8003992:	f003 0306 	and.w	r3, r3, #6
 8003996:	2b04      	cmp	r3, #4
 8003998:	bf14      	ite	ne
 800399a:	2500      	movne	r5, #0
 800399c:	6833      	ldreq	r3, [r6, #0]
 800399e:	f04f 0600 	mov.w	r6, #0
 80039a2:	bf08      	it	eq
 80039a4:	68e5      	ldreq	r5, [r4, #12]
 80039a6:	f104 041a 	add.w	r4, r4, #26
 80039aa:	bf08      	it	eq
 80039ac:	1aed      	subeq	r5, r5, r3
 80039ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039b2:	bf08      	it	eq
 80039b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bfc4      	itt	gt
 80039bc:	1a9b      	subgt	r3, r3, r2
 80039be:	18ed      	addgt	r5, r5, r3
 80039c0:	42b5      	cmp	r5, r6
 80039c2:	d11a      	bne.n	80039fa <_printf_common+0xd2>
 80039c4:	2000      	movs	r0, #0
 80039c6:	e008      	b.n	80039da <_printf_common+0xb2>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4652      	mov	r2, sl
 80039cc:	4649      	mov	r1, r9
 80039ce:	4638      	mov	r0, r7
 80039d0:	47c0      	blx	r8
 80039d2:	3001      	adds	r0, #1
 80039d4:	d103      	bne.n	80039de <_printf_common+0xb6>
 80039d6:	f04f 30ff 	mov.w	r0, #4294967295
 80039da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039de:	3501      	adds	r5, #1
 80039e0:	e7c1      	b.n	8003966 <_printf_common+0x3e>
 80039e2:	2030      	movs	r0, #48	; 0x30
 80039e4:	18e1      	adds	r1, r4, r3
 80039e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039f0:	4422      	add	r2, r4
 80039f2:	3302      	adds	r3, #2
 80039f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039f8:	e7c2      	b.n	8003980 <_printf_common+0x58>
 80039fa:	2301      	movs	r3, #1
 80039fc:	4622      	mov	r2, r4
 80039fe:	4649      	mov	r1, r9
 8003a00:	4638      	mov	r0, r7
 8003a02:	47c0      	blx	r8
 8003a04:	3001      	adds	r0, #1
 8003a06:	d0e6      	beq.n	80039d6 <_printf_common+0xae>
 8003a08:	3601      	adds	r6, #1
 8003a0a:	e7d9      	b.n	80039c0 <_printf_common+0x98>

08003a0c <_printf_i>:
 8003a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	7e0f      	ldrb	r7, [r1, #24]
 8003a12:	4691      	mov	r9, r2
 8003a14:	2f78      	cmp	r7, #120	; 0x78
 8003a16:	4680      	mov	r8, r0
 8003a18:	460c      	mov	r4, r1
 8003a1a:	469a      	mov	sl, r3
 8003a1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a22:	d807      	bhi.n	8003a34 <_printf_i+0x28>
 8003a24:	2f62      	cmp	r7, #98	; 0x62
 8003a26:	d80a      	bhi.n	8003a3e <_printf_i+0x32>
 8003a28:	2f00      	cmp	r7, #0
 8003a2a:	f000 80d5 	beq.w	8003bd8 <_printf_i+0x1cc>
 8003a2e:	2f58      	cmp	r7, #88	; 0x58
 8003a30:	f000 80c1 	beq.w	8003bb6 <_printf_i+0x1aa>
 8003a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a3c:	e03a      	b.n	8003ab4 <_printf_i+0xa8>
 8003a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a42:	2b15      	cmp	r3, #21
 8003a44:	d8f6      	bhi.n	8003a34 <_printf_i+0x28>
 8003a46:	a101      	add	r1, pc, #4	; (adr r1, 8003a4c <_printf_i+0x40>)
 8003a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a4c:	08003aa5 	.word	0x08003aa5
 8003a50:	08003ab9 	.word	0x08003ab9
 8003a54:	08003a35 	.word	0x08003a35
 8003a58:	08003a35 	.word	0x08003a35
 8003a5c:	08003a35 	.word	0x08003a35
 8003a60:	08003a35 	.word	0x08003a35
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003a35 	.word	0x08003a35
 8003a6c:	08003a35 	.word	0x08003a35
 8003a70:	08003a35 	.word	0x08003a35
 8003a74:	08003a35 	.word	0x08003a35
 8003a78:	08003bbf 	.word	0x08003bbf
 8003a7c:	08003ae5 	.word	0x08003ae5
 8003a80:	08003b79 	.word	0x08003b79
 8003a84:	08003a35 	.word	0x08003a35
 8003a88:	08003a35 	.word	0x08003a35
 8003a8c:	08003be1 	.word	0x08003be1
 8003a90:	08003a35 	.word	0x08003a35
 8003a94:	08003ae5 	.word	0x08003ae5
 8003a98:	08003a35 	.word	0x08003a35
 8003a9c:	08003a35 	.word	0x08003a35
 8003aa0:	08003b81 	.word	0x08003b81
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	1d1a      	adds	r2, r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	602a      	str	r2, [r5, #0]
 8003aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0a0      	b.n	8003bfa <_printf_i+0x1ee>
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	0607      	lsls	r7, r0, #24
 8003abe:	f103 0104 	add.w	r1, r3, #4
 8003ac2:	6029      	str	r1, [r5, #0]
 8003ac4:	d501      	bpl.n	8003aca <_printf_i+0xbe>
 8003ac6:	681e      	ldr	r6, [r3, #0]
 8003ac8:	e003      	b.n	8003ad2 <_printf_i+0xc6>
 8003aca:	0646      	lsls	r6, r0, #25
 8003acc:	d5fb      	bpl.n	8003ac6 <_printf_i+0xba>
 8003ace:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ad2:	2e00      	cmp	r6, #0
 8003ad4:	da03      	bge.n	8003ade <_printf_i+0xd2>
 8003ad6:	232d      	movs	r3, #45	; 0x2d
 8003ad8:	4276      	negs	r6, r6
 8003ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ade:	230a      	movs	r3, #10
 8003ae0:	4859      	ldr	r0, [pc, #356]	; (8003c48 <_printf_i+0x23c>)
 8003ae2:	e012      	b.n	8003b0a <_printf_i+0xfe>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	6820      	ldr	r0, [r4, #0]
 8003ae8:	1d19      	adds	r1, r3, #4
 8003aea:	6029      	str	r1, [r5, #0]
 8003aec:	0605      	lsls	r5, r0, #24
 8003aee:	d501      	bpl.n	8003af4 <_printf_i+0xe8>
 8003af0:	681e      	ldr	r6, [r3, #0]
 8003af2:	e002      	b.n	8003afa <_printf_i+0xee>
 8003af4:	0641      	lsls	r1, r0, #25
 8003af6:	d5fb      	bpl.n	8003af0 <_printf_i+0xe4>
 8003af8:	881e      	ldrh	r6, [r3, #0]
 8003afa:	2f6f      	cmp	r7, #111	; 0x6f
 8003afc:	bf0c      	ite	eq
 8003afe:	2308      	moveq	r3, #8
 8003b00:	230a      	movne	r3, #10
 8003b02:	4851      	ldr	r0, [pc, #324]	; (8003c48 <_printf_i+0x23c>)
 8003b04:	2100      	movs	r1, #0
 8003b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b0a:	6865      	ldr	r5, [r4, #4]
 8003b0c:	2d00      	cmp	r5, #0
 8003b0e:	bfa8      	it	ge
 8003b10:	6821      	ldrge	r1, [r4, #0]
 8003b12:	60a5      	str	r5, [r4, #8]
 8003b14:	bfa4      	itt	ge
 8003b16:	f021 0104 	bicge.w	r1, r1, #4
 8003b1a:	6021      	strge	r1, [r4, #0]
 8003b1c:	b90e      	cbnz	r6, 8003b22 <_printf_i+0x116>
 8003b1e:	2d00      	cmp	r5, #0
 8003b20:	d04b      	beq.n	8003bba <_printf_i+0x1ae>
 8003b22:	4615      	mov	r5, r2
 8003b24:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b28:	fb03 6711 	mls	r7, r3, r1, r6
 8003b2c:	5dc7      	ldrb	r7, [r0, r7]
 8003b2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b32:	4637      	mov	r7, r6
 8003b34:	42bb      	cmp	r3, r7
 8003b36:	460e      	mov	r6, r1
 8003b38:	d9f4      	bls.n	8003b24 <_printf_i+0x118>
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d10b      	bne.n	8003b56 <_printf_i+0x14a>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	07de      	lsls	r6, r3, #31
 8003b42:	d508      	bpl.n	8003b56 <_printf_i+0x14a>
 8003b44:	6923      	ldr	r3, [r4, #16]
 8003b46:	6861      	ldr	r1, [r4, #4]
 8003b48:	4299      	cmp	r1, r3
 8003b4a:	bfde      	ittt	le
 8003b4c:	2330      	movle	r3, #48	; 0x30
 8003b4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b56:	1b52      	subs	r2, r2, r5
 8003b58:	6122      	str	r2, [r4, #16]
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4640      	mov	r0, r8
 8003b60:	f8cd a000 	str.w	sl, [sp]
 8003b64:	aa03      	add	r2, sp, #12
 8003b66:	f7ff fedf 	bl	8003928 <_printf_common>
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d14a      	bne.n	8003c04 <_printf_i+0x1f8>
 8003b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b72:	b004      	add	sp, #16
 8003b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	2778      	movs	r7, #120	; 0x78
 8003b82:	4832      	ldr	r0, [pc, #200]	; (8003c4c <_printf_i+0x240>)
 8003b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	6829      	ldr	r1, [r5, #0]
 8003b8c:	061f      	lsls	r7, r3, #24
 8003b8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b92:	d402      	bmi.n	8003b9a <_printf_i+0x18e>
 8003b94:	065f      	lsls	r7, r3, #25
 8003b96:	bf48      	it	mi
 8003b98:	b2b6      	uxthmi	r6, r6
 8003b9a:	07df      	lsls	r7, r3, #31
 8003b9c:	bf48      	it	mi
 8003b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8003ba2:	6029      	str	r1, [r5, #0]
 8003ba4:	bf48      	it	mi
 8003ba6:	6023      	strmi	r3, [r4, #0]
 8003ba8:	b91e      	cbnz	r6, 8003bb2 <_printf_i+0x1a6>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	f023 0320 	bic.w	r3, r3, #32
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	2310      	movs	r3, #16
 8003bb4:	e7a6      	b.n	8003b04 <_printf_i+0xf8>
 8003bb6:	4824      	ldr	r0, [pc, #144]	; (8003c48 <_printf_i+0x23c>)
 8003bb8:	e7e4      	b.n	8003b84 <_printf_i+0x178>
 8003bba:	4615      	mov	r5, r2
 8003bbc:	e7bd      	b.n	8003b3a <_printf_i+0x12e>
 8003bbe:	682b      	ldr	r3, [r5, #0]
 8003bc0:	6826      	ldr	r6, [r4, #0]
 8003bc2:	1d18      	adds	r0, r3, #4
 8003bc4:	6961      	ldr	r1, [r4, #20]
 8003bc6:	6028      	str	r0, [r5, #0]
 8003bc8:	0635      	lsls	r5, r6, #24
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	d501      	bpl.n	8003bd2 <_printf_i+0x1c6>
 8003bce:	6019      	str	r1, [r3, #0]
 8003bd0:	e002      	b.n	8003bd8 <_printf_i+0x1cc>
 8003bd2:	0670      	lsls	r0, r6, #25
 8003bd4:	d5fb      	bpl.n	8003bce <_printf_i+0x1c2>
 8003bd6:	8019      	strh	r1, [r3, #0]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	4615      	mov	r5, r2
 8003bdc:	6123      	str	r3, [r4, #16]
 8003bde:	e7bc      	b.n	8003b5a <_printf_i+0x14e>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	2100      	movs	r1, #0
 8003be4:	1d1a      	adds	r2, r3, #4
 8003be6:	602a      	str	r2, [r5, #0]
 8003be8:	681d      	ldr	r5, [r3, #0]
 8003bea:	6862      	ldr	r2, [r4, #4]
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 f859 	bl	8003ca4 <memchr>
 8003bf2:	b108      	cbz	r0, 8003bf8 <_printf_i+0x1ec>
 8003bf4:	1b40      	subs	r0, r0, r5
 8003bf6:	6060      	str	r0, [r4, #4]
 8003bf8:	6863      	ldr	r3, [r4, #4]
 8003bfa:	6123      	str	r3, [r4, #16]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c02:	e7aa      	b.n	8003b5a <_printf_i+0x14e>
 8003c04:	462a      	mov	r2, r5
 8003c06:	4649      	mov	r1, r9
 8003c08:	4640      	mov	r0, r8
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	47d0      	blx	sl
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d0ad      	beq.n	8003b6e <_printf_i+0x162>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	079b      	lsls	r3, r3, #30
 8003c16:	d413      	bmi.n	8003c40 <_printf_i+0x234>
 8003c18:	68e0      	ldr	r0, [r4, #12]
 8003c1a:	9b03      	ldr	r3, [sp, #12]
 8003c1c:	4298      	cmp	r0, r3
 8003c1e:	bfb8      	it	lt
 8003c20:	4618      	movlt	r0, r3
 8003c22:	e7a6      	b.n	8003b72 <_printf_i+0x166>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4632      	mov	r2, r6
 8003c28:	4649      	mov	r1, r9
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	47d0      	blx	sl
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d09d      	beq.n	8003b6e <_printf_i+0x162>
 8003c32:	3501      	adds	r5, #1
 8003c34:	68e3      	ldr	r3, [r4, #12]
 8003c36:	9903      	ldr	r1, [sp, #12]
 8003c38:	1a5b      	subs	r3, r3, r1
 8003c3a:	42ab      	cmp	r3, r5
 8003c3c:	dcf2      	bgt.n	8003c24 <_printf_i+0x218>
 8003c3e:	e7eb      	b.n	8003c18 <_printf_i+0x20c>
 8003c40:	2500      	movs	r5, #0
 8003c42:	f104 0619 	add.w	r6, r4, #25
 8003c46:	e7f5      	b.n	8003c34 <_printf_i+0x228>
 8003c48:	08003df3 	.word	0x08003df3
 8003c4c:	08003e04 	.word	0x08003e04

08003c50 <memmove>:
 8003c50:	4288      	cmp	r0, r1
 8003c52:	b510      	push	{r4, lr}
 8003c54:	eb01 0402 	add.w	r4, r1, r2
 8003c58:	d902      	bls.n	8003c60 <memmove+0x10>
 8003c5a:	4284      	cmp	r4, r0
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	d807      	bhi.n	8003c70 <memmove+0x20>
 8003c60:	1e43      	subs	r3, r0, #1
 8003c62:	42a1      	cmp	r1, r4
 8003c64:	d008      	beq.n	8003c78 <memmove+0x28>
 8003c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c6e:	e7f8      	b.n	8003c62 <memmove+0x12>
 8003c70:	4601      	mov	r1, r0
 8003c72:	4402      	add	r2, r0
 8003c74:	428a      	cmp	r2, r1
 8003c76:	d100      	bne.n	8003c7a <memmove+0x2a>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c82:	e7f7      	b.n	8003c74 <memmove+0x24>

08003c84 <_sbrk_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	2300      	movs	r3, #0
 8003c88:	4d05      	ldr	r5, [pc, #20]	; (8003ca0 <_sbrk_r+0x1c>)
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	f7fd f874 	bl	8000d7c <_sbrk>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d102      	bne.n	8003c9e <_sbrk_r+0x1a>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	b103      	cbz	r3, 8003c9e <_sbrk_r+0x1a>
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	2000034c 	.word	0x2000034c

08003ca4 <memchr>:
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	b2c9      	uxtb	r1, r1
 8003caa:	4402      	add	r2, r0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	d101      	bne.n	8003cb6 <memchr+0x12>
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e003      	b.n	8003cbe <memchr+0x1a>
 8003cb6:	7804      	ldrb	r4, [r0, #0]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	428c      	cmp	r4, r1
 8003cbc:	d1f6      	bne.n	8003cac <memchr+0x8>
 8003cbe:	bd10      	pop	{r4, pc}

08003cc0 <memcpy>:
 8003cc0:	440a      	add	r2, r1
 8003cc2:	4291      	cmp	r1, r2
 8003cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cc8:	d100      	bne.n	8003ccc <memcpy+0xc>
 8003cca:	4770      	bx	lr
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cd2:	4291      	cmp	r1, r2
 8003cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cd8:	d1f9      	bne.n	8003cce <memcpy+0xe>
 8003cda:	bd10      	pop	{r4, pc}

08003cdc <_realloc_r>:
 8003cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce0:	4680      	mov	r8, r0
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	b921      	cbnz	r1, 8003cf2 <_realloc_r+0x16>
 8003ce8:	4611      	mov	r1, r2
 8003cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cee:	f7ff bc37 	b.w	8003560 <_malloc_r>
 8003cf2:	b92a      	cbnz	r2, 8003d00 <_realloc_r+0x24>
 8003cf4:	f7ff fbcc 	bl	8003490 <_free_r>
 8003cf8:	4625      	mov	r5, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d00:	f000 f81b 	bl	8003d3a <_malloc_usable_size_r>
 8003d04:	4284      	cmp	r4, r0
 8003d06:	4607      	mov	r7, r0
 8003d08:	d802      	bhi.n	8003d10 <_realloc_r+0x34>
 8003d0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d0e:	d812      	bhi.n	8003d36 <_realloc_r+0x5a>
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fc24 	bl	8003560 <_malloc_r>
 8003d18:	4605      	mov	r5, r0
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d0ed      	beq.n	8003cfa <_realloc_r+0x1e>
 8003d1e:	42bc      	cmp	r4, r7
 8003d20:	4622      	mov	r2, r4
 8003d22:	4631      	mov	r1, r6
 8003d24:	bf28      	it	cs
 8003d26:	463a      	movcs	r2, r7
 8003d28:	f7ff ffca 	bl	8003cc0 <memcpy>
 8003d2c:	4631      	mov	r1, r6
 8003d2e:	4640      	mov	r0, r8
 8003d30:	f7ff fbae 	bl	8003490 <_free_r>
 8003d34:	e7e1      	b.n	8003cfa <_realloc_r+0x1e>
 8003d36:	4635      	mov	r5, r6
 8003d38:	e7df      	b.n	8003cfa <_realloc_r+0x1e>

08003d3a <_malloc_usable_size_r>:
 8003d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3e:	1f18      	subs	r0, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bfbc      	itt	lt
 8003d44:	580b      	ldrlt	r3, [r1, r0]
 8003d46:	18c0      	addlt	r0, r0, r3
 8003d48:	4770      	bx	lr
	...

08003d4c <_init>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	bf00      	nop
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr

08003d58 <_fini>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr
