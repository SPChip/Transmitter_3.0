
Transmitter_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004144  08004144  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004144  08004144  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004144  08004144  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800414c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000064  080041b0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080041b0  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000104b7  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024aa  00000000  00000000  00030587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00032a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0e  00000000  00000000  00033ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018117  00000000  00000000  000347be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140a6  00000000  00000000  0004c8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009026b  00000000  00000000  0006097b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b48  00000000  00000000  000f0be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f5730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004078 	.word	0x08004078

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004078 	.word	0x08004078

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	b0bd      	sub	sp, #244	; 0xf4
 8000150:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe27 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fa1f 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fbd7 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 fbb7 	bl	80008d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000162:	f000 fb8b 	bl	800087c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000166:	f000 fb35 	bl	80007d4 <MX_TIM3_Init>
  MX_ADC1_Init();
 800016a:	f000 fa71 	bl	8000650 <MX_ADC1_Init>
  MX_I2C1_Init();
 800016e:	f000 fb03 	bl	8000778 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_SET_COUNTER(&htim3, encoders_start_counter);
 8000172:	4b81      	ldr	r3, [pc, #516]	; (8000378 <main+0x22c>)
 8000174:	881a      	ldrh	r2, [r3, #0]
 8000176:	4b81      	ldr	r3, [pc, #516]	; (800037c <main+0x230>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800017c:	213c      	movs	r1, #60	; 0x3c
 800017e:	487f      	ldr	r0, [pc, #508]	; (800037c <main+0x230>)
 8000180:	f002 ff86 	bl	8003090 <HAL_TIM_Encoder_Start>
//	__HAL_TIM_SET_COUNTER(&htim4, encoders_start_counter);
//	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);

	HAL_ADCEx_Calibration_Start(&hadc1);//калибровка ADC
 8000184:	487e      	ldr	r0, [pc, #504]	; (8000380 <main+0x234>)
 8000186:	f001 fa3b 	bl	8001600 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 7);
 800018a:	2207      	movs	r2, #7
 800018c:	497d      	ldr	r1, [pc, #500]	; (8000384 <main+0x238>)
 800018e:	487c      	ldr	r0, [pc, #496]	; (8000380 <main+0x234>)
 8000190:	f000 ff42 	bl	8001018 <HAL_ADC_Start_DMA>


	uint8_t message[100] = { '\0' };
 8000194:	2300      	movs	r3, #0
 8000196:	637b      	str	r3, [r7, #52]	; 0x34
 8000198:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800019c:	2260      	movs	r2, #96	; 0x60
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f003 fad7 	bl	8003754 <memset>
	transmit_data[4] = 127;
 80001a6:	4b78      	ldr	r3, [pc, #480]	; (8000388 <main+0x23c>)
 80001a8:	227f      	movs	r2, #127	; 0x7f
 80001aa:	711a      	strb	r2, [r3, #4]
	transmit_data[5] = 127;
 80001ac:	4b76      	ldr	r3, [pc, #472]	; (8000388 <main+0x23c>)
 80001ae:	227f      	movs	r2, #127	; 0x7f
 80001b0:	715a      	strb	r2, [r3, #5]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//обработка энкодера 1
		encoder_1_cur_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80001b2:	4b72      	ldr	r3, [pc, #456]	; (800037c <main+0x230>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001b8:	b29a      	uxth	r2, r3
 80001ba:	4b74      	ldr	r3, [pc, #464]	; (800038c <main+0x240>)
 80001bc:	801a      	strh	r2, [r3, #0]
		if (encoder_1_cur_counter != encoder_1_prev_counter) {
 80001be:	4b73      	ldr	r3, [pc, #460]	; (800038c <main+0x240>)
 80001c0:	881a      	ldrh	r2, [r3, #0]
 80001c2:	4b73      	ldr	r3, [pc, #460]	; (8000390 <main+0x244>)
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	d026      	beq.n	8000218 <main+0xcc>
			if (encoder_1_cur_counter > encoder_1_prev_counter) {
 80001ca:	4b70      	ldr	r3, [pc, #448]	; (800038c <main+0x240>)
 80001cc:	881a      	ldrh	r2, [r3, #0]
 80001ce:	4b70      	ldr	r3, [pc, #448]	; (8000390 <main+0x244>)
 80001d0:	881b      	ldrh	r3, [r3, #0]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d90e      	bls.n	80001f4 <main+0xa8>
				if (transmit_data[4] > 251) {
 80001d6:	4b6c      	ldr	r3, [pc, #432]	; (8000388 <main+0x23c>)
 80001d8:	791b      	ldrb	r3, [r3, #4]
 80001da:	2bfb      	cmp	r3, #251	; 0xfb
 80001dc:	d903      	bls.n	80001e6 <main+0x9a>
					transmit_data[4] = 255;
 80001de:	4b6a      	ldr	r3, [pc, #424]	; (8000388 <main+0x23c>)
 80001e0:	22ff      	movs	r2, #255	; 0xff
 80001e2:	711a      	strb	r2, [r3, #4]
 80001e4:	e014      	b.n	8000210 <main+0xc4>
				} else {
					transmit_data[4] += 2;
 80001e6:	4b68      	ldr	r3, [pc, #416]	; (8000388 <main+0x23c>)
 80001e8:	791b      	ldrb	r3, [r3, #4]
 80001ea:	3302      	adds	r3, #2
 80001ec:	b2da      	uxtb	r2, r3
 80001ee:	4b66      	ldr	r3, [pc, #408]	; (8000388 <main+0x23c>)
 80001f0:	711a      	strb	r2, [r3, #4]
 80001f2:	e00d      	b.n	8000210 <main+0xc4>
				}
			} else {
				if (transmit_data[4] < 4) {
 80001f4:	4b64      	ldr	r3, [pc, #400]	; (8000388 <main+0x23c>)
 80001f6:	791b      	ldrb	r3, [r3, #4]
 80001f8:	2b03      	cmp	r3, #3
 80001fa:	d803      	bhi.n	8000204 <main+0xb8>
					transmit_data[4] = 0;
 80001fc:	4b62      	ldr	r3, [pc, #392]	; (8000388 <main+0x23c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	711a      	strb	r2, [r3, #4]
 8000202:	e005      	b.n	8000210 <main+0xc4>
				} else {
					transmit_data[4] -= 2;
 8000204:	4b60      	ldr	r3, [pc, #384]	; (8000388 <main+0x23c>)
 8000206:	791b      	ldrb	r3, [r3, #4]
 8000208:	3b02      	subs	r3, #2
 800020a:	b2da      	uxtb	r2, r3
 800020c:	4b5e      	ldr	r3, [pc, #376]	; (8000388 <main+0x23c>)
 800020e:	711a      	strb	r2, [r3, #4]
				}
			}
			encoder_1_prev_counter = encoder_1_cur_counter;
 8000210:	4b5e      	ldr	r3, [pc, #376]	; (800038c <main+0x240>)
 8000212:	881a      	ldrh	r2, [r3, #0]
 8000214:	4b5e      	ldr	r3, [pc, #376]	; (8000390 <main+0x244>)
 8000216:	801a      	strh	r2, [r3, #0]
			}
			encoder_2_encoder_1_prev_counter = encoder_2_encoder_1_cur_counter;
		}
*/
		//обработка кнопки энкодера 1
		if (HAL_GPIO_ReadPin(ENCODER_1_KEY_GPIO_Port, ENCODER_1_KEY_Pin)) {
 8000218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800021c:	485d      	ldr	r0, [pc, #372]	; (8000394 <main+0x248>)
 800021e:	f001 ff1d 	bl	800205c <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d002      	beq.n	800022e <main+0xe2>
			encoder_1_key_flag = 1;
 8000228:	4b5b      	ldr	r3, [pc, #364]	; (8000398 <main+0x24c>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
		}
		if (encoder_1_key_flag) {
 800022e:	4b5a      	ldr	r3, [pc, #360]	; (8000398 <main+0x24c>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d056      	beq.n	80002e4 <main+0x198>
			uint32_t ms = HAL_GetTick();
 8000236:	f000 fe0d 	bl	8000e54 <HAL_GetTick>
 800023a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			uint8_t key1_state = HAL_GPIO_ReadPin(ENCODER_1_KEY_GPIO_Port, ENCODER_1_KEY_Pin);
 800023e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000242:	4854      	ldr	r0, [pc, #336]	; (8000394 <main+0x248>)
 8000244:	f001 ff0a 	bl	800205c <HAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			if (key1_state == 0 && !encoder_1_key_short_state && (ms - encoder_1_key_time) > 50) {
 800024e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000252:	2b00      	cmp	r3, #0
 8000254:	d115      	bne.n	8000282 <main+0x136>
 8000256:	4b51      	ldr	r3, [pc, #324]	; (800039c <main+0x250>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d111      	bne.n	8000282 <main+0x136>
 800025e:	4b50      	ldr	r3, [pc, #320]	; (80003a0 <main+0x254>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	2b32      	cmp	r3, #50	; 0x32
 800026a:	d90a      	bls.n	8000282 <main+0x136>
				encoder_1_key_short_state = 1;
 800026c:	4b4b      	ldr	r3, [pc, #300]	; (800039c <main+0x250>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
				encoder_1_key_long_state = 0;
 8000272:	4b4c      	ldr	r3, [pc, #304]	; (80003a4 <main+0x258>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
				encoder_1_key_time = ms;
 8000278:	4a49      	ldr	r2, [pc, #292]	; (80003a0 <main+0x254>)
 800027a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800027e:	6013      	str	r3, [r2, #0]
 8000280:	e030      	b.n	80002e4 <main+0x198>
			} else if (key1_state == 0 && !encoder_1_key_long_state
 8000282:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000286:	2b00      	cmp	r3, #0
 8000288:	d10f      	bne.n	80002aa <main+0x15e>
 800028a:	4b46      	ldr	r3, [pc, #280]	; (80003a4 <main+0x258>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d10b      	bne.n	80002aa <main+0x15e>
					&& (ms - encoder_1_key_time) > 2000) {
 8000292:	4b43      	ldr	r3, [pc, #268]	; (80003a0 <main+0x254>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800029a:	1ad3      	subs	r3, r2, r3
 800029c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002a0:	d903      	bls.n	80002aa <main+0x15e>
				encoder_1_key_long_state = 1;
 80002a2:	4b40      	ldr	r3, [pc, #256]	; (80003a4 <main+0x258>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	e01c      	b.n	80002e4 <main+0x198>

			} else if (key1_state == 1 && encoder_1_key_short_state
 80002aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d118      	bne.n	80002e4 <main+0x198>
 80002b2:	4b3a      	ldr	r3, [pc, #232]	; (800039c <main+0x250>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d014      	beq.n	80002e4 <main+0x198>
					&& (ms - encoder_1_key_time) > 50) {
 80002ba:	4b39      	ldr	r3, [pc, #228]	; (80003a0 <main+0x254>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	2b32      	cmp	r3, #50	; 0x32
 80002c6:	d90d      	bls.n	80002e4 <main+0x198>
				encoder_1_key_short_state = 0;
 80002c8:	4b34      	ldr	r3, [pc, #208]	; (800039c <main+0x250>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
				encoder_1_key_time = ms;
 80002ce:	4a34      	ldr	r2, [pc, #208]	; (80003a0 <main+0x254>)
 80002d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80002d4:	6013      	str	r3, [r2, #0]
				if (!encoder_1_key_long_state) {
 80002d6:	4b33      	ldr	r3, [pc, #204]	; (80003a4 <main+0x258>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d102      	bne.n	80002e4 <main+0x198>

					transmit_data[4] = 127;
 80002de:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <main+0x23c>)
 80002e0:	227f      	movs	r2, #127	; 0x7f
 80002e2:	711a      	strb	r2, [r3, #4]
				}
			}
		}

		//обработка кнопки энкодера 2
		if (HAL_GPIO_ReadPin(ENCODER_2_KEY_GPIO_Port, ENCODER_2_KEY_Pin)) {
 80002e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e8:	482a      	ldr	r0, [pc, #168]	; (8000394 <main+0x248>)
 80002ea:	f001 feb7 	bl	800205c <HAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d002      	beq.n	80002fa <main+0x1ae>
			encoder_2_key_flag = 1;
 80002f4:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <main+0x25c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
		}
		if (encoder_2_key_flag) {
 80002fa:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <main+0x25c>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d077      	beq.n	80003f2 <main+0x2a6>
			uint32_t ms_2 = HAL_GetTick();
 8000302:	f000 fda7 	bl	8000e54 <HAL_GetTick>
 8000306:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			uint8_t key2_state = HAL_GPIO_ReadPin(ENCODER_2_KEY_GPIO_Port, ENCODER_2_KEY_Pin);
 800030a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030e:	4821      	ldr	r0, [pc, #132]	; (8000394 <main+0x248>)
 8000310:	f001 fea4 	bl	800205c <HAL_GPIO_ReadPin>
 8000314:	4603      	mov	r3, r0
 8000316:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			if (key2_state == 0 && !encoder_2_key_encoder_1_key_short_state && (ms_2 - encoder_2_key_time) > 50) {
 800031a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800031e:	2b00      	cmp	r3, #0
 8000320:	d115      	bne.n	800034e <main+0x202>
 8000322:	4b22      	ldr	r3, [pc, #136]	; (80003ac <main+0x260>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d111      	bne.n	800034e <main+0x202>
 800032a:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <main+0x264>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	2b32      	cmp	r3, #50	; 0x32
 8000336:	d90a      	bls.n	800034e <main+0x202>
				encoder_2_key_encoder_1_key_short_state = 1;
 8000338:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <main+0x260>)
 800033a:	2201      	movs	r2, #1
 800033c:	701a      	strb	r2, [r3, #0]
				encoder_2_key_encoder_1_key_long_state = 0;
 800033e:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <main+0x268>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
				encoder_2_key_time = ms_2;
 8000344:	4a1a      	ldr	r2, [pc, #104]	; (80003b0 <main+0x264>)
 8000346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800034a:	6013      	str	r3, [r2, #0]
 800034c:	e051      	b.n	80003f2 <main+0x2a6>
			} else if (key2_state == 0 && !encoder_2_key_encoder_1_key_long_state
 800034e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000352:	2b00      	cmp	r3, #0
 8000354:	d130      	bne.n	80003b8 <main+0x26c>
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <main+0x268>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d12c      	bne.n	80003b8 <main+0x26c>
					&& (ms_2 - encoder_2_key_time) > 2000) {
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <main+0x264>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800036c:	d924      	bls.n	80003b8 <main+0x26c>
				encoder_2_key_encoder_1_key_long_state = 1;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <main+0x268>)
 8000370:	2201      	movs	r2, #1
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	e03d      	b.n	80003f2 <main+0x2a6>
 8000376:	bf00      	nop
 8000378:	20000000 	.word	0x20000000
 800037c:	20000148 	.word	0x20000148
 8000380:	20000080 	.word	0x20000080
 8000384:	200001ec 	.word	0x200001ec
 8000388:	200001fc 	.word	0x200001fc
 800038c:	200001ea 	.word	0x200001ea
 8000390:	20000002 	.word	0x20000002
 8000394:	40010c00 	.word	0x40010c00
 8000398:	200001d8 	.word	0x200001d8
 800039c:	200001e0 	.word	0x200001e0
 80003a0:	200001dc 	.word	0x200001dc
 80003a4:	200001e1 	.word	0x200001e1
 80003a8:	200001e2 	.word	0x200001e2
 80003ac:	200001e8 	.word	0x200001e8
 80003b0:	200001e4 	.word	0x200001e4
 80003b4:	200001e9 	.word	0x200001e9

			} else if (key2_state == 1 && encoder_2_key_encoder_1_key_short_state
 80003b8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d118      	bne.n	80003f2 <main+0x2a6>
 80003c0:	4b6a      	ldr	r3, [pc, #424]	; (800056c <main+0x420>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d014      	beq.n	80003f2 <main+0x2a6>
					&& (ms_2 - encoder_2_key_time) > 50) {
 80003c8:	4b69      	ldr	r3, [pc, #420]	; (8000570 <main+0x424>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	2b32      	cmp	r3, #50	; 0x32
 80003d4:	d90d      	bls.n	80003f2 <main+0x2a6>
				encoder_2_key_encoder_1_key_short_state = 0;
 80003d6:	4b65      	ldr	r3, [pc, #404]	; (800056c <main+0x420>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
				encoder_2_key_time = ms_2;
 80003dc:	4a64      	ldr	r2, [pc, #400]	; (8000570 <main+0x424>)
 80003de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80003e2:	6013      	str	r3, [r2, #0]
				if (!encoder_2_key_encoder_1_key_long_state) {
 80003e4:	4b63      	ldr	r3, [pc, #396]	; (8000574 <main+0x428>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <main+0x2a6>

					transmit_data[5] = 127;
 80003ec:	4b62      	ldr	r3, [pc, #392]	; (8000578 <main+0x42c>)
 80003ee:	227f      	movs	r2, #127	; 0x7f
 80003f0:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		//обработка потенциометров
		transmit_data[0]=adcData[2]*255/4095;
 80003f2:	4b62      	ldr	r3, [pc, #392]	; (800057c <main+0x430>)
 80003f4:	889b      	ldrh	r3, [r3, #4]
 80003f6:	461a      	mov	r2, r3
 80003f8:	4613      	mov	r3, r2
 80003fa:	021b      	lsls	r3, r3, #8
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	4a60      	ldr	r2, [pc, #384]	; (8000580 <main+0x434>)
 8000400:	fb82 1203 	smull	r1, r2, r2, r3
 8000404:	441a      	add	r2, r3
 8000406:	12d2      	asrs	r2, r2, #11
 8000408:	17db      	asrs	r3, r3, #31
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b5a      	ldr	r3, [pc, #360]	; (8000578 <main+0x42c>)
 8000410:	701a      	strb	r2, [r3, #0]
		transmit_data[1]=adcData[3]*255/4095;
 8000412:	4b5a      	ldr	r3, [pc, #360]	; (800057c <main+0x430>)
 8000414:	88db      	ldrh	r3, [r3, #6]
 8000416:	461a      	mov	r2, r3
 8000418:	4613      	mov	r3, r2
 800041a:	021b      	lsls	r3, r3, #8
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	4a58      	ldr	r2, [pc, #352]	; (8000580 <main+0x434>)
 8000420:	fb82 1203 	smull	r1, r2, r2, r3
 8000424:	441a      	add	r2, r3
 8000426:	12d2      	asrs	r2, r2, #11
 8000428:	17db      	asrs	r3, r3, #31
 800042a:	1ad3      	subs	r3, r2, r3
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4b52      	ldr	r3, [pc, #328]	; (8000578 <main+0x42c>)
 8000430:	705a      	strb	r2, [r3, #1]
		transmit_data[2]=adcData[4]*255/4095;
 8000432:	4b52      	ldr	r3, [pc, #328]	; (800057c <main+0x430>)
 8000434:	891b      	ldrh	r3, [r3, #8]
 8000436:	461a      	mov	r2, r3
 8000438:	4613      	mov	r3, r2
 800043a:	021b      	lsls	r3, r3, #8
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	4a50      	ldr	r2, [pc, #320]	; (8000580 <main+0x434>)
 8000440:	fb82 1203 	smull	r1, r2, r2, r3
 8000444:	441a      	add	r2, r3
 8000446:	12d2      	asrs	r2, r2, #11
 8000448:	17db      	asrs	r3, r3, #31
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b4a      	ldr	r3, [pc, #296]	; (8000578 <main+0x42c>)
 8000450:	709a      	strb	r2, [r3, #2]
		transmit_data[3]=adcData[5]*255/4095;
 8000452:	4b4a      	ldr	r3, [pc, #296]	; (800057c <main+0x430>)
 8000454:	895b      	ldrh	r3, [r3, #10]
 8000456:	461a      	mov	r2, r3
 8000458:	4613      	mov	r3, r2
 800045a:	021b      	lsls	r3, r3, #8
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	4a48      	ldr	r2, [pc, #288]	; (8000580 <main+0x434>)
 8000460:	fb82 1203 	smull	r1, r2, r2, r3
 8000464:	441a      	add	r2, r3
 8000466:	12d2      	asrs	r2, r2, #11
 8000468:	17db      	asrs	r3, r3, #31
 800046a:	1ad3      	subs	r3, r2, r3
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b42      	ldr	r3, [pc, #264]	; (8000578 <main+0x42c>)
 8000470:	70da      	strb	r2, [r3, #3]
		//(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

		//запрос в расширитель портов pcf8575

		HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_ADDRESS << 1), &regAddress, 1);
 8000472:	2301      	movs	r3, #1
 8000474:	4a43      	ldr	r2, [pc, #268]	; (8000584 <main+0x438>)
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	4843      	ldr	r0, [pc, #268]	; (8000588 <main+0x43c>)
 800047a:	f001 ff4b 	bl	8002314 <HAL_I2C_Master_Transmit_IT>



		//отправка данных в uart
		if (HAL_GetTick() - tx_time > 100) { //каждые 100 мс
 800047e:	f000 fce9 	bl	8000e54 <HAL_GetTick>
 8000482:	4602      	mov	r2, r0
 8000484:	4b41      	ldr	r3, [pc, #260]	; (800058c <main+0x440>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	2b64      	cmp	r3, #100	; 0x64
 800048c:	f67f ae91 	bls.w	80001b2 <main+0x66>
			sprintf(message,
					"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n\r",
					transmit_data[0], transmit_data[1], transmit_data[2],
 8000490:	4b39      	ldr	r3, [pc, #228]	; (8000578 <main+0x42c>)
 8000492:	781b      	ldrb	r3, [r3, #0]
			sprintf(message,
 8000494:	469c      	mov	ip, r3
					transmit_data[0], transmit_data[1], transmit_data[2],
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <main+0x42c>)
 8000498:	785b      	ldrb	r3, [r3, #1]
			sprintf(message,
 800049a:	469e      	mov	lr, r3
					transmit_data[0], transmit_data[1], transmit_data[2],
 800049c:	4b36      	ldr	r3, [pc, #216]	; (8000578 <main+0x42c>)
 800049e:	789b      	ldrb	r3, [r3, #2]
			sprintf(message,
 80004a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					transmit_data[3], transmit_data[4], transmit_data[5],
 80004a2:	4b35      	ldr	r3, [pc, #212]	; (8000578 <main+0x42c>)
 80004a4:	78db      	ldrb	r3, [r3, #3]
			sprintf(message,
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28
					transmit_data[3], transmit_data[4], transmit_data[5],
 80004a8:	4b33      	ldr	r3, [pc, #204]	; (8000578 <main+0x42c>)
 80004aa:	791b      	ldrb	r3, [r3, #4]
			sprintf(message,
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
					transmit_data[3], transmit_data[4], transmit_data[5],
 80004ae:	4b32      	ldr	r3, [pc, #200]	; (8000578 <main+0x42c>)
 80004b0:	795b      	ldrb	r3, [r3, #5]
			sprintf(message,
 80004b2:	623b      	str	r3, [r7, #32]
					transmit_data[6], transmit_data[7], transmit_data[8],
 80004b4:	4b30      	ldr	r3, [pc, #192]	; (8000578 <main+0x42c>)
 80004b6:	799b      	ldrb	r3, [r3, #6]
			sprintf(message,
 80004b8:	61fb      	str	r3, [r7, #28]
					transmit_data[6], transmit_data[7], transmit_data[8],
 80004ba:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <main+0x42c>)
 80004bc:	79db      	ldrb	r3, [r3, #7]
			sprintf(message,
 80004be:	61bb      	str	r3, [r7, #24]
					transmit_data[6], transmit_data[7], transmit_data[8],
 80004c0:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <main+0x42c>)
 80004c2:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(message,
 80004c4:	617b      	str	r3, [r7, #20]
					transmit_data[9], transmit_data[10], transmit_data[11],
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <main+0x42c>)
 80004c8:	7a5b      	ldrb	r3, [r3, #9]
			sprintf(message,
 80004ca:	613b      	str	r3, [r7, #16]
					transmit_data[9], transmit_data[10], transmit_data[11],
 80004cc:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <main+0x42c>)
 80004ce:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(message,
 80004d0:	60fb      	str	r3, [r7, #12]
					transmit_data[9], transmit_data[10], transmit_data[11],
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <main+0x42c>)
 80004d4:	7adb      	ldrb	r3, [r3, #11]
			sprintf(message,
 80004d6:	60bb      	str	r3, [r7, #8]
					transmit_data[12], transmit_data[13], transmit_data[14],
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <main+0x42c>)
 80004da:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(message,
 80004dc:	607b      	str	r3, [r7, #4]
					transmit_data[12], transmit_data[13], transmit_data[14],
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <main+0x42c>)
 80004e0:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(message,
 80004e2:	603b      	str	r3, [r7, #0]
					transmit_data[12], transmit_data[13], transmit_data[14],
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <main+0x42c>)
 80004e6:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(message,
 80004e8:	461e      	mov	r6, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <main+0x42c>)
 80004ec:	7bdb      	ldrb	r3, [r3, #15]
			sprintf(message,
 80004ee:	461d      	mov	r5, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <main+0x42c>)
 80004f2:	7c1b      	ldrb	r3, [r3, #16]
			sprintf(message,
 80004f4:	461c      	mov	r4, r3
					transmit_data[15], transmit_data[16], transmit_data[17],
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <main+0x42c>)
 80004f8:	7c5b      	ldrb	r3, [r3, #17]
			sprintf(message,
 80004fa:	4619      	mov	r1, r3
					transmit_data[18], transmit_data[19]);
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <main+0x42c>)
 80004fe:	7c9b      	ldrb	r3, [r3, #18]
			sprintf(message,
 8000500:	461a      	mov	r2, r3
					transmit_data[18], transmit_data[19]);
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <main+0x42c>)
 8000504:	7cdb      	ldrb	r3, [r3, #19]
			sprintf(message,
 8000506:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800050a:	9311      	str	r3, [sp, #68]	; 0x44
 800050c:	9210      	str	r2, [sp, #64]	; 0x40
 800050e:	910f      	str	r1, [sp, #60]	; 0x3c
 8000510:	940e      	str	r4, [sp, #56]	; 0x38
 8000512:	950d      	str	r5, [sp, #52]	; 0x34
 8000514:	960c      	str	r6, [sp, #48]	; 0x30
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	920b      	str	r2, [sp, #44]	; 0x2c
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	920a      	str	r2, [sp, #40]	; 0x28
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	9209      	str	r2, [sp, #36]	; 0x24
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	9208      	str	r2, [sp, #32]
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	9207      	str	r2, [sp, #28]
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	9206      	str	r2, [sp, #24]
 800052e:	69ba      	ldr	r2, [r7, #24]
 8000530:	9205      	str	r2, [sp, #20]
 8000532:	69fa      	ldr	r2, [r7, #28]
 8000534:	9204      	str	r2, [sp, #16]
 8000536:	6a3a      	ldr	r2, [r7, #32]
 8000538:	9203      	str	r2, [sp, #12]
 800053a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800053c:	9202      	str	r2, [sp, #8]
 800053e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000540:	9201      	str	r2, [sp, #4]
 8000542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	4673      	mov	r3, lr
 8000548:	4662      	mov	r2, ip
 800054a:	4911      	ldr	r1, [pc, #68]	; (8000590 <main+0x444>)
 800054c:	f003 f8e2 	bl	8003714 <siprintf>
			HAL_UART_Transmit(&huart1, message, sizeof(message), 200);
 8000550:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000554:	23c8      	movs	r3, #200	; 0xc8
 8000556:	2264      	movs	r2, #100	; 0x64
 8000558:	480e      	ldr	r0, [pc, #56]	; (8000594 <main+0x448>)
 800055a:	f002 ff5b 	bl	8003414 <HAL_UART_Transmit>
			tx_time = HAL_GetTick();
 800055e:	f000 fc79 	bl	8000e54 <HAL_GetTick>
 8000562:	4603      	mov	r3, r0
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <main+0x440>)
 8000566:	6013      	str	r3, [r2, #0]
		encoder_1_cur_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000568:	e623      	b.n	80001b2 <main+0x66>
 800056a:	bf00      	nop
 800056c:	200001e8 	.word	0x200001e8
 8000570:	200001e4 	.word	0x200001e4
 8000574:	200001e9 	.word	0x200001e9
 8000578:	200001fc 	.word	0x200001fc
 800057c:	200001ec 	.word	0x200001ec
 8000580:	80080081 	.word	0x80080081
 8000584:	20000004 	.word	0x20000004
 8000588:	200000f4 	.word	0x200000f4
 800058c:	20000210 	.word	0x20000210
 8000590:	08004090 	.word	0x08004090
 8000594:	20000190 	.word	0x20000190

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a2:	2228      	movs	r2, #40	; 0x28
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 f8d4 	bl	8003754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 ff30 	bl	8002454 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005fa:	f000 f9d7 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f99c 	bl	8002958 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000626:	f000 f9c1 	bl	80009ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800062a:	2302      	movs	r3, #2
 800062c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800062e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000632:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fb1c 	bl	8002c74 <HAL_RCCEx_PeriphCLKConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000642:	f000 f9b3 	bl	80009ac <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <MX_ADC1_Init+0x120>)
 8000662:	4a44      	ldr	r2, [pc, #272]	; (8000774 <MX_ADC1_Init+0x124>)
 8000664:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000666:	4b42      	ldr	r3, [pc, #264]	; (8000770 <MX_ADC1_Init+0x120>)
 8000668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800066e:	4b40      	ldr	r3, [pc, #256]	; (8000770 <MX_ADC1_Init+0x120>)
 8000670:	2201      	movs	r2, #1
 8000672:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000674:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <MX_ADC1_Init+0x120>)
 8000676:	2200      	movs	r2, #0
 8000678:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067a:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <MX_ADC1_Init+0x120>)
 800067c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <MX_ADC1_Init+0x120>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <MX_ADC1_Init+0x120>)
 800068a:	2207      	movs	r2, #7
 800068c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068e:	4838      	ldr	r0, [pc, #224]	; (8000770 <MX_ADC1_Init+0x120>)
 8000690:	f000 fbea 	bl	8000e68 <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800069a:	f000 f987 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800069e:	2311      	movs	r3, #17
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006a6:	2307      	movs	r3, #7
 80006a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4830      	ldr	r0, [pc, #192]	; (8000770 <MX_ADC1_Init+0x120>)
 80006b0:	f000 fdac 	bl	800120c <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f977 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4829      	ldr	r0, [pc, #164]	; (8000770 <MX_ADC1_Init+0x120>)
 80006cc:	f000 fd9e 	bl	800120c <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80006d6:	f000 f969 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006da:	2301      	movs	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006de:	2303      	movs	r3, #3
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4822      	ldr	r0, [pc, #136]	; (8000770 <MX_ADC1_Init+0x120>)
 80006e8:	f000 fd90 	bl	800120c <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80006f2:	f000 f95b 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	481b      	ldr	r0, [pc, #108]	; (8000770 <MX_ADC1_Init+0x120>)
 8000704:	f000 fd82 	bl	800120c <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800070e:	f000 f94d 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000712:	2303      	movs	r3, #3
 8000714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000716:	2305      	movs	r3, #5
 8000718:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4814      	ldr	r0, [pc, #80]	; (8000770 <MX_ADC1_Init+0x120>)
 8000720:	f000 fd74 	bl	800120c <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800072a:	f000 f93f 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800072e:	2304      	movs	r3, #4
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000732:	2306      	movs	r3, #6
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_ADC1_Init+0x120>)
 800073c:	f000 fd66 	bl	800120c <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000746:	f000 f931 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800074a:	2305      	movs	r3, #5
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800074e:	2307      	movs	r3, #7
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_ADC1_Init+0x120>)
 8000758:	f000 fd58 	bl	800120c <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000762:	f000 f923 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000080 	.word	0x20000080
 8000774:	40012400 	.word	0x40012400

08000778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2C1_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000784:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x58>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007b6:	f001 fc69 	bl	800208c <HAL_I2C_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f8f4 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000f4 	.word	0x200000f4
 80007cc:	40005400 	.word	0x40005400
 80007d0:	000186a0 	.word	0x000186a0

080007d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2224      	movs	r2, #36	; 0x24
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 ffb6 	bl	8003754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_TIM3_Init+0xa0>)
 80007f2:	4a21      	ldr	r2, [pc, #132]	; (8000878 <MX_TIM3_Init+0xa4>)
 80007f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_TIM3_Init+0xa0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_TIM3_Init+0xa0>)
 80007fe:	2220      	movs	r2, #32
 8000800:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_TIM3_Init+0xa0>)
 8000804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000808:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_TIM3_Init+0xa0>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_TIM3_Init+0xa0>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000816:	2303      	movs	r3, #3
 8000818:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800081e:	2301      	movs	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800082e:	2301      	movs	r3, #1
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000836:	230a      	movs	r3, #10
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_TIM3_Init+0xa0>)
 8000842:	f002 fb83 	bl	8002f4c <HAL_TIM_Encoder_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800084c:	f000 f8ae 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_TIM3_Init+0xa0>)
 800085e:	f002 fd2b 	bl	80032b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000868:	f000 f8a0 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3730      	adds	r7, #48	; 0x30
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000148 	.word	0x20000148
 8000878:	40000400 	.word	0x40000400

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART1_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f002 fd5e 	bl	8003374 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f875 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000190 	.word	0x20000190
 80008cc:	40013800 	.word	0x40013800

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_DMA_Init+0x38>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <MX_DMA_Init+0x38>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_DMA_Init+0x38>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	200b      	movs	r0, #11
 80008f4:	f001 f809 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f8:	200b      	movs	r0, #11
 80008fa:	f001 f822 	bl	8001942 <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_GPIO_Init+0x98>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0310 	and.w	r3, r3, #16
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_GPIO_Init+0x98>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <MX_GPIO_Init+0x98>)
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0320 	and.w	r3, r3, #32
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_GPIO_Init+0x98>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_GPIO_Init+0x98>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <MX_GPIO_Init+0x98>)
 800096e:	f043 0308 	orr.w	r3, r3, #8
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : ENCODER_1_KEY_Pin ENCODER_2_KEY_Pin */
  GPIO_InitStruct.Pin = ENCODER_1_KEY_Pin|ENCODER_2_KEY_Pin;
 8000980:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	4619      	mov	r1, r3
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000996:	f001 f9dd 	bl	8001d54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010c00 	.word	0x40010c00

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <HAL_MspInit+0x5c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x5c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_MspInit+0x60>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_MspInit+0x60>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000

08000a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <HAL_ADC_MspInit+0xbc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d149      	bne.n	8000ad0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a26      	ldr	r2, [pc, #152]	; (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a20      	ldr	r2, [pc, #128]	; (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a6c:	233f      	movs	r3, #63	; 0x3f
 8000a6e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a70:	2303      	movs	r3, #3
 8000a72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <HAL_ADC_MspInit+0xc4>)
 8000a7c:	f001 f96a 	bl	8001d54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_ADC_MspInit+0xcc>)
 8000a84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000aaa:	2220      	movs	r2, #32
 8000aac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000ab6:	f000 ff5f 	bl	8001978 <HAL_DMA_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ac0:	f7ff ff74 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000ac8:	621a      	str	r2, [r3, #32]
 8000aca:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40012400 	.word	0x40012400
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	200000b0 	.word	0x200000b0
 8000ae8:	40020008 	.word	0x40020008

08000aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <HAL_I2C_MspInit+0x70>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d123      	bne.n	8000b54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b24:	23c0      	movs	r3, #192	; 0xc0
 8000b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4619      	mov	r1, r3
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <HAL_I2C_MspInit+0x78>)
 8000b38:	f001 f90c 	bl	8001d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b46:	61d3      	str	r3, [r2, #28]
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d123      	bne.n	8000bd0 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_TIM_Encoder_MspInit+0x74>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_TIM_Encoder_MspInit+0x74>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	61d3      	str	r3, [r2, #28]
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_TIM_Encoder_MspInit+0x74>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_TIM_Encoder_MspInit+0x74>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_TIM_Encoder_MspInit+0x74>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_TIM_Encoder_MspInit+0x74>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb8:	23c0      	movs	r3, #192	; 0xc0
 8000bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_TIM_Encoder_MspInit+0x78>)
 8000bcc:	f001 f8c2 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40000400 	.word	0x40000400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d131      	bne.n	8000c68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c4a:	f001 f883 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c64:	f001 f876 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 f8b5 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA1_Channel1_IRQHandler+0x10>)
 8000cd2:	f000 ff0b 	bl	8001aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000b0 	.word	0x200000b0

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f002 fd28 	bl	8003764 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20005000 	.word	0x20005000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000214 	.word	0x20000214
 8000d48:	20000368 	.word	0x20000368

08000d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d58:	f7ff fff8 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d5e:	490c      	ldr	r1, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d74:	4c09      	ldr	r4, [pc, #36]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f002 fcf5 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff f9e1 	bl	800014c <main>
  bx lr
 8000d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d94:	0800414c 	.word	0x0800414c
  ldr r2, =_sbss
 8000d98:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d9c:	20000364 	.word	0x20000364

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x28>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 fd9d 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fdfa 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fdb5 	bl	800195e <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 fd7d 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000010 	.word	0x20000010
 8000e2c:	2000000c 	.word	0x2000000c

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x20>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	20000218 	.word	0x20000218

08000e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_GetTick+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000218 	.word	0x20000218

08000e68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e0be      	b.n	8001008 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d109      	bne.n	8000eac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fdb8 	bl	8000a1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 faff 	bl	80014b0 <ADC_ConversionStop_Disable>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8099 	bne.w	8000ff6 <HAL_ADC_Init+0x18e>
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 8095 	bne.w	8000ff6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ed4:	f023 0302 	bic.w	r3, r3, #2
 8000ed8:	f043 0202 	orr.w	r2, r3, #2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7b1b      	ldrb	r3, [r3, #12]
 8000eee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ef0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f00:	d003      	beq.n	8000f0a <HAL_ADC_Init+0xa2>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d102      	bne.n	8000f10 <HAL_ADC_Init+0xa8>
 8000f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0e:	e000      	b.n	8000f12 <HAL_ADC_Init+0xaa>
 8000f10:	2300      	movs	r3, #0
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7d1b      	ldrb	r3, [r3, #20]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d119      	bne.n	8000f54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7b1b      	ldrb	r3, [r3, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d109      	bne.n	8000f3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	035a      	lsls	r2, r3, #13
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	e00b      	b.n	8000f54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f043 0220 	orr.w	r2, r3, #32
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	f043 0201 	orr.w	r2, r3, #1
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_ADC_Init+0x1a8>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f84:	d003      	beq.n	8000f8e <HAL_ADC_Init+0x126>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d104      	bne.n	8000f98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	051b      	lsls	r3, r3, #20
 8000f96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_ADC_Init+0x1ac>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d10b      	bne.n	8000fd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f023 0303 	bic.w	r3, r3, #3
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fd2:	e018      	b.n	8001006 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f023 0312 	bic.w	r3, r3, #18
 8000fdc:	f043 0210 	orr.w	r2, r3, #16
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	f043 0201 	orr.w	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff4:	e007      	b.n	8001006 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	f043 0210 	orr.w	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001006:	7dfb      	ldrb	r3, [r7, #23]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	ffe1f7fd 	.word	0xffe1f7fd
 8001014:	ff1f0efe 	.word	0xff1f0efe

08001018 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a64      	ldr	r2, [pc, #400]	; (80011c0 <HAL_ADC_Start_DMA+0x1a8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d004      	beq.n	800103c <HAL_ADC_Start_DMA+0x24>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a63      	ldr	r2, [pc, #396]	; (80011c4 <HAL_ADC_Start_DMA+0x1ac>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d106      	bne.n	800104a <HAL_ADC_Start_DMA+0x32>
 800103c:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <HAL_ADC_Start_DMA+0x1a8>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f040 80b3 	bne.w	80011b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <HAL_ADC_Start_DMA+0x40>
 8001054:	2302      	movs	r3, #2
 8001056:	e0ae      	b.n	80011b6 <HAL_ADC_Start_DMA+0x19e>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f9cb 	bl	80013fc <ADC_Enable>
 8001066:	4603      	mov	r3, r0
 8001068:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f040 809a 	bne.w	80011a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a4e      	ldr	r2, [pc, #312]	; (80011c4 <HAL_ADC_Start_DMA+0x1ac>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d105      	bne.n	800109c <HAL_ADC_Start_DMA+0x84>
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d115      	bne.n	80010c8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d026      	beq.n	8001104 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c6:	e01d      	b.n	8001104 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <HAL_ADC_Start_DMA+0x1a8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d004      	beq.n	80010e8 <HAL_ADC_Start_DMA+0xd0>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <HAL_ADC_Start_DMA+0x1ac>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d10d      	bne.n	8001104 <HAL_ADC_Start_DMA+0xec>
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <HAL_ADC_Start_DMA+0x1a8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	f023 0206 	bic.w	r2, r3, #6
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
 800111c:	e002      	b.n	8001124 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <HAL_ADC_Start_DMA+0x1b0>)
 8001132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4a24      	ldr	r2, [pc, #144]	; (80011cc <HAL_ADC_Start_DMA+0x1b4>)
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4a23      	ldr	r2, [pc, #140]	; (80011d0 <HAL_ADC_Start_DMA+0x1b8>)
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f06f 0202 	mvn.w	r2, #2
 800114c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800115c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a18      	ldr	r0, [r3, #32]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	334c      	adds	r3, #76	; 0x4c
 8001168:	4619      	mov	r1, r3
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f000 fc5d 	bl	8001a2c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800117c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001180:	d108      	bne.n	8001194 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001190:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001192:	e00f      	b.n	80011b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80011a4:	e006      	b.n	80011b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80011ae:	e001      	b.n	80011b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012400 	.word	0x40012400
 80011c4:	40012800 	.word	0x40012800
 80011c8:	08001533 	.word	0x08001533
 80011cc:	080015af 	.word	0x080015af
 80011d0:	080015cb 	.word	0x080015cb

080011d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_ADC_ConfigChannel+0x20>
 8001228:	2302      	movs	r3, #2
 800122a:	e0dc      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x1da>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b06      	cmp	r3, #6
 800123a:	d81c      	bhi.n	8001276 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3b05      	subs	r3, #5
 800124e:	221f      	movs	r2, #31
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	4019      	ands	r1, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	3b05      	subs	r3, #5
 8001268:	fa00 f203 	lsl.w	r2, r0, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	635a      	str	r2, [r3, #52]	; 0x34
 8001274:	e03c      	b.n	80012f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b0c      	cmp	r3, #12
 800127c:	d81c      	bhi.n	80012b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b23      	subs	r3, #35	; 0x23
 8001290:	221f      	movs	r2, #31
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	4019      	ands	r1, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	3b23      	subs	r3, #35	; 0x23
 80012aa:	fa00 f203 	lsl.w	r2, r0, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
 80012b6:	e01b      	b.n	80012f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b41      	subs	r3, #65	; 0x41
 80012ca:	221f      	movs	r2, #31
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4019      	ands	r1, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3b41      	subs	r3, #65	; 0x41
 80012e4:	fa00 f203 	lsl.w	r2, r0, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	d91c      	bls.n	8001332 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68d9      	ldr	r1, [r3, #12]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	3b1e      	subs	r3, #30
 800130a:	2207      	movs	r2, #7
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	4019      	ands	r1, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6898      	ldr	r0, [r3, #8]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	3b1e      	subs	r3, #30
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	e019      	b.n	8001366 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6919      	ldr	r1, [r3, #16]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	2207      	movs	r2, #7
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	4019      	ands	r1, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6898      	ldr	r0, [r3, #8]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	fa00 f203 	lsl.w	r2, r0, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b10      	cmp	r3, #16
 800136c:	d003      	beq.n	8001376 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001372:	2b11      	cmp	r3, #17
 8001374:	d132      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d125      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d126      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800139c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d11a      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9a      	lsrs	r2, r3, #18
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013bc:	e002      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f9      	bne.n	80013be <HAL_ADC_ConfigChannel+0x1b2>
 80013ca:	e007      	b.n	80013dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f043 0220 	orr.w	r2, r3, #32
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40012400 	.word	0x40012400
 80013f4:	20000008 	.word	0x20000008
 80013f8:	431bde83 	.word	0x431bde83

080013fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d040      	beq.n	800149c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <ADC_Enable+0xac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <ADC_Enable+0xb0>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9b      	lsrs	r3, r3, #18
 8001436:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001438:	e002      	b.n	8001440 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001446:	f7ff fd05 	bl	8000e54 <HAL_GetTick>
 800144a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800144c:	e01f      	b.n	800148e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800144e:	f7ff fd01 	bl	8000e54 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d918      	bls.n	800148e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b01      	cmp	r3, #1
 8001468:	d011      	beq.n	800148e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	f043 0210 	orr.w	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e007      	b.n	800149e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	d1d8      	bne.n	800144e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008
 80014ac:	431bde83 	.word	0x431bde83

080014b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d12e      	bne.n	8001528 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014da:	f7ff fcbb 	bl	8000e54 <HAL_GetTick>
 80014de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014e0:	e01b      	b.n	800151a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014e2:	f7ff fcb7 	bl	8000e54 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d914      	bls.n	800151a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10d      	bne.n	800151a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f043 0210 	orr.w	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e007      	b.n	800152a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d0dc      	beq.n	80014e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001548:	2b00      	cmp	r3, #0
 800154a:	d127      	bne.n	800159c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001562:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001566:	d115      	bne.n	8001594 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800156c:	2b00      	cmp	r3, #0
 800156e:	d111      	bne.n	8001594 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d105      	bne.n	8001594 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f7ff fe1d 	bl	80011d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800159a:	e004      	b.n	80015a6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff fe12 	bl	80011e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	f043 0204 	orr.w	r2, r3, #4
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f7ff fe01 	bl	80011f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_ADCEx_Calibration_Start+0x1e>
 800161a:	2302      	movs	r3, #2
 800161c:	e097      	b.n	800174e <HAL_ADCEx_Calibration_Start+0x14e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff42 	bl	80014b0 <ADC_ConversionStop_Disable>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fee3 	bl	80013fc <ADC_Enable>
 8001636:	4603      	mov	r3, r0
 8001638:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f040 8081 	bne.w	8001744 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800164a:	f023 0302 	bic.w	r3, r3, #2
 800164e:	f043 0202 	orr.w	r2, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001656:	4b40      	ldr	r3, [pc, #256]	; (8001758 <HAL_ADCEx_Calibration_Start+0x158>)
 8001658:	681c      	ldr	r4, [r3, #0]
 800165a:	2002      	movs	r0, #2
 800165c:	f001 fbc0 	bl	8002de0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001660:	4603      	mov	r3, r0
 8001662:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001666:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001668:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800166a:	e002      	b.n	8001672 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3b01      	subs	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f9      	bne.n	800166c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0208 	orr.w	r2, r2, #8
 8001686:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001688:	f7ff fbe4 	bl	8000e54 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800168e:	e01b      	b.n	80016c8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001690:	f7ff fbe0 	bl	8000e54 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b0a      	cmp	r3, #10
 800169c:	d914      	bls.n	80016c8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00d      	beq.n	80016c8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f023 0312 	bic.w	r3, r3, #18
 80016b4:	f043 0210 	orr.w	r2, r3, #16
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e042      	b.n	800174e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1dc      	bne.n	8001690 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0204 	orr.w	r2, r2, #4
 80016e4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016e6:	f7ff fbb5 	bl	8000e54 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016ec:	e01b      	b.n	8001726 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016ee:	f7ff fbb1 	bl	8000e54 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b0a      	cmp	r3, #10
 80016fa:	d914      	bls.n	8001726 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00d      	beq.n	8001726 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	f023 0312 	bic.w	r3, r3, #18
 8001712:	f043 0210 	orr.w	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e013      	b.n	800174e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1dc      	bne.n	80016ee <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	f023 0303 	bic.w	r3, r3, #3
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800174c:	7dfb      	ldrb	r3, [r7, #23]
}
 800174e:	4618      	mov	r0, r3
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4906      	ldr	r1, [pc, #24]	; (80017f4 <__NVIC_EnableIRQ+0x34>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff90 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff2d 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff42 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff90 	bl	800184c <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5f 	bl	80017f8 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff35 	bl	80017c0 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e043      	b.n	8001a16 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_DMA_Init+0xa8>)
 8001996:	4413      	add	r3, r2
 8001998:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <HAL_DMA_Init+0xac>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	009a      	lsls	r2, r3, #2
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <HAL_DMA_Init+0xb0>)
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	bffdfff8 	.word	0xbffdfff8
 8001a24:	cccccccd 	.word	0xcccccccd
 8001a28:	40020000 	.word	0x40020000

08001a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_DMA_Start_IT+0x20>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e04b      	b.n	8001ae4 <HAL_DMA_Start_IT+0xb8>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d13a      	bne.n	8001ad6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f937 	bl	8001cf8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 020e 	orr.w	r2, r2, #14
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e00f      	b.n	8001ac4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 020a 	orr.w	r2, r2, #10
 8001ac2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e005      	b.n	8001ae2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	2204      	movs	r2, #4
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d04f      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0xc8>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d04a      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0204 	bic.w	r2, r2, #4
 8001b3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <HAL_DMA_IRQHandler+0x1f0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d029      	beq.n	8001b9a <HAL_DMA_IRQHandler+0xae>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <HAL_DMA_IRQHandler+0x1f4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d022      	beq.n	8001b96 <HAL_DMA_IRQHandler+0xaa>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a63      	ldr	r2, [pc, #396]	; (8001ce4 <HAL_DMA_IRQHandler+0x1f8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01a      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xa4>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a62      	ldr	r2, [pc, #392]	; (8001ce8 <HAL_DMA_IRQHandler+0x1fc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d012      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x9e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a60      	ldr	r2, [pc, #384]	; (8001cec <HAL_DMA_IRQHandler+0x200>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00a      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x98>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5f      	ldr	r2, [pc, #380]	; (8001cf0 <HAL_DMA_IRQHandler+0x204>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d102      	bne.n	8001b7e <HAL_DMA_IRQHandler+0x92>
 8001b78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7c:	e00e      	b.n	8001b9c <HAL_DMA_IRQHandler+0xb0>
 8001b7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b82:	e00b      	b.n	8001b9c <HAL_DMA_IRQHandler+0xb0>
 8001b84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b88:	e008      	b.n	8001b9c <HAL_DMA_IRQHandler+0xb0>
 8001b8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b8e:	e005      	b.n	8001b9c <HAL_DMA_IRQHandler+0xb0>
 8001b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b94:	e002      	b.n	8001b9c <HAL_DMA_IRQHandler+0xb0>
 8001b96:	2340      	movs	r3, #64	; 0x40
 8001b98:	e000      	b.n	8001b9c <HAL_DMA_IRQHandler+0xb0>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	4a55      	ldr	r2, [pc, #340]	; (8001cf4 <HAL_DMA_IRQHandler+0x208>)
 8001b9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8094 	beq.w	8001cd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb2:	e08e      	b.n	8001cd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	2202      	movs	r2, #2
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d056      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x186>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d051      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10b      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020a 	bic.w	r2, r2, #10
 8001bea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a38      	ldr	r2, [pc, #224]	; (8001cdc <HAL_DMA_IRQHandler+0x1f0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d029      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x166>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a37      	ldr	r2, [pc, #220]	; (8001ce0 <HAL_DMA_IRQHandler+0x1f4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x162>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a35      	ldr	r2, [pc, #212]	; (8001ce4 <HAL_DMA_IRQHandler+0x1f8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01a      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x15c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a34      	ldr	r2, [pc, #208]	; (8001ce8 <HAL_DMA_IRQHandler+0x1fc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d012      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x156>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a32      	ldr	r2, [pc, #200]	; (8001cec <HAL_DMA_IRQHandler+0x200>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00a      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x150>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a31      	ldr	r2, [pc, #196]	; (8001cf0 <HAL_DMA_IRQHandler+0x204>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d102      	bne.n	8001c36 <HAL_DMA_IRQHandler+0x14a>
 8001c30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c34:	e00e      	b.n	8001c54 <HAL_DMA_IRQHandler+0x168>
 8001c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3a:	e00b      	b.n	8001c54 <HAL_DMA_IRQHandler+0x168>
 8001c3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c40:	e008      	b.n	8001c54 <HAL_DMA_IRQHandler+0x168>
 8001c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c46:	e005      	b.n	8001c54 <HAL_DMA_IRQHandler+0x168>
 8001c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4c:	e002      	b.n	8001c54 <HAL_DMA_IRQHandler+0x168>
 8001c4e:	2320      	movs	r3, #32
 8001c50:	e000      	b.n	8001c54 <HAL_DMA_IRQHandler+0x168>
 8001c52:	2302      	movs	r3, #2
 8001c54:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <HAL_DMA_IRQHandler+0x208>)
 8001c56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d034      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c70:	e02f      	b.n	8001cd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2208      	movs	r2, #8
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d028      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x1e8>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d023      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 020e 	bic.w	r2, r2, #14
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
    }
  }
  return;
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
}
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020008 	.word	0x40020008
 8001ce0:	4002001c 	.word	0x4002001c
 8001ce4:	40020030 	.word	0x40020030
 8001ce8:	40020044 	.word	0x40020044
 8001cec:	40020058 	.word	0x40020058
 8001cf0:	4002006c 	.word	0x4002006c
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d108      	bne.n	8001d38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d36:	e007      	b.n	8001d48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b08b      	sub	sp, #44	; 0x2c
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d66:	e169      	b.n	800203c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8158 	bne.w	8002036 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4a9a      	ldr	r2, [pc, #616]	; (8001ff4 <HAL_GPIO_Init+0x2a0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d05e      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001d90:	4a98      	ldr	r2, [pc, #608]	; (8001ff4 <HAL_GPIO_Init+0x2a0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d875      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001d96:	4a98      	ldr	r2, [pc, #608]	; (8001ff8 <HAL_GPIO_Init+0x2a4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d058      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001d9c:	4a96      	ldr	r2, [pc, #600]	; (8001ff8 <HAL_GPIO_Init+0x2a4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d86f      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001da2:	4a96      	ldr	r2, [pc, #600]	; (8001ffc <HAL_GPIO_Init+0x2a8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d052      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001da8:	4a94      	ldr	r2, [pc, #592]	; (8001ffc <HAL_GPIO_Init+0x2a8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d869      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001dae:	4a94      	ldr	r2, [pc, #592]	; (8002000 <HAL_GPIO_Init+0x2ac>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d04c      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001db4:	4a92      	ldr	r2, [pc, #584]	; (8002000 <HAL_GPIO_Init+0x2ac>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d863      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001dba:	4a92      	ldr	r2, [pc, #584]	; (8002004 <HAL_GPIO_Init+0x2b0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d046      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001dc0:	4a90      	ldr	r2, [pc, #576]	; (8002004 <HAL_GPIO_Init+0x2b0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d85d      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001dc6:	2b12      	cmp	r3, #18
 8001dc8:	d82a      	bhi.n	8001e20 <HAL_GPIO_Init+0xcc>
 8001dca:	2b12      	cmp	r3, #18
 8001dcc:	d859      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001dce:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <HAL_GPIO_Init+0x80>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001e4f 	.word	0x08001e4f
 8001dd8:	08001e29 	.word	0x08001e29
 8001ddc:	08001e3b 	.word	0x08001e3b
 8001de0:	08001e7d 	.word	0x08001e7d
 8001de4:	08001e83 	.word	0x08001e83
 8001de8:	08001e83 	.word	0x08001e83
 8001dec:	08001e83 	.word	0x08001e83
 8001df0:	08001e83 	.word	0x08001e83
 8001df4:	08001e83 	.word	0x08001e83
 8001df8:	08001e83 	.word	0x08001e83
 8001dfc:	08001e83 	.word	0x08001e83
 8001e00:	08001e83 	.word	0x08001e83
 8001e04:	08001e83 	.word	0x08001e83
 8001e08:	08001e83 	.word	0x08001e83
 8001e0c:	08001e83 	.word	0x08001e83
 8001e10:	08001e83 	.word	0x08001e83
 8001e14:	08001e83 	.word	0x08001e83
 8001e18:	08001e31 	.word	0x08001e31
 8001e1c:	08001e45 	.word	0x08001e45
 8001e20:	4a79      	ldr	r2, [pc, #484]	; (8002008 <HAL_GPIO_Init+0x2b4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e26:	e02c      	b.n	8001e82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e029      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	3304      	adds	r3, #4
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	e024      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	3308      	adds	r3, #8
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e01f      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	330c      	adds	r3, #12
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e01a      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e56:	2304      	movs	r3, #4
 8001e58:	623b      	str	r3, [r7, #32]
          break;
 8001e5a:	e013      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e64:	2308      	movs	r3, #8
 8001e66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	611a      	str	r2, [r3, #16]
          break;
 8001e6e:	e009      	b.n	8001e84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e70:	2308      	movs	r3, #8
 8001e72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	615a      	str	r2, [r3, #20]
          break;
 8001e7a:	e003      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          break;
 8001e82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d801      	bhi.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	e001      	b.n	8001e92 <HAL_GPIO_Init+0x13e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2bff      	cmp	r3, #255	; 0xff
 8001e98:	d802      	bhi.n	8001ea0 <HAL_GPIO_Init+0x14c>
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x152>
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	3b08      	subs	r3, #8
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	210f      	movs	r1, #15
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	6a39      	ldr	r1, [r7, #32]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80b1 	beq.w	8002036 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_GPIO_Init+0x2b8>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_GPIO_Init+0x2b8>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_GPIO_Init+0x2b8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eec:	4a48      	ldr	r2, [pc, #288]	; (8002010 <HAL_GPIO_Init+0x2bc>)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a40      	ldr	r2, [pc, #256]	; (8002014 <HAL_GPIO_Init+0x2c0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_GPIO_Init+0x1ec>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <HAL_GPIO_Init+0x2c4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00d      	beq.n	8001f3c <HAL_GPIO_Init+0x1e8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3e      	ldr	r2, [pc, #248]	; (800201c <HAL_GPIO_Init+0x2c8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <HAL_GPIO_Init+0x1e4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <HAL_GPIO_Init+0x2cc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_GPIO_Init+0x1e0>
 8001f30:	2303      	movs	r3, #3
 8001f32:	e006      	b.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f34:	2304      	movs	r3, #4
 8001f36:	e004      	b.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f40:	2300      	movs	r3, #0
 8001f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f44:	f002 0203 	and.w	r2, r2, #3
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	4093      	lsls	r3, r2
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f52:	492f      	ldr	r1, [pc, #188]	; (8002010 <HAL_GPIO_Init+0x2bc>)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	492c      	ldr	r1, [pc, #176]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4928      	ldr	r1, [pc, #160]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4922      	ldr	r1, [pc, #136]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	491e      	ldr	r1, [pc, #120]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4918      	ldr	r1, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4914      	ldr	r1, [pc, #80]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d021      	beq.n	8002028 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e021      	b.n	8002036 <HAL_GPIO_Init+0x2e2>
 8001ff2:	bf00      	nop
 8001ff4:	10320000 	.word	0x10320000
 8001ff8:	10310000 	.word	0x10310000
 8001ffc:	10220000 	.word	0x10220000
 8002000:	10210000 	.word	0x10210000
 8002004:	10120000 	.word	0x10120000
 8002008:	10110000 	.word	0x10110000
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	40010800 	.word	0x40010800
 8002018:	40010c00 	.word	0x40010c00
 800201c:	40011000 	.word	0x40011000
 8002020:	40011400 	.word	0x40011400
 8002024:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_GPIO_Init+0x304>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	43db      	mvns	r3, r3
 8002030:	4909      	ldr	r1, [pc, #36]	; (8002058 <HAL_GPIO_Init+0x304>)
 8002032:	4013      	ands	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	3301      	adds	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	f47f ae8e 	bne.w	8001d68 <HAL_GPIO_Init+0x14>
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	372c      	adds	r7, #44	; 0x2c
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e12b      	b.n	80022f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fd1a 	bl	8000aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	; 0x24
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f0:	f000 fd7a 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 80020f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a81      	ldr	r2, [pc, #516]	; (8002300 <HAL_I2C_Init+0x274>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d807      	bhi.n	8002110 <HAL_I2C_Init+0x84>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a80      	ldr	r2, [pc, #512]	; (8002304 <HAL_I2C_Init+0x278>)
 8002104:	4293      	cmp	r3, r2
 8002106:	bf94      	ite	ls
 8002108:	2301      	movls	r3, #1
 800210a:	2300      	movhi	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e006      	b.n	800211e <HAL_I2C_Init+0x92>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a7d      	ldr	r2, [pc, #500]	; (8002308 <HAL_I2C_Init+0x27c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	bf94      	ite	ls
 8002118:	2301      	movls	r3, #1
 800211a:	2300      	movhi	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0e7      	b.n	80022f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a78      	ldr	r2, [pc, #480]	; (800230c <HAL_I2C_Init+0x280>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9b      	lsrs	r3, r3, #18
 8002130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_I2C_Init+0x274>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d802      	bhi.n	8002160 <HAL_I2C_Init+0xd4>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3301      	adds	r3, #1
 800215e:	e009      	b.n	8002174 <HAL_I2C_Init+0xe8>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	4a69      	ldr	r2, [pc, #420]	; (8002310 <HAL_I2C_Init+0x284>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	3301      	adds	r3, #1
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	495c      	ldr	r1, [pc, #368]	; (8002300 <HAL_I2C_Init+0x274>)
 8002190:	428b      	cmp	r3, r1
 8002192:	d819      	bhi.n	80021c8 <HAL_I2C_Init+0x13c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e59      	subs	r1, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a2:	1c59      	adds	r1, r3, #1
 80021a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021a8:	400b      	ands	r3, r1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_I2C_Init+0x138>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e59      	subs	r1, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c2:	e051      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e04f      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d111      	bne.n	80021f4 <HAL_I2C_Init+0x168>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e012      	b.n	800221a <HAL_I2C_Init+0x18e>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e58      	subs	r0, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	0099      	lsls	r1, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	fbb0 f3f3 	udiv	r3, r0, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Init+0x196>
 800221e:	2301      	movs	r3, #1
 8002220:	e022      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <HAL_I2C_Init+0x1bc>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1e58      	subs	r0, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	440b      	add	r3, r1
 8002238:	fbb0 f3f3 	udiv	r3, r0, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002246:	e00f      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	0099      	lsls	r1, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	6809      	ldr	r1, [r1, #0]
 800226c:	4313      	orrs	r3, r2
 800226e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6911      	ldr	r1, [r2, #16]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68d2      	ldr	r2, [r2, #12]
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	000186a0 	.word	0x000186a0
 8002304:	001e847f 	.word	0x001e847f
 8002308:	003d08ff 	.word	0x003d08ff
 800230c:	431bde83 	.word	0x431bde83
 8002310:	10624dd3 	.word	0x10624dd3

08002314 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	460b      	mov	r3, r1
 8002322:	817b      	strh	r3, [r7, #10]
 8002324:	4613      	mov	r3, r2
 8002326:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b20      	cmp	r3, #32
 8002336:	f040 8081 	bne.w	800243c <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800233a:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_I2C_Master_Transmit_IT+0x134>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	08db      	lsrs	r3, r3, #3
 8002340:	4a42      	ldr	r2, [pc, #264]	; (800244c <HAL_I2C_Master_Transmit_IT+0x138>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a1a      	lsrs	r2, r3, #8
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009a      	lsls	r2, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3b01      	subs	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d112      	bne.n	8002386 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f043 0220 	orr.w	r2, r3, #32
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8002382:	2302      	movs	r3, #2
 8002384:	e05b      	b.n	800243e <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d0df      	beq.n	8002354 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_I2C_Master_Transmit_IT+0x8e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e04d      	b.n	800243e <HAL_I2C_Master_Transmit_IT+0x12a>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d007      	beq.n	80023c8 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2221      	movs	r2, #33	; 0x21
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2210      	movs	r2, #16
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	893a      	ldrh	r2, [r7, #8]
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800240a:	897a      	ldrh	r2, [r7, #10]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002426:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002436:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000008 	.word	0x20000008
 800244c:	14f8b589 	.word	0x14f8b589
 8002450:	ffff0000 	.word	0xffff0000

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e272      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8087 	beq.w	8002582 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002474:	4b92      	ldr	r3, [pc, #584]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b04      	cmp	r3, #4
 800247e:	d00c      	beq.n	800249a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002480:	4b8f      	ldr	r3, [pc, #572]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d112      	bne.n	80024b2 <HAL_RCC_OscConfig+0x5e>
 800248c:	4b8c      	ldr	r3, [pc, #560]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d10b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249a:	4b89      	ldr	r3, [pc, #548]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d06c      	beq.n	8002580 <HAL_RCC_OscConfig+0x12c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d168      	bne.n	8002580 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e24c      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x76>
 80024bc:	4b80      	ldr	r3, [pc, #512]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a7f      	ldr	r2, [pc, #508]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e02e      	b.n	8002528 <HAL_RCC_OscConfig+0xd4>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7a      	ldr	r2, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b78      	ldr	r3, [pc, #480]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e01d      	b.n	8002528 <HAL_RCC_OscConfig+0xd4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0xbc>
 80024f6:	4b72      	ldr	r3, [pc, #456]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a71      	ldr	r2, [pc, #452]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6e      	ldr	r2, [pc, #440]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e00b      	b.n	8002528 <HAL_RCC_OscConfig+0xd4>
 8002510:	4b6b      	ldr	r3, [pc, #428]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a6a      	ldr	r2, [pc, #424]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a67      	ldr	r2, [pc, #412]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fc90 	bl	8000e54 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fc8c 	bl	8000e54 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e200      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0xe4>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe fc7c 	bl	8000e54 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe fc78 	bl	8000e54 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1ec      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x10c>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d063      	beq.n	8002656 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258e:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800259a:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d11c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x18c>
 80025a6:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d116      	bne.n	80025e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b2:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_RCC_OscConfig+0x176>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e1c0      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4939      	ldr	r1, [pc, #228]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	e03a      	b.n	8002656 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fc31 	bl	8000e54 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe fc2d 	bl	8000e54 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e1a1      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4927      	ldr	r1, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
 8002628:	e015      	b.n	8002656 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fc10 	bl	8000e54 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002638:	f7fe fc0c 	bl	8000e54 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e180      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d03a      	beq.n	80026d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d019      	beq.n	800269e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002670:	f7fe fbf0 	bl	8000e54 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7fe fbec 	bl	8000e54 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e160      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002696:	2001      	movs	r0, #1
 8002698:	f000 face 	bl	8002c38 <RCC_Delay>
 800269c:	e01c      	b.n	80026d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a4:	f7fe fbd6 	bl	8000e54 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026aa:	e00f      	b.n	80026cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fbd2 	bl	8000e54 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d908      	bls.n	80026cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e146      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	42420000 	.word	0x42420000
 80026c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b92      	ldr	r3, [pc, #584]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e9      	bne.n	80026ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a6 	beq.w	8002832 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b8b      	ldr	r3, [pc, #556]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b88      	ldr	r3, [pc, #544]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4a87      	ldr	r2, [pc, #540]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	61d3      	str	r3, [r2, #28]
 8002702:	4b85      	ldr	r3, [pc, #532]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b82      	ldr	r3, [pc, #520]	; (800291c <HAL_RCC_OscConfig+0x4c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d118      	bne.n	8002750 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4b7f      	ldr	r3, [pc, #508]	; (800291c <HAL_RCC_OscConfig+0x4c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7e      	ldr	r2, [pc, #504]	; (800291c <HAL_RCC_OscConfig+0x4c8>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fb93 	bl	8000e54 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fb8f 	bl	8000e54 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e103      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	4b75      	ldr	r3, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x4c8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x312>
 8002758:	4b6f      	ldr	r3, [pc, #444]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a6e      	ldr	r2, [pc, #440]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e02d      	b.n	80027c2 <HAL_RCC_OscConfig+0x36e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x334>
 800276e:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a69      	ldr	r2, [pc, #420]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a66      	ldr	r2, [pc, #408]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	e01c      	b.n	80027c2 <HAL_RCC_OscConfig+0x36e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x356>
 8002790:	4b61      	ldr	r3, [pc, #388]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a60      	ldr	r2, [pc, #384]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	4b5e      	ldr	r3, [pc, #376]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0x36e>
 80027aa:	4b5b      	ldr	r3, [pc, #364]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a5a      	ldr	r2, [pc, #360]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	4b58      	ldr	r3, [pc, #352]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a57      	ldr	r2, [pc, #348]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fb43 	bl	8000e54 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fb3f 	bl	8000e54 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0b1      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ee      	beq.n	80027d2 <HAL_RCC_OscConfig+0x37e>
 80027f4:	e014      	b.n	8002820 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe fb2d 	bl	8000e54 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fb29 	bl	8000e54 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e09b      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	4b40      	ldr	r3, [pc, #256]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ee      	bne.n	80027fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002826:	4b3c      	ldr	r3, [pc, #240]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a3b      	ldr	r2, [pc, #236]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002830:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8087 	beq.w	800294a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d061      	beq.n	800290c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d146      	bne.n	80028de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b33      	ldr	r3, [pc, #204]	; (8002920 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fafd 	bl	8000e54 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe faf9 	bl	8000e54 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e06d      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	d108      	bne.n	8002898 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4921      	ldr	r1, [pc, #132]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a19      	ldr	r1, [r3, #32]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	430b      	orrs	r3, r1
 80028aa:	491b      	ldr	r1, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x4cc>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe facd 	bl	8000e54 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe fac9 	bl	8000e54 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e03d      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x46a>
 80028dc:	e035      	b.n	800294a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x4cc>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fab6 	bl	8000e54 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fab2 	bl	8000e54 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e026      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x498>
 800290a:	e01e      	b.n	800294a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e019      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
 8002920:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x500>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	429a      	cmp	r2, r3
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0d0      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d910      	bls.n	800299c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	4965      	ldr	r1, [pc, #404]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b63      	ldr	r3, [pc, #396]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b8      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029cc:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	494d      	ldr	r1, [pc, #308]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d040      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e073      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e06b      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4936      	ldr	r1, [pc, #216]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fa04 	bl	8000e54 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fa00 	bl	8000e54 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e053      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d210      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 0207 	bic.w	r2, r3, #7
 8002a8e:	4922      	ldr	r1, [pc, #136]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e032      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4916      	ldr	r1, [pc, #88]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490e      	ldr	r1, [pc, #56]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae6:	f000 f821 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	490a      	ldr	r1, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1cc>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1d0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe f962 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40022000 	.word	0x40022000
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	080040d0 	.word	0x080040d0
 8002b24:	20000008 	.word	0x20000008
 8002b28:	2000000c 	.word	0x2000000c

08002b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d002      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x30>
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x36>
 8002b5a:	e027      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b5e:	613b      	str	r3, [r7, #16]
      break;
 8002b60:	e027      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	0c9b      	lsrs	r3, r3, #18
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b6c:	5cd3      	ldrb	r3, [r2, r3]
 8002b6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0c5b      	lsrs	r3, r3, #17
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b8e:	fb03 f202 	mul.w	r2, r3, r2
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e004      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	613b      	str	r3, [r7, #16]
      break;
 8002baa:	e002      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bae:	613b      	str	r3, [r7, #16]
      break;
 8002bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb2:	693b      	ldr	r3, [r7, #16]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	007a1200 	.word	0x007a1200
 8002bc8:	080040e8 	.word	0x080040e8
 8002bcc:	080040f8 	.word	0x080040f8
 8002bd0:	003d0900 	.word	0x003d0900

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	20000008 	.word	0x20000008

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bec:	f7ff fff2 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	080040e0 	.word	0x080040e0

08002c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c14:	f7ff ffde 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	0adb      	lsrs	r3, r3, #11
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	080040e0 	.word	0x080040e0

08002c38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <RCC_Delay+0x34>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <RCC_Delay+0x38>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0a5b      	lsrs	r3, r3, #9
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c54:	bf00      	nop
  }
  while (Delay --);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	60fa      	str	r2, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f9      	bne.n	8002c54 <RCC_Delay+0x1c>
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	20000008 	.word	0x20000008
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d07d      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c94:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	61d3      	str	r3, [r2, #28]
 8002cac:	4b49      	ldr	r3, [pc, #292]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d118      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc8:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a42      	ldr	r2, [pc, #264]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe f8be 	bl	8000e54 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	e008      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cdc:	f7fe f8ba 	bl	8000e54 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e06d      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cfa:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d02e      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d027      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d22:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d28:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d2e:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d014      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f889 	bl	8000e54 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe f885 	bl	8000e54 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e036      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ee      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4917      	ldr	r1, [pc, #92]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	490b      	ldr	r1, [pc, #44]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4904      	ldr	r1, [pc, #16]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	42420440 	.word	0x42420440

08002de0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	f200 808a 	bhi.w	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d045      	beq.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d075      	beq.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e16:	e082      	b.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002e18:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e1e:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d07b      	beq.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0c9b      	lsrs	r3, r3, #18
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	4a41      	ldr	r2, [pc, #260]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002e34:	5cd3      	ldrb	r3, [r2, r3]
 8002e36:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d015      	beq.n	8002e6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	0c5b      	lsrs	r3, r3, #17
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	4a3b      	ldr	r2, [pc, #236]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00d      	beq.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e5c:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	e004      	b.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4a34      	ldr	r2, [pc, #208]	; (8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e84:	d102      	bne.n	8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	61bb      	str	r3, [r7, #24]
      break;
 8002e8a:	e04a      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4a2d      	ldr	r2, [pc, #180]	; (8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
      break;
 8002e9a:	e042      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e01f      	b.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002ed8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e00f      	b.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eea:	d11c      	bne.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d016      	beq.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002ef8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002efc:	61bb      	str	r3, [r7, #24]
      break;
 8002efe:	e012      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f00:	e011      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f02:	f7ff fe85 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0b9b      	lsrs	r3, r3, #14
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	3301      	adds	r3, #1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	61bb      	str	r3, [r7, #24]
      break;
 8002f1c:	e004      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f26:	bf00      	nop
    }
  }
  return (frequency);
 8002f28:	69bb      	ldr	r3, [r7, #24]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	080040fc 	.word	0x080040fc
 8002f3c:	0800410c 	.word	0x0800410c
 8002f40:	007a1200 	.word	0x007a1200
 8002f44:	003d0900 	.word	0x003d0900
 8002f48:	aaaaaaab 	.word	0xaaaaaaab

08002f4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e093      	b.n	8003088 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fd fdf7 	bl	8000b68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f90:	f023 0307 	bic.w	r3, r3, #7
 8002f94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f000 f903 	bl	80031ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fec:	f023 030c 	bic.w	r3, r3, #12
 8002ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	4313      	orrs	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	011a      	lsls	r2, r3, #4
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	031b      	lsls	r3, r3, #12
 800301c:	4313      	orrs	r3, r2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4313      	orrs	r3, r2
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d110      	bne.n	80030e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d102      	bne.n	80030cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80030c6:	7b7b      	ldrb	r3, [r7, #13]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e069      	b.n	80031a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e0:	e031      	b.n	8003146 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d110      	bne.n	800310a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030e8:	7bbb      	ldrb	r3, [r7, #14]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030ee:	7b3b      	ldrb	r3, [r7, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d001      	beq.n	80030f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e055      	b.n	80031a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003108:	e01d      	b.n	8003146 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d108      	bne.n	8003122 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003116:	7b7b      	ldrb	r3, [r7, #13]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800311c:	7b3b      	ldrb	r3, [r7, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d001      	beq.n	8003126 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e03e      	b.n	80031a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_TIM_Encoder_Start+0xc4>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d008      	beq.n	8003164 <HAL_TIM_Encoder_Start+0xd4>
 8003152:	e00f      	b.n	8003174 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2201      	movs	r2, #1
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f887 	bl	8003270 <TIM_CCxChannelCmd>
      break;
 8003162:	e016      	b.n	8003192 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2201      	movs	r2, #1
 800316a:	2104      	movs	r1, #4
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f87f 	bl	8003270 <TIM_CCxChannelCmd>
      break;
 8003172:	e00e      	b.n	8003192 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2201      	movs	r2, #1
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f877 	bl	8003270 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2201      	movs	r2, #1
 8003188:	2104      	movs	r1, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f870 	bl	8003270 <TIM_CCxChannelCmd>
      break;
 8003190:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a29      	ldr	r2, [pc, #164]	; (8003264 <TIM_Base_SetConfig+0xb8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00b      	beq.n	80031dc <TIM_Base_SetConfig+0x30>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d007      	beq.n	80031dc <TIM_Base_SetConfig+0x30>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a26      	ldr	r2, [pc, #152]	; (8003268 <TIM_Base_SetConfig+0xbc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_Base_SetConfig+0x30>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a25      	ldr	r2, [pc, #148]	; (800326c <TIM_Base_SetConfig+0xc0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d108      	bne.n	80031ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1c      	ldr	r2, [pc, #112]	; (8003264 <TIM_Base_SetConfig+0xb8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00b      	beq.n	800320e <TIM_Base_SetConfig+0x62>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fc:	d007      	beq.n	800320e <TIM_Base_SetConfig+0x62>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <TIM_Base_SetConfig+0xbc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d003      	beq.n	800320e <TIM_Base_SetConfig+0x62>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a18      	ldr	r2, [pc, #96]	; (800326c <TIM_Base_SetConfig+0xc0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d108      	bne.n	8003220 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <TIM_Base_SetConfig+0xb8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d103      	bne.n	8003254 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	615a      	str	r2, [r3, #20]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800

08003270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	2201      	movs	r2, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e046      	b.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a16      	ldr	r2, [pc, #88]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331c:	d009      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a10      	ldr	r2, [pc, #64]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10c      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4313      	orrs	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	40012c00 	.word	0x40012c00
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800

08003374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e042      	b.n	800340c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fc22 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f91d 	bl	80035f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b20      	cmp	r3, #32
 8003432:	d16d      	bne.n	8003510 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_UART_Transmit+0x2c>
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e066      	b.n	8003512 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2221      	movs	r2, #33	; 0x21
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003452:	f7fd fcff 	bl	8000e54 <HAL_GetTick>
 8003456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	88fa      	ldrh	r2, [r7, #6]
 8003462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346c:	d108      	bne.n	8003480 <HAL_UART_Transmit+0x6c>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d104      	bne.n	8003480 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	e003      	b.n	8003488 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003488:	e02a      	b.n	80034e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f840 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e036      	b.n	8003512 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	3302      	adds	r3, #2
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	e007      	b.n	80034d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	3301      	adds	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1cf      	bne.n	800348a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2140      	movs	r1, #64	; 0x40
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f810 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e006      	b.n	8003512 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b090      	sub	sp, #64	; 0x40
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352a:	e050      	b.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d04c      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <UART_WaitOnFlagUntilTimeout+0x30>
 800353a:	f7fd fc8b 	bl	8000e54 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003546:	429a      	cmp	r2, r3
 8003548:	d241      	bcs.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800356a:	637a      	str	r2, [r7, #52]	; 0x34
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e5      	bne.n	800354a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3314      	adds	r3, #20
 8003584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	613b      	str	r3, [r7, #16]
   return(result);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800359e:	623a      	str	r2, [r7, #32]
 80035a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	69f9      	ldr	r1, [r7, #28]
 80035a4:	6a3a      	ldr	r2, [r7, #32]
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e5      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e00f      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d09f      	beq.n	800352c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3740      	adds	r7, #64	; 0x40
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003632:	f023 030c 	bic.w	r3, r3, #12
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	430b      	orrs	r3, r1
 800363e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2c      	ldr	r2, [pc, #176]	; (800370c <UART_SetConfig+0x114>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d103      	bne.n	8003668 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003660:	f7ff fad6 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	e002      	b.n	800366e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7ff fabe 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 800366c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009a      	lsls	r2, r3, #2
 8003678:	441a      	add	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	4a22      	ldr	r2, [pc, #136]	; (8003710 <UART_SetConfig+0x118>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	0119      	lsls	r1, r3, #4
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009a      	lsls	r2, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <UART_SetConfig+0x118>)
 80036a6:	fba3 0302 	umull	r0, r3, r3, r2
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2064      	movs	r0, #100	; 0x64
 80036ae:	fb00 f303 	mul.w	r3, r0, r3
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	3332      	adds	r3, #50	; 0x32
 80036b8:	4a15      	ldr	r2, [pc, #84]	; (8003710 <UART_SetConfig+0x118>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c4:	4419      	add	r1, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009a      	lsls	r2, r3, #2
 80036d0:	441a      	add	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <UART_SetConfig+0x118>)
 80036de:	fba3 0302 	umull	r0, r3, r3, r2
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2064      	movs	r0, #100	; 0x64
 80036e6:	fb00 f303 	mul.w	r3, r0, r3
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	3332      	adds	r3, #50	; 0x32
 80036f0:	4a07      	ldr	r2, [pc, #28]	; (8003710 <UART_SetConfig+0x118>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	f003 020f 	and.w	r2, r3, #15
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	440a      	add	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40013800 	.word	0x40013800
 8003710:	51eb851f 	.word	0x51eb851f

08003714 <siprintf>:
 8003714:	b40e      	push	{r1, r2, r3}
 8003716:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800371a:	b500      	push	{lr}
 800371c:	b09c      	sub	sp, #112	; 0x70
 800371e:	ab1d      	add	r3, sp, #116	; 0x74
 8003720:	9002      	str	r0, [sp, #8]
 8003722:	9006      	str	r0, [sp, #24]
 8003724:	9107      	str	r1, [sp, #28]
 8003726:	9104      	str	r1, [sp, #16]
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <siprintf+0x38>)
 800372a:	4909      	ldr	r1, [pc, #36]	; (8003750 <siprintf+0x3c>)
 800372c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003730:	9105      	str	r1, [sp, #20]
 8003732:	6800      	ldr	r0, [r0, #0]
 8003734:	a902      	add	r1, sp, #8
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	f000 f98e 	bl	8003a58 <_svfiprintf_r>
 800373c:	2200      	movs	r2, #0
 800373e:	9b02      	ldr	r3, [sp, #8]
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	b01c      	add	sp, #112	; 0x70
 8003744:	f85d eb04 	ldr.w	lr, [sp], #4
 8003748:	b003      	add	sp, #12
 800374a:	4770      	bx	lr
 800374c:	20000060 	.word	0x20000060
 8003750:	ffff0208 	.word	0xffff0208

08003754 <memset>:
 8003754:	4603      	mov	r3, r0
 8003756:	4402      	add	r2, r0
 8003758:	4293      	cmp	r3, r2
 800375a:	d100      	bne.n	800375e <memset+0xa>
 800375c:	4770      	bx	lr
 800375e:	f803 1b01 	strb.w	r1, [r3], #1
 8003762:	e7f9      	b.n	8003758 <memset+0x4>

08003764 <__errno>:
 8003764:	4b01      	ldr	r3, [pc, #4]	; (800376c <__errno+0x8>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000060 	.word	0x20000060

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	2600      	movs	r6, #0
 8003774:	4d0c      	ldr	r5, [pc, #48]	; (80037a8 <__libc_init_array+0x38>)
 8003776:	4c0d      	ldr	r4, [pc, #52]	; (80037ac <__libc_init_array+0x3c>)
 8003778:	1b64      	subs	r4, r4, r5
 800377a:	10a4      	asrs	r4, r4, #2
 800377c:	42a6      	cmp	r6, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	f000 fc7a 	bl	8004078 <_init>
 8003784:	2600      	movs	r6, #0
 8003786:	4d0a      	ldr	r5, [pc, #40]	; (80037b0 <__libc_init_array+0x40>)
 8003788:	4c0a      	ldr	r4, [pc, #40]	; (80037b4 <__libc_init_array+0x44>)
 800378a:	1b64      	subs	r4, r4, r5
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	42a6      	cmp	r6, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f855 3b04 	ldr.w	r3, [r5], #4
 8003798:	4798      	blx	r3
 800379a:	3601      	adds	r6, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a2:	4798      	blx	r3
 80037a4:	3601      	adds	r6, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	08004144 	.word	0x08004144
 80037ac:	08004144 	.word	0x08004144
 80037b0:	08004144 	.word	0x08004144
 80037b4:	08004148 	.word	0x08004148

080037b8 <__retarget_lock_acquire_recursive>:
 80037b8:	4770      	bx	lr

080037ba <__retarget_lock_release_recursive>:
 80037ba:	4770      	bx	lr

080037bc <_free_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4605      	mov	r5, r0
 80037c0:	2900      	cmp	r1, #0
 80037c2:	d040      	beq.n	8003846 <_free_r+0x8a>
 80037c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c8:	1f0c      	subs	r4, r1, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bfb8      	it	lt
 80037ce:	18e4      	addlt	r4, r4, r3
 80037d0:	f000 f8dc 	bl	800398c <__malloc_lock>
 80037d4:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <_free_r+0x8c>)
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	b933      	cbnz	r3, 80037e8 <_free_r+0x2c>
 80037da:	6063      	str	r3, [r4, #4]
 80037dc:	6014      	str	r4, [r2, #0]
 80037de:	4628      	mov	r0, r5
 80037e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037e4:	f000 b8d8 	b.w	8003998 <__malloc_unlock>
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	d908      	bls.n	80037fe <_free_r+0x42>
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	1821      	adds	r1, r4, r0
 80037f0:	428b      	cmp	r3, r1
 80037f2:	bf01      	itttt	eq
 80037f4:	6819      	ldreq	r1, [r3, #0]
 80037f6:	685b      	ldreq	r3, [r3, #4]
 80037f8:	1809      	addeq	r1, r1, r0
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	e7ed      	b.n	80037da <_free_r+0x1e>
 80037fe:	461a      	mov	r2, r3
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	b10b      	cbz	r3, 8003808 <_free_r+0x4c>
 8003804:	42a3      	cmp	r3, r4
 8003806:	d9fa      	bls.n	80037fe <_free_r+0x42>
 8003808:	6811      	ldr	r1, [r2, #0]
 800380a:	1850      	adds	r0, r2, r1
 800380c:	42a0      	cmp	r0, r4
 800380e:	d10b      	bne.n	8003828 <_free_r+0x6c>
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	4401      	add	r1, r0
 8003814:	1850      	adds	r0, r2, r1
 8003816:	4283      	cmp	r3, r0
 8003818:	6011      	str	r1, [r2, #0]
 800381a:	d1e0      	bne.n	80037de <_free_r+0x22>
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4408      	add	r0, r1
 8003822:	6010      	str	r0, [r2, #0]
 8003824:	6053      	str	r3, [r2, #4]
 8003826:	e7da      	b.n	80037de <_free_r+0x22>
 8003828:	d902      	bls.n	8003830 <_free_r+0x74>
 800382a:	230c      	movs	r3, #12
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	e7d6      	b.n	80037de <_free_r+0x22>
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	1821      	adds	r1, r4, r0
 8003834:	428b      	cmp	r3, r1
 8003836:	bf01      	itttt	eq
 8003838:	6819      	ldreq	r1, [r3, #0]
 800383a:	685b      	ldreq	r3, [r3, #4]
 800383c:	1809      	addeq	r1, r1, r0
 800383e:	6021      	streq	r1, [r4, #0]
 8003840:	6063      	str	r3, [r4, #4]
 8003842:	6054      	str	r4, [r2, #4]
 8003844:	e7cb      	b.n	80037de <_free_r+0x22>
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	2000035c 	.word	0x2000035c

0800384c <sbrk_aligned>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	4e0e      	ldr	r6, [pc, #56]	; (8003888 <sbrk_aligned+0x3c>)
 8003850:	460c      	mov	r4, r1
 8003852:	6831      	ldr	r1, [r6, #0]
 8003854:	4605      	mov	r5, r0
 8003856:	b911      	cbnz	r1, 800385e <sbrk_aligned+0x12>
 8003858:	f000 fbaa 	bl	8003fb0 <_sbrk_r>
 800385c:	6030      	str	r0, [r6, #0]
 800385e:	4621      	mov	r1, r4
 8003860:	4628      	mov	r0, r5
 8003862:	f000 fba5 	bl	8003fb0 <_sbrk_r>
 8003866:	1c43      	adds	r3, r0, #1
 8003868:	d00a      	beq.n	8003880 <sbrk_aligned+0x34>
 800386a:	1cc4      	adds	r4, r0, #3
 800386c:	f024 0403 	bic.w	r4, r4, #3
 8003870:	42a0      	cmp	r0, r4
 8003872:	d007      	beq.n	8003884 <sbrk_aligned+0x38>
 8003874:	1a21      	subs	r1, r4, r0
 8003876:	4628      	mov	r0, r5
 8003878:	f000 fb9a 	bl	8003fb0 <_sbrk_r>
 800387c:	3001      	adds	r0, #1
 800387e:	d101      	bne.n	8003884 <sbrk_aligned+0x38>
 8003880:	f04f 34ff 	mov.w	r4, #4294967295
 8003884:	4620      	mov	r0, r4
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	20000360 	.word	0x20000360

0800388c <_malloc_r>:
 800388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003890:	1ccd      	adds	r5, r1, #3
 8003892:	f025 0503 	bic.w	r5, r5, #3
 8003896:	3508      	adds	r5, #8
 8003898:	2d0c      	cmp	r5, #12
 800389a:	bf38      	it	cc
 800389c:	250c      	movcc	r5, #12
 800389e:	2d00      	cmp	r5, #0
 80038a0:	4607      	mov	r7, r0
 80038a2:	db01      	blt.n	80038a8 <_malloc_r+0x1c>
 80038a4:	42a9      	cmp	r1, r5
 80038a6:	d905      	bls.n	80038b4 <_malloc_r+0x28>
 80038a8:	230c      	movs	r3, #12
 80038aa:	2600      	movs	r6, #0
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4630      	mov	r0, r6
 80038b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003988 <_malloc_r+0xfc>
 80038b8:	f000 f868 	bl	800398c <__malloc_lock>
 80038bc:	f8d8 3000 	ldr.w	r3, [r8]
 80038c0:	461c      	mov	r4, r3
 80038c2:	bb5c      	cbnz	r4, 800391c <_malloc_r+0x90>
 80038c4:	4629      	mov	r1, r5
 80038c6:	4638      	mov	r0, r7
 80038c8:	f7ff ffc0 	bl	800384c <sbrk_aligned>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	4604      	mov	r4, r0
 80038d0:	d155      	bne.n	800397e <_malloc_r+0xf2>
 80038d2:	f8d8 4000 	ldr.w	r4, [r8]
 80038d6:	4626      	mov	r6, r4
 80038d8:	2e00      	cmp	r6, #0
 80038da:	d145      	bne.n	8003968 <_malloc_r+0xdc>
 80038dc:	2c00      	cmp	r4, #0
 80038de:	d048      	beq.n	8003972 <_malloc_r+0xe6>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	4631      	mov	r1, r6
 80038e4:	4638      	mov	r0, r7
 80038e6:	eb04 0903 	add.w	r9, r4, r3
 80038ea:	f000 fb61 	bl	8003fb0 <_sbrk_r>
 80038ee:	4581      	cmp	r9, r0
 80038f0:	d13f      	bne.n	8003972 <_malloc_r+0xe6>
 80038f2:	6821      	ldr	r1, [r4, #0]
 80038f4:	4638      	mov	r0, r7
 80038f6:	1a6d      	subs	r5, r5, r1
 80038f8:	4629      	mov	r1, r5
 80038fa:	f7ff ffa7 	bl	800384c <sbrk_aligned>
 80038fe:	3001      	adds	r0, #1
 8003900:	d037      	beq.n	8003972 <_malloc_r+0xe6>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	442b      	add	r3, r5
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	f8d8 3000 	ldr.w	r3, [r8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d038      	beq.n	8003982 <_malloc_r+0xf6>
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	42a2      	cmp	r2, r4
 8003914:	d12b      	bne.n	800396e <_malloc_r+0xe2>
 8003916:	2200      	movs	r2, #0
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	e00f      	b.n	800393c <_malloc_r+0xb0>
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	1b52      	subs	r2, r2, r5
 8003920:	d41f      	bmi.n	8003962 <_malloc_r+0xd6>
 8003922:	2a0b      	cmp	r2, #11
 8003924:	d917      	bls.n	8003956 <_malloc_r+0xca>
 8003926:	1961      	adds	r1, r4, r5
 8003928:	42a3      	cmp	r3, r4
 800392a:	6025      	str	r5, [r4, #0]
 800392c:	bf18      	it	ne
 800392e:	6059      	strne	r1, [r3, #4]
 8003930:	6863      	ldr	r3, [r4, #4]
 8003932:	bf08      	it	eq
 8003934:	f8c8 1000 	streq.w	r1, [r8]
 8003938:	5162      	str	r2, [r4, r5]
 800393a:	604b      	str	r3, [r1, #4]
 800393c:	4638      	mov	r0, r7
 800393e:	f104 060b 	add.w	r6, r4, #11
 8003942:	f000 f829 	bl	8003998 <__malloc_unlock>
 8003946:	f026 0607 	bic.w	r6, r6, #7
 800394a:	1d23      	adds	r3, r4, #4
 800394c:	1af2      	subs	r2, r6, r3
 800394e:	d0ae      	beq.n	80038ae <_malloc_r+0x22>
 8003950:	1b9b      	subs	r3, r3, r6
 8003952:	50a3      	str	r3, [r4, r2]
 8003954:	e7ab      	b.n	80038ae <_malloc_r+0x22>
 8003956:	42a3      	cmp	r3, r4
 8003958:	6862      	ldr	r2, [r4, #4]
 800395a:	d1dd      	bne.n	8003918 <_malloc_r+0x8c>
 800395c:	f8c8 2000 	str.w	r2, [r8]
 8003960:	e7ec      	b.n	800393c <_malloc_r+0xb0>
 8003962:	4623      	mov	r3, r4
 8003964:	6864      	ldr	r4, [r4, #4]
 8003966:	e7ac      	b.n	80038c2 <_malloc_r+0x36>
 8003968:	4634      	mov	r4, r6
 800396a:	6876      	ldr	r6, [r6, #4]
 800396c:	e7b4      	b.n	80038d8 <_malloc_r+0x4c>
 800396e:	4613      	mov	r3, r2
 8003970:	e7cc      	b.n	800390c <_malloc_r+0x80>
 8003972:	230c      	movs	r3, #12
 8003974:	4638      	mov	r0, r7
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	f000 f80e 	bl	8003998 <__malloc_unlock>
 800397c:	e797      	b.n	80038ae <_malloc_r+0x22>
 800397e:	6025      	str	r5, [r4, #0]
 8003980:	e7dc      	b.n	800393c <_malloc_r+0xb0>
 8003982:	605b      	str	r3, [r3, #4]
 8003984:	deff      	udf	#255	; 0xff
 8003986:	bf00      	nop
 8003988:	2000035c 	.word	0x2000035c

0800398c <__malloc_lock>:
 800398c:	4801      	ldr	r0, [pc, #4]	; (8003994 <__malloc_lock+0x8>)
 800398e:	f7ff bf13 	b.w	80037b8 <__retarget_lock_acquire_recursive>
 8003992:	bf00      	nop
 8003994:	20000358 	.word	0x20000358

08003998 <__malloc_unlock>:
 8003998:	4801      	ldr	r0, [pc, #4]	; (80039a0 <__malloc_unlock+0x8>)
 800399a:	f7ff bf0e 	b.w	80037ba <__retarget_lock_release_recursive>
 800399e:	bf00      	nop
 80039a0:	20000358 	.word	0x20000358

080039a4 <__ssputs_r>:
 80039a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	461f      	mov	r7, r3
 80039aa:	688e      	ldr	r6, [r1, #8]
 80039ac:	4682      	mov	sl, r0
 80039ae:	42be      	cmp	r6, r7
 80039b0:	460c      	mov	r4, r1
 80039b2:	4690      	mov	r8, r2
 80039b4:	680b      	ldr	r3, [r1, #0]
 80039b6:	d82c      	bhi.n	8003a12 <__ssputs_r+0x6e>
 80039b8:	898a      	ldrh	r2, [r1, #12]
 80039ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039be:	d026      	beq.n	8003a0e <__ssputs_r+0x6a>
 80039c0:	6965      	ldr	r5, [r4, #20]
 80039c2:	6909      	ldr	r1, [r1, #16]
 80039c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039c8:	eba3 0901 	sub.w	r9, r3, r1
 80039cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039d0:	1c7b      	adds	r3, r7, #1
 80039d2:	444b      	add	r3, r9
 80039d4:	106d      	asrs	r5, r5, #1
 80039d6:	429d      	cmp	r5, r3
 80039d8:	bf38      	it	cc
 80039da:	461d      	movcc	r5, r3
 80039dc:	0553      	lsls	r3, r2, #21
 80039de:	d527      	bpl.n	8003a30 <__ssputs_r+0x8c>
 80039e0:	4629      	mov	r1, r5
 80039e2:	f7ff ff53 	bl	800388c <_malloc_r>
 80039e6:	4606      	mov	r6, r0
 80039e8:	b360      	cbz	r0, 8003a44 <__ssputs_r+0xa0>
 80039ea:	464a      	mov	r2, r9
 80039ec:	6921      	ldr	r1, [r4, #16]
 80039ee:	f000 fafd 	bl	8003fec <memcpy>
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	6126      	str	r6, [r4, #16]
 8003a00:	444e      	add	r6, r9
 8003a02:	6026      	str	r6, [r4, #0]
 8003a04:	463e      	mov	r6, r7
 8003a06:	6165      	str	r5, [r4, #20]
 8003a08:	eba5 0509 	sub.w	r5, r5, r9
 8003a0c:	60a5      	str	r5, [r4, #8]
 8003a0e:	42be      	cmp	r6, r7
 8003a10:	d900      	bls.n	8003a14 <__ssputs_r+0x70>
 8003a12:	463e      	mov	r6, r7
 8003a14:	4632      	mov	r2, r6
 8003a16:	4641      	mov	r1, r8
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	f000 faaf 	bl	8003f7c <memmove>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	68a3      	ldr	r3, [r4, #8]
 8003a22:	1b9b      	subs	r3, r3, r6
 8003a24:	60a3      	str	r3, [r4, #8]
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	4433      	add	r3, r6
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a30:	462a      	mov	r2, r5
 8003a32:	f000 fae9 	bl	8004008 <_realloc_r>
 8003a36:	4606      	mov	r6, r0
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d1e0      	bne.n	80039fe <__ssputs_r+0x5a>
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	6921      	ldr	r1, [r4, #16]
 8003a40:	f7ff febc 	bl	80037bc <_free_r>
 8003a44:	230c      	movs	r3, #12
 8003a46:	f8ca 3000 	str.w	r3, [sl]
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a54:	81a3      	strh	r3, [r4, #12]
 8003a56:	e7e9      	b.n	8003a2c <__ssputs_r+0x88>

08003a58 <_svfiprintf_r>:
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	4698      	mov	r8, r3
 8003a5e:	898b      	ldrh	r3, [r1, #12]
 8003a60:	4607      	mov	r7, r0
 8003a62:	061b      	lsls	r3, r3, #24
 8003a64:	460d      	mov	r5, r1
 8003a66:	4614      	mov	r4, r2
 8003a68:	b09d      	sub	sp, #116	; 0x74
 8003a6a:	d50e      	bpl.n	8003a8a <_svfiprintf_r+0x32>
 8003a6c:	690b      	ldr	r3, [r1, #16]
 8003a6e:	b963      	cbnz	r3, 8003a8a <_svfiprintf_r+0x32>
 8003a70:	2140      	movs	r1, #64	; 0x40
 8003a72:	f7ff ff0b 	bl	800388c <_malloc_r>
 8003a76:	6028      	str	r0, [r5, #0]
 8003a78:	6128      	str	r0, [r5, #16]
 8003a7a:	b920      	cbnz	r0, 8003a86 <_svfiprintf_r+0x2e>
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	e0d0      	b.n	8003c28 <_svfiprintf_r+0x1d0>
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	616b      	str	r3, [r5, #20]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8e:	2320      	movs	r3, #32
 8003a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a94:	2330      	movs	r3, #48	; 0x30
 8003a96:	f04f 0901 	mov.w	r9, #1
 8003a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a9e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003c40 <_svfiprintf_r+0x1e8>
 8003aa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	469a      	mov	sl, r3
 8003aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aae:	b10a      	cbz	r2, 8003ab4 <_svfiprintf_r+0x5c>
 8003ab0:	2a25      	cmp	r2, #37	; 0x25
 8003ab2:	d1f9      	bne.n	8003aa8 <_svfiprintf_r+0x50>
 8003ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab8:	d00b      	beq.n	8003ad2 <_svfiprintf_r+0x7a>
 8003aba:	465b      	mov	r3, fp
 8003abc:	4622      	mov	r2, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f7ff ff6f 	bl	80039a4 <__ssputs_r>
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	f000 80a9 	beq.w	8003c1e <_svfiprintf_r+0x1c6>
 8003acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ace:	445a      	add	r2, fp
 8003ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80a1 	beq.w	8003c1e <_svfiprintf_r+0x1c6>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae6:	f10a 0a01 	add.w	sl, sl, #1
 8003aea:	9304      	str	r3, [sp, #16]
 8003aec:	9307      	str	r3, [sp, #28]
 8003aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003af2:	931a      	str	r3, [sp, #104]	; 0x68
 8003af4:	4654      	mov	r4, sl
 8003af6:	2205      	movs	r2, #5
 8003af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afc:	4850      	ldr	r0, [pc, #320]	; (8003c40 <_svfiprintf_r+0x1e8>)
 8003afe:	f000 fa67 	bl	8003fd0 <memchr>
 8003b02:	9a04      	ldr	r2, [sp, #16]
 8003b04:	b9d8      	cbnz	r0, 8003b3e <_svfiprintf_r+0xe6>
 8003b06:	06d0      	lsls	r0, r2, #27
 8003b08:	bf44      	itt	mi
 8003b0a:	2320      	movmi	r3, #32
 8003b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b10:	0711      	lsls	r1, r2, #28
 8003b12:	bf44      	itt	mi
 8003b14:	232b      	movmi	r3, #43	; 0x2b
 8003b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b20:	d015      	beq.n	8003b4e <_svfiprintf_r+0xf6>
 8003b22:	4654      	mov	r4, sl
 8003b24:	2000      	movs	r0, #0
 8003b26:	f04f 0c0a 	mov.w	ip, #10
 8003b2a:	9a07      	ldr	r2, [sp, #28]
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b32:	3b30      	subs	r3, #48	; 0x30
 8003b34:	2b09      	cmp	r3, #9
 8003b36:	d94d      	bls.n	8003bd4 <_svfiprintf_r+0x17c>
 8003b38:	b1b0      	cbz	r0, 8003b68 <_svfiprintf_r+0x110>
 8003b3a:	9207      	str	r2, [sp, #28]
 8003b3c:	e014      	b.n	8003b68 <_svfiprintf_r+0x110>
 8003b3e:	eba0 0308 	sub.w	r3, r0, r8
 8003b42:	fa09 f303 	lsl.w	r3, r9, r3
 8003b46:	4313      	orrs	r3, r2
 8003b48:	46a2      	mov	sl, r4
 8003b4a:	9304      	str	r3, [sp, #16]
 8003b4c:	e7d2      	b.n	8003af4 <_svfiprintf_r+0x9c>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	1d19      	adds	r1, r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	9103      	str	r1, [sp, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bfbb      	ittet	lt
 8003b5a:	425b      	neglt	r3, r3
 8003b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b60:	9307      	strge	r3, [sp, #28]
 8003b62:	9307      	strlt	r3, [sp, #28]
 8003b64:	bfb8      	it	lt
 8003b66:	9204      	strlt	r2, [sp, #16]
 8003b68:	7823      	ldrb	r3, [r4, #0]
 8003b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b6c:	d10c      	bne.n	8003b88 <_svfiprintf_r+0x130>
 8003b6e:	7863      	ldrb	r3, [r4, #1]
 8003b70:	2b2a      	cmp	r3, #42	; 0x2a
 8003b72:	d134      	bne.n	8003bde <_svfiprintf_r+0x186>
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	3402      	adds	r4, #2
 8003b78:	1d1a      	adds	r2, r3, #4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	9203      	str	r2, [sp, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bfb8      	it	lt
 8003b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b86:	9305      	str	r3, [sp, #20]
 8003b88:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003c44 <_svfiprintf_r+0x1ec>
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	4650      	mov	r0, sl
 8003b90:	7821      	ldrb	r1, [r4, #0]
 8003b92:	f000 fa1d 	bl	8003fd0 <memchr>
 8003b96:	b138      	cbz	r0, 8003ba8 <_svfiprintf_r+0x150>
 8003b98:	2240      	movs	r2, #64	; 0x40
 8003b9a:	9b04      	ldr	r3, [sp, #16]
 8003b9c:	eba0 000a 	sub.w	r0, r0, sl
 8003ba0:	4082      	lsls	r2, r0
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	3401      	adds	r4, #1
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bac:	2206      	movs	r2, #6
 8003bae:	4826      	ldr	r0, [pc, #152]	; (8003c48 <_svfiprintf_r+0x1f0>)
 8003bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bb4:	f000 fa0c 	bl	8003fd0 <memchr>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d038      	beq.n	8003c2e <_svfiprintf_r+0x1d6>
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <_svfiprintf_r+0x1f4>)
 8003bbe:	bb1b      	cbnz	r3, 8003c08 <_svfiprintf_r+0x1b0>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	3307      	adds	r3, #7
 8003bc4:	f023 0307 	bic.w	r3, r3, #7
 8003bc8:	3308      	adds	r3, #8
 8003bca:	9303      	str	r3, [sp, #12]
 8003bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bce:	4433      	add	r3, r6
 8003bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd2:	e768      	b.n	8003aa6 <_svfiprintf_r+0x4e>
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bdc:	e7a6      	b.n	8003b2c <_svfiprintf_r+0xd4>
 8003bde:	2300      	movs	r3, #0
 8003be0:	f04f 0c0a 	mov.w	ip, #10
 8003be4:	4619      	mov	r1, r3
 8003be6:	3401      	adds	r4, #1
 8003be8:	9305      	str	r3, [sp, #20]
 8003bea:	4620      	mov	r0, r4
 8003bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bf0:	3a30      	subs	r2, #48	; 0x30
 8003bf2:	2a09      	cmp	r2, #9
 8003bf4:	d903      	bls.n	8003bfe <_svfiprintf_r+0x1a6>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0c6      	beq.n	8003b88 <_svfiprintf_r+0x130>
 8003bfa:	9105      	str	r1, [sp, #20]
 8003bfc:	e7c4      	b.n	8003b88 <_svfiprintf_r+0x130>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	2301      	movs	r3, #1
 8003c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c06:	e7f0      	b.n	8003bea <_svfiprintf_r+0x192>
 8003c08:	ab03      	add	r3, sp, #12
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	4638      	mov	r0, r7
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <_svfiprintf_r+0x1f8>)
 8003c12:	a904      	add	r1, sp, #16
 8003c14:	f3af 8000 	nop.w
 8003c18:	1c42      	adds	r2, r0, #1
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	d1d6      	bne.n	8003bcc <_svfiprintf_r+0x174>
 8003c1e:	89ab      	ldrh	r3, [r5, #12]
 8003c20:	065b      	lsls	r3, r3, #25
 8003c22:	f53f af2d 	bmi.w	8003a80 <_svfiprintf_r+0x28>
 8003c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c28:	b01d      	add	sp, #116	; 0x74
 8003c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2e:	ab03      	add	r3, sp, #12
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	462a      	mov	r2, r5
 8003c34:	4638      	mov	r0, r7
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <_svfiprintf_r+0x1f8>)
 8003c38:	a904      	add	r1, sp, #16
 8003c3a:	f000 f87d 	bl	8003d38 <_printf_i>
 8003c3e:	e7eb      	b.n	8003c18 <_svfiprintf_r+0x1c0>
 8003c40:	0800410e 	.word	0x0800410e
 8003c44:	08004114 	.word	0x08004114
 8003c48:	08004118 	.word	0x08004118
 8003c4c:	00000000 	.word	0x00000000
 8003c50:	080039a5 	.word	0x080039a5

08003c54 <_printf_common>:
 8003c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	4616      	mov	r6, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	688a      	ldr	r2, [r1, #8]
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	4607      	mov	r7, r0
 8003c62:	4293      	cmp	r3, r2
 8003c64:	bfb8      	it	lt
 8003c66:	4613      	movlt	r3, r2
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c6e:	460c      	mov	r4, r1
 8003c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c74:	b10a      	cbz	r2, 8003c7a <_printf_common+0x26>
 8003c76:	3301      	adds	r3, #1
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0699      	lsls	r1, r3, #26
 8003c7e:	bf42      	ittt	mi
 8003c80:	6833      	ldrmi	r3, [r6, #0]
 8003c82:	3302      	addmi	r3, #2
 8003c84:	6033      	strmi	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d106      	bne.n	8003c9c <_printf_common+0x48>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	dc2b      	bgt.n	8003cf4 <_printf_common+0xa0>
 8003c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca0:	1e13      	subs	r3, r2, #0
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d430      	bmi.n	8003d0e <_printf_common+0xba>
 8003cac:	4649      	mov	r1, r9
 8003cae:	4638      	mov	r0, r7
 8003cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d023      	beq.n	8003d02 <_printf_common+0xae>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	6922      	ldr	r2, [r4, #16]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf14      	ite	ne
 8003cc6:	2500      	movne	r5, #0
 8003cc8:	6833      	ldreq	r3, [r6, #0]
 8003cca:	f04f 0600 	mov.w	r6, #0
 8003cce:	bf08      	it	eq
 8003cd0:	68e5      	ldreq	r5, [r4, #12]
 8003cd2:	f104 041a 	add.w	r4, r4, #26
 8003cd6:	bf08      	it	eq
 8003cd8:	1aed      	subeq	r5, r5, r3
 8003cda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cde:	bf08      	it	eq
 8003ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	bfc4      	itt	gt
 8003ce8:	1a9b      	subgt	r3, r3, r2
 8003cea:	18ed      	addgt	r5, r5, r3
 8003cec:	42b5      	cmp	r5, r6
 8003cee:	d11a      	bne.n	8003d26 <_printf_common+0xd2>
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e008      	b.n	8003d06 <_printf_common+0xb2>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	4652      	mov	r2, sl
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	47c0      	blx	r8
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d103      	bne.n	8003d0a <_printf_common+0xb6>
 8003d02:	f04f 30ff 	mov.w	r0, #4294967295
 8003d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0a:	3501      	adds	r5, #1
 8003d0c:	e7c1      	b.n	8003c92 <_printf_common+0x3e>
 8003d0e:	2030      	movs	r0, #48	; 0x30
 8003d10:	18e1      	adds	r1, r4, r3
 8003d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d1c:	4422      	add	r2, r4
 8003d1e:	3302      	adds	r3, #2
 8003d20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d24:	e7c2      	b.n	8003cac <_printf_common+0x58>
 8003d26:	2301      	movs	r3, #1
 8003d28:	4622      	mov	r2, r4
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	47c0      	blx	r8
 8003d30:	3001      	adds	r0, #1
 8003d32:	d0e6      	beq.n	8003d02 <_printf_common+0xae>
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7d9      	b.n	8003cec <_printf_common+0x98>

08003d38 <_printf_i>:
 8003d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3c:	7e0f      	ldrb	r7, [r1, #24]
 8003d3e:	4691      	mov	r9, r2
 8003d40:	2f78      	cmp	r7, #120	; 0x78
 8003d42:	4680      	mov	r8, r0
 8003d44:	460c      	mov	r4, r1
 8003d46:	469a      	mov	sl, r3
 8003d48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d4e:	d807      	bhi.n	8003d60 <_printf_i+0x28>
 8003d50:	2f62      	cmp	r7, #98	; 0x62
 8003d52:	d80a      	bhi.n	8003d6a <_printf_i+0x32>
 8003d54:	2f00      	cmp	r7, #0
 8003d56:	f000 80d5 	beq.w	8003f04 <_printf_i+0x1cc>
 8003d5a:	2f58      	cmp	r7, #88	; 0x58
 8003d5c:	f000 80c1 	beq.w	8003ee2 <_printf_i+0x1aa>
 8003d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d68:	e03a      	b.n	8003de0 <_printf_i+0xa8>
 8003d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d6e:	2b15      	cmp	r3, #21
 8003d70:	d8f6      	bhi.n	8003d60 <_printf_i+0x28>
 8003d72:	a101      	add	r1, pc, #4	; (adr r1, 8003d78 <_printf_i+0x40>)
 8003d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d78:	08003dd1 	.word	0x08003dd1
 8003d7c:	08003de5 	.word	0x08003de5
 8003d80:	08003d61 	.word	0x08003d61
 8003d84:	08003d61 	.word	0x08003d61
 8003d88:	08003d61 	.word	0x08003d61
 8003d8c:	08003d61 	.word	0x08003d61
 8003d90:	08003de5 	.word	0x08003de5
 8003d94:	08003d61 	.word	0x08003d61
 8003d98:	08003d61 	.word	0x08003d61
 8003d9c:	08003d61 	.word	0x08003d61
 8003da0:	08003d61 	.word	0x08003d61
 8003da4:	08003eeb 	.word	0x08003eeb
 8003da8:	08003e11 	.word	0x08003e11
 8003dac:	08003ea5 	.word	0x08003ea5
 8003db0:	08003d61 	.word	0x08003d61
 8003db4:	08003d61 	.word	0x08003d61
 8003db8:	08003f0d 	.word	0x08003f0d
 8003dbc:	08003d61 	.word	0x08003d61
 8003dc0:	08003e11 	.word	0x08003e11
 8003dc4:	08003d61 	.word	0x08003d61
 8003dc8:	08003d61 	.word	0x08003d61
 8003dcc:	08003ead 	.word	0x08003ead
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	1d1a      	adds	r2, r3, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	602a      	str	r2, [r5, #0]
 8003dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0a0      	b.n	8003f26 <_printf_i+0x1ee>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	682b      	ldr	r3, [r5, #0]
 8003de8:	0607      	lsls	r7, r0, #24
 8003dea:	f103 0104 	add.w	r1, r3, #4
 8003dee:	6029      	str	r1, [r5, #0]
 8003df0:	d501      	bpl.n	8003df6 <_printf_i+0xbe>
 8003df2:	681e      	ldr	r6, [r3, #0]
 8003df4:	e003      	b.n	8003dfe <_printf_i+0xc6>
 8003df6:	0646      	lsls	r6, r0, #25
 8003df8:	d5fb      	bpl.n	8003df2 <_printf_i+0xba>
 8003dfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003dfe:	2e00      	cmp	r6, #0
 8003e00:	da03      	bge.n	8003e0a <_printf_i+0xd2>
 8003e02:	232d      	movs	r3, #45	; 0x2d
 8003e04:	4276      	negs	r6, r6
 8003e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0a:	230a      	movs	r3, #10
 8003e0c:	4859      	ldr	r0, [pc, #356]	; (8003f74 <_printf_i+0x23c>)
 8003e0e:	e012      	b.n	8003e36 <_printf_i+0xfe>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	1d19      	adds	r1, r3, #4
 8003e16:	6029      	str	r1, [r5, #0]
 8003e18:	0605      	lsls	r5, r0, #24
 8003e1a:	d501      	bpl.n	8003e20 <_printf_i+0xe8>
 8003e1c:	681e      	ldr	r6, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <_printf_i+0xee>
 8003e20:	0641      	lsls	r1, r0, #25
 8003e22:	d5fb      	bpl.n	8003e1c <_printf_i+0xe4>
 8003e24:	881e      	ldrh	r6, [r3, #0]
 8003e26:	2f6f      	cmp	r7, #111	; 0x6f
 8003e28:	bf0c      	ite	eq
 8003e2a:	2308      	moveq	r3, #8
 8003e2c:	230a      	movne	r3, #10
 8003e2e:	4851      	ldr	r0, [pc, #324]	; (8003f74 <_printf_i+0x23c>)
 8003e30:	2100      	movs	r1, #0
 8003e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e36:	6865      	ldr	r5, [r4, #4]
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	bfa8      	it	ge
 8003e3c:	6821      	ldrge	r1, [r4, #0]
 8003e3e:	60a5      	str	r5, [r4, #8]
 8003e40:	bfa4      	itt	ge
 8003e42:	f021 0104 	bicge.w	r1, r1, #4
 8003e46:	6021      	strge	r1, [r4, #0]
 8003e48:	b90e      	cbnz	r6, 8003e4e <_printf_i+0x116>
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	d04b      	beq.n	8003ee6 <_printf_i+0x1ae>
 8003e4e:	4615      	mov	r5, r2
 8003e50:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e54:	fb03 6711 	mls	r7, r3, r1, r6
 8003e58:	5dc7      	ldrb	r7, [r0, r7]
 8003e5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e5e:	4637      	mov	r7, r6
 8003e60:	42bb      	cmp	r3, r7
 8003e62:	460e      	mov	r6, r1
 8003e64:	d9f4      	bls.n	8003e50 <_printf_i+0x118>
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d10b      	bne.n	8003e82 <_printf_i+0x14a>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	07de      	lsls	r6, r3, #31
 8003e6e:	d508      	bpl.n	8003e82 <_printf_i+0x14a>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	6861      	ldr	r1, [r4, #4]
 8003e74:	4299      	cmp	r1, r3
 8003e76:	bfde      	ittt	le
 8003e78:	2330      	movle	r3, #48	; 0x30
 8003e7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e82:	1b52      	subs	r2, r2, r5
 8003e84:	6122      	str	r2, [r4, #16]
 8003e86:	464b      	mov	r3, r9
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	f8cd a000 	str.w	sl, [sp]
 8003e90:	aa03      	add	r2, sp, #12
 8003e92:	f7ff fedf 	bl	8003c54 <_printf_common>
 8003e96:	3001      	adds	r0, #1
 8003e98:	d14a      	bne.n	8003f30 <_printf_i+0x1f8>
 8003e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9e:	b004      	add	sp, #16
 8003ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f043 0320 	orr.w	r3, r3, #32
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	2778      	movs	r7, #120	; 0x78
 8003eae:	4832      	ldr	r0, [pc, #200]	; (8003f78 <_printf_i+0x240>)
 8003eb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	6829      	ldr	r1, [r5, #0]
 8003eb8:	061f      	lsls	r7, r3, #24
 8003eba:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ebe:	d402      	bmi.n	8003ec6 <_printf_i+0x18e>
 8003ec0:	065f      	lsls	r7, r3, #25
 8003ec2:	bf48      	it	mi
 8003ec4:	b2b6      	uxthmi	r6, r6
 8003ec6:	07df      	lsls	r7, r3, #31
 8003ec8:	bf48      	it	mi
 8003eca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ece:	6029      	str	r1, [r5, #0]
 8003ed0:	bf48      	it	mi
 8003ed2:	6023      	strmi	r3, [r4, #0]
 8003ed4:	b91e      	cbnz	r6, 8003ede <_printf_i+0x1a6>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f023 0320 	bic.w	r3, r3, #32
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	2310      	movs	r3, #16
 8003ee0:	e7a6      	b.n	8003e30 <_printf_i+0xf8>
 8003ee2:	4824      	ldr	r0, [pc, #144]	; (8003f74 <_printf_i+0x23c>)
 8003ee4:	e7e4      	b.n	8003eb0 <_printf_i+0x178>
 8003ee6:	4615      	mov	r5, r2
 8003ee8:	e7bd      	b.n	8003e66 <_printf_i+0x12e>
 8003eea:	682b      	ldr	r3, [r5, #0]
 8003eec:	6826      	ldr	r6, [r4, #0]
 8003eee:	1d18      	adds	r0, r3, #4
 8003ef0:	6961      	ldr	r1, [r4, #20]
 8003ef2:	6028      	str	r0, [r5, #0]
 8003ef4:	0635      	lsls	r5, r6, #24
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	d501      	bpl.n	8003efe <_printf_i+0x1c6>
 8003efa:	6019      	str	r1, [r3, #0]
 8003efc:	e002      	b.n	8003f04 <_printf_i+0x1cc>
 8003efe:	0670      	lsls	r0, r6, #25
 8003f00:	d5fb      	bpl.n	8003efa <_printf_i+0x1c2>
 8003f02:	8019      	strh	r1, [r3, #0]
 8003f04:	2300      	movs	r3, #0
 8003f06:	4615      	mov	r5, r2
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	e7bc      	b.n	8003e86 <_printf_i+0x14e>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	681d      	ldr	r5, [r3, #0]
 8003f16:	6862      	ldr	r2, [r4, #4]
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f000 f859 	bl	8003fd0 <memchr>
 8003f1e:	b108      	cbz	r0, 8003f24 <_printf_i+0x1ec>
 8003f20:	1b40      	subs	r0, r0, r5
 8003f22:	6060      	str	r0, [r4, #4]
 8003f24:	6863      	ldr	r3, [r4, #4]
 8003f26:	6123      	str	r3, [r4, #16]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2e:	e7aa      	b.n	8003e86 <_printf_i+0x14e>
 8003f30:	462a      	mov	r2, r5
 8003f32:	4649      	mov	r1, r9
 8003f34:	4640      	mov	r0, r8
 8003f36:	6923      	ldr	r3, [r4, #16]
 8003f38:	47d0      	blx	sl
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d0ad      	beq.n	8003e9a <_printf_i+0x162>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	079b      	lsls	r3, r3, #30
 8003f42:	d413      	bmi.n	8003f6c <_printf_i+0x234>
 8003f44:	68e0      	ldr	r0, [r4, #12]
 8003f46:	9b03      	ldr	r3, [sp, #12]
 8003f48:	4298      	cmp	r0, r3
 8003f4a:	bfb8      	it	lt
 8003f4c:	4618      	movlt	r0, r3
 8003f4e:	e7a6      	b.n	8003e9e <_printf_i+0x166>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4632      	mov	r2, r6
 8003f54:	4649      	mov	r1, r9
 8003f56:	4640      	mov	r0, r8
 8003f58:	47d0      	blx	sl
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d09d      	beq.n	8003e9a <_printf_i+0x162>
 8003f5e:	3501      	adds	r5, #1
 8003f60:	68e3      	ldr	r3, [r4, #12]
 8003f62:	9903      	ldr	r1, [sp, #12]
 8003f64:	1a5b      	subs	r3, r3, r1
 8003f66:	42ab      	cmp	r3, r5
 8003f68:	dcf2      	bgt.n	8003f50 <_printf_i+0x218>
 8003f6a:	e7eb      	b.n	8003f44 <_printf_i+0x20c>
 8003f6c:	2500      	movs	r5, #0
 8003f6e:	f104 0619 	add.w	r6, r4, #25
 8003f72:	e7f5      	b.n	8003f60 <_printf_i+0x228>
 8003f74:	0800411f 	.word	0x0800411f
 8003f78:	08004130 	.word	0x08004130

08003f7c <memmove>:
 8003f7c:	4288      	cmp	r0, r1
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	eb01 0402 	add.w	r4, r1, r2
 8003f84:	d902      	bls.n	8003f8c <memmove+0x10>
 8003f86:	4284      	cmp	r4, r0
 8003f88:	4623      	mov	r3, r4
 8003f8a:	d807      	bhi.n	8003f9c <memmove+0x20>
 8003f8c:	1e43      	subs	r3, r0, #1
 8003f8e:	42a1      	cmp	r1, r4
 8003f90:	d008      	beq.n	8003fa4 <memmove+0x28>
 8003f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f9a:	e7f8      	b.n	8003f8e <memmove+0x12>
 8003f9c:	4601      	mov	r1, r0
 8003f9e:	4402      	add	r2, r0
 8003fa0:	428a      	cmp	r2, r1
 8003fa2:	d100      	bne.n	8003fa6 <memmove+0x2a>
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fae:	e7f7      	b.n	8003fa0 <memmove+0x24>

08003fb0 <_sbrk_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	4d05      	ldr	r5, [pc, #20]	; (8003fcc <_sbrk_r+0x1c>)
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	602b      	str	r3, [r5, #0]
 8003fbc:	f7fc fe90 	bl	8000ce0 <_sbrk>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_sbrk_r+0x1a>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_sbrk_r+0x1a>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	20000354 	.word	0x20000354

08003fd0 <memchr>:
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	b2c9      	uxtb	r1, r1
 8003fd6:	4402      	add	r2, r0
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	d101      	bne.n	8003fe2 <memchr+0x12>
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e003      	b.n	8003fea <memchr+0x1a>
 8003fe2:	7804      	ldrb	r4, [r0, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	428c      	cmp	r4, r1
 8003fe8:	d1f6      	bne.n	8003fd8 <memchr+0x8>
 8003fea:	bd10      	pop	{r4, pc}

08003fec <memcpy>:
 8003fec:	440a      	add	r2, r1
 8003fee:	4291      	cmp	r1, r2
 8003ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ff4:	d100      	bne.n	8003ff8 <memcpy+0xc>
 8003ff6:	4770      	bx	lr
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ffe:	4291      	cmp	r1, r2
 8004000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004004:	d1f9      	bne.n	8003ffa <memcpy+0xe>
 8004006:	bd10      	pop	{r4, pc}

08004008 <_realloc_r>:
 8004008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400c:	4680      	mov	r8, r0
 800400e:	4614      	mov	r4, r2
 8004010:	460e      	mov	r6, r1
 8004012:	b921      	cbnz	r1, 800401e <_realloc_r+0x16>
 8004014:	4611      	mov	r1, r2
 8004016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800401a:	f7ff bc37 	b.w	800388c <_malloc_r>
 800401e:	b92a      	cbnz	r2, 800402c <_realloc_r+0x24>
 8004020:	f7ff fbcc 	bl	80037bc <_free_r>
 8004024:	4625      	mov	r5, r4
 8004026:	4628      	mov	r0, r5
 8004028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800402c:	f000 f81b 	bl	8004066 <_malloc_usable_size_r>
 8004030:	4284      	cmp	r4, r0
 8004032:	4607      	mov	r7, r0
 8004034:	d802      	bhi.n	800403c <_realloc_r+0x34>
 8004036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800403a:	d812      	bhi.n	8004062 <_realloc_r+0x5a>
 800403c:	4621      	mov	r1, r4
 800403e:	4640      	mov	r0, r8
 8004040:	f7ff fc24 	bl	800388c <_malloc_r>
 8004044:	4605      	mov	r5, r0
 8004046:	2800      	cmp	r0, #0
 8004048:	d0ed      	beq.n	8004026 <_realloc_r+0x1e>
 800404a:	42bc      	cmp	r4, r7
 800404c:	4622      	mov	r2, r4
 800404e:	4631      	mov	r1, r6
 8004050:	bf28      	it	cs
 8004052:	463a      	movcs	r2, r7
 8004054:	f7ff ffca 	bl	8003fec <memcpy>
 8004058:	4631      	mov	r1, r6
 800405a:	4640      	mov	r0, r8
 800405c:	f7ff fbae 	bl	80037bc <_free_r>
 8004060:	e7e1      	b.n	8004026 <_realloc_r+0x1e>
 8004062:	4635      	mov	r5, r6
 8004064:	e7df      	b.n	8004026 <_realloc_r+0x1e>

08004066 <_malloc_usable_size_r>:
 8004066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800406a:	1f18      	subs	r0, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	bfbc      	itt	lt
 8004070:	580b      	ldrlt	r3, [r1, r0]
 8004072:	18c0      	addlt	r0, r0, r3
 8004074:	4770      	bx	lr
	...

08004078 <_init>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr

08004084 <_fini>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr
